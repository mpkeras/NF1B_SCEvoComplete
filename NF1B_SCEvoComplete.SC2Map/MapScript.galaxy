//==================================================================================================
// 
// Generated Map Script
// 
// Name:   N Fight 1 Builds (SC: Evo Complete)
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibSCEV"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libSCEV_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_TeamMode {
    int lv_fighterMode;
    int lv_ownerForRelease;
    int lv_colorForRelease;
    bool lv_morphEnabled;
};

struct gs_SharedUnit {
    int lv_armory;
    int lv_banelingNest;
    int lv_roachWarren;
    int lv_lair;
    int lv_lurkerDen;
    int lv_greaterSpire;
    int lv_greaterSpireBW;
    bool lv_motherShip;
    int lv_nuke;
};

struct gs_UnitGroup {
    unitgroup lv_ghostGroup;
    unitgroup lv_nexusGroup;
};

struct gs_TeamInfo {
    int lv_userNum;
    int lv_fighterNum;
    int lv_builder;
    playergroup lv_fighterGroup;
    string lv_race;
    int lv_playerColor;
    color lv_color;
    point lv_startLocation;
    fixed lv_supplyMade;
    fixed lv_supplyUsed;
    int lv_mineralText;
    int lv_vespeneText;
};

struct gs_PlayerProperty {
    int lv_team;
    int lv_role;
    bool lv_haveBeenBuilder;
    int lv_button;
};

struct gs_PlayerGroup {
    playergroup lv_users;
    playergroup lv_players;
    playergroup lv_fightersWithNeutral;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_FighterMode_NF1B = 0;
const int ge_FighterMode__1F1B = 1;
const int ge_Role_Builder = 0;
const int ge_Role_Fighter = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_debug;
bool gv_controlDebug;
bool gv_uiShowed;
string[6] gv_raceMap;
int gv_team1_resourcePanel;
int gv_team2_resourcePanel;
int gv_team1_raceIcon;
int gv_team2_raceIcon;
int gv_buttonPlayer1;
int gv_buttonPlayer2;
int gv_buttonPlayer3;
int gv_buttonPlayer4;
int gv_buttonPlayer5;
int gv_buttonPlayer6;
int gv_buttonPlayer7;
int gv_buttonPlayer8;
int gv_buttonPlayer9;
int gv_buttonPlayer10;
int gv_buttonPlayer11;
int gv_buttonPlayer12;
int[2] gv_buttonMorphTeam1;
int[2] gv_buttonMorphTeam2;
int[6] gv_buttonRaceTeam1;
int[6] gv_buttonRaceTeam2;
int gv_controlPanel;
bool gv_buttonUserPanelClicked;
int gv_buttonControlPanel;
int gv_dButtonControlPanel;
timer gv_timer;
bool gv_changeRaceEnabled;
bool gv_ggFlag;
bool gv_team1_tipSensorTowerFlag;
bool gv_team2_tipSensorTowerFlag;
gs_TeamMode gv_team1_teamMode;
gs_TeamMode gv_team2_teamMode;
gs_SharedUnit gv_team1_sharedUnit;
gs_SharedUnit gv_team2_sharedUnit;
gs_UnitGroup gv_team1_unitGroup;
gs_UnitGroup gv_team2_unitGroup;
gs_TeamInfo gv_team1_teamInfo;
gs_TeamInfo gv_team2_teamInfo;
gs_PlayerProperty[15] gv_playerProperty;
gs_PlayerGroup gv_team1_playerGroup;
gs_PlayerGroup gv_team2_playerGroup;
text gv_textSetToBuilder;
text gv_textTeam1;
text gv_textTeam2;
text gv_textOn;
text gv_textOff;
text gv_textMorphOn;
text gv_textMorphOff;
text gv_textMorph;
text gv_textBuilderPermission;
text gv_textValidFighter;
text gv_textChangeBuilder;
text gv_textTerr;
text gv_textZerg;
text gv_textProt;
text gv_textBWTe;
text gv_textBWZe;
text gv_textBWPr;
text[6] gv_textButtonRace;
text gv_textChangeRace;
text gv_textCanNotChangeRace;
text gv_textOverRaceTime;
text gv_textMustDiffRace;
text gv_textWarningRaceTeam1;
text gv_textWarningRaceTeam2;
text gv_textButtonControlPanel;
text gv_textNewBuilder;
int gv_pv_releaseToChangeOwner;

void InitGlobals () {
    int init_i;

    gv_uiShowed = true;
    gv_team1_resourcePanel = c_invalidDialogId;
    gv_team2_resourcePanel = c_invalidDialogId;
    gv_team1_raceIcon = c_invalidDialogControlId;
    gv_team2_raceIcon = c_invalidDialogControlId;
    gv_buttonPlayer1 = c_invalidDialogControlId;
    gv_buttonPlayer2 = c_invalidDialogControlId;
    gv_buttonPlayer3 = c_invalidDialogControlId;
    gv_buttonPlayer4 = c_invalidDialogControlId;
    gv_buttonPlayer5 = c_invalidDialogControlId;
    gv_buttonPlayer6 = c_invalidDialogControlId;
    gv_buttonPlayer7 = c_invalidDialogControlId;
    gv_buttonPlayer8 = c_invalidDialogControlId;
    gv_buttonPlayer9 = c_invalidDialogControlId;
    gv_buttonPlayer10 = c_invalidDialogControlId;
    gv_buttonPlayer11 = c_invalidDialogControlId;
    gv_buttonPlayer12 = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_buttonMorphTeam1[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_buttonMorphTeam2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_buttonRaceTeam1[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_buttonRaceTeam2[init_i] = c_invalidDialogControlId;
    }
    gv_controlPanel = c_invalidDialogId;
    gv_buttonControlPanel = c_invalidDialogControlId;
    gv_dButtonControlPanel = c_invalidDialogId;
    gv_timer = TimerCreate();
    gv_team1_teamMode.lv_fighterMode = ge_FighterMode_NF1B;
    gv_team2_teamMode.lv_fighterMode = ge_FighterMode_NF1B;
    gv_team1_unitGroup.lv_ghostGroup = UnitGroupEmpty();
    gv_team1_unitGroup.lv_nexusGroup = UnitGroupEmpty();
    gv_team2_unitGroup.lv_ghostGroup = UnitGroupEmpty();
    gv_team2_unitGroup.lv_nexusGroup = UnitGroupEmpty();
    gv_team1_teamInfo.lv_fighterGroup = PlayerGroupEmpty();
    gv_team1_teamInfo.lv_color = Color(100,100,100);
    gv_team1_teamInfo.lv_mineralText = c_invalidDialogControlId;
    gv_team1_teamInfo.lv_vespeneText = c_invalidDialogControlId;
    gv_team2_teamInfo.lv_fighterGroup = PlayerGroupEmpty();
    gv_team2_teamInfo.lv_color = Color(100,100,100);
    gv_team2_teamInfo.lv_mineralText = c_invalidDialogControlId;
    gv_team2_teamInfo.lv_vespeneText = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 14; init_i += 1) {
        gv_playerProperty[init_i].lv_role = ge_Role_Fighter;
        gv_playerProperty[init_i].lv_button = c_invalidDialogControlId;
    }
    gv_team1_playerGroup.lv_users = PlayerGroupEmpty();
    gv_team1_playerGroup.lv_players = PlayerGroupEmpty();
    gv_team1_playerGroup.lv_fightersWithNeutral = PlayerGroupEmpty();
    gv_team2_playerGroup.lv_users = PlayerGroupEmpty();
    gv_team2_playerGroup.lv_players = PlayerGroupEmpty();
    gv_team2_playerGroup.lv_fightersWithNeutral = PlayerGroupEmpty();
    gv_textSetToBuilder = StringExternal("Param/Value/FB05FBA9");
    gv_textTeam1 = StringExternal("Param/Value/5D6D1A1E");
    gv_textTeam2 = StringExternal("Param/Value/2BD8C7AA");
    gv_textOn = StringExternal("Param/Value/FB7EBBF7");
    gv_textOff = StringExternal("Param/Value/9445EE5B");
    gv_textMorphOn = StringExternal("Param/Value/B84AECE9");
    gv_textMorphOff = StringExternal("Param/Value/99ABA049");
    gv_textMorph = StringExternal("Param/Value/2A6A10AE");
    gv_textBuilderPermission = StringExternal("Param/Value/D2806ADF");
    gv_textValidFighter = StringExternal("Param/Value/D2BD1B36");
    gv_textChangeBuilder = StringExternal("Param/Value/6715A323");
    gv_textTerr = StringExternal("Param/Value/EF2BBF2F");
    gv_textZerg = StringExternal("Param/Value/BF0476C2");
    gv_textProt = StringExternal("Param/Value/F2C29201");
    gv_textBWTe = StringExternal("Param/Value/1352128F");
    gv_textBWZe = StringExternal("Param/Value/A97CD713");
    gv_textBWPr = StringExternal("Param/Value/4637572E");
    gv_textChangeRace = StringExternal("Param/Value/F8369F25");
    gv_textCanNotChangeRace = StringExternal("Param/Value/1EDEE2CD");
    gv_textOverRaceTime = StringExternal("Param/Value/DCD47818");
    gv_textMustDiffRace = StringExternal("Param/Value/A9D5813A");
    gv_textWarningRaceTeam1 = StringExternal("Param/Value/100E4165");
    gv_textWarningRaceTeam2 = StringExternal("Param/Value/9843BE36");
    gv_textButtonControlPanel = StringExternal("Param/Value/341BB877");
    gv_textNewBuilder = StringExternal("Param/Value/0856FA5F");
    gv_pv_releaseToChangeOwner = 1;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_wait (int lp_s);
void gf_signal (int lp_s);
bool gf_IsEconomicUnitType (unit lp_unit);
bool gf_IsWorkerUnitType (unit lp_unit);
bool gf_IsMainBaseUnitType (unit lp_unit);
bool gf_IsSharedGroupedUnitType (unit lp_unit);
bool gf_IsCanReleaseByBuilderUnitType (unit lp_unit);
int gf_GetTeamOfPlayer (int lp_player);
int gf_GetRoleOfPlayer (int lp_player);
int gf_GetPlayerOfButton (int lp_button);
int gf_GetOwnerForRelease (int lp_team);
int gf_GetColorForRelease (int lp_team);
int gf_GetNeutralOfTeam (int lp_team);
point gf_GetStartLocationOfTeam (int lp_team);
bool gf_GetMorphEnabledOfTeam (int lp_team);
int gf_GetBuilderOfTeam (int lp_team);
void gf_ReturnCargo (unit lp_unit);
int gf_RandomFighterFromTeam (int lp_team);
int gf_RandomFighterExcludeHaveBeenFromTeam (int lp_team);
void gf_SetGameRace ();
void gf_SetPlayerRaceToBW (int lp_player);
void gf_SetPlayerRaceToSC2 (int lp_player);
unit gf_ReturnTownBuildingUnitType (int lp_player);
void gf_SetTimer ();
void gf_SetSingleMultiPlayerMode ();
void gf_SetPlayerGroup ();
void gf_SetStartLocation ();
void gf_SetRoleForTeam1 ();
void gf_SetRoleForTeam2 ();
void gf_SetStartingUnit ();
void gf_SetChangeRaceFlag ();
void gf_SetTechRestrictions (int lp_team);
void gf_SetUI ();
void gf_SetFighterMode ();
void gf_SetMeleeOptions ();
void gf_SetPlayerProperty ();
void gf_InitNexusGroup ();
void gf_SetResource ();
void gf_SetAlliance ();
void gf_SetSupplyLimit ();
bool gf_IsButtonPlayerType (int lp_button);
void gf_SetButtonPlayer (int lp_length);
void gf_ClickButtonPlayer (int lp_oldBuilder, int lp_newBuilder);
void gf_UpdateButtonPlayer (int lp_oldBuilder, int lp_newBuilder);
void gf_BindButton (int lp_player);
void gf_SetRaceIcon (int lp_x1, int lp_y1, int lp_x2, int lp_y2);
void gf_UpdateRaceIcon (int lp_team, string lp_race);
bool gf_IsButtonMorphType (int lp_button);
void gf_SetButtonMorph ();
void gf_SetButtonMorphForTeam (int lp_team);
void gf_ClickButtonMorph (int lp_button, int lp_team);
void gf_UpdateButtonMorphForTeam (int lp_team);
bool gf_ClickButtonRace (int lp_player, int lp_button);
int gf_GetIndexOfRace (string lp_race);
void gf_SetButtonRace ();
void gf_UpdateButtonRace (string lp_oldRace, string lp_newRace, int lp_team);
bool gf_ErrorIsBuilder (int lp_player);
void gf_SetUserPanel ();
void gf_SetButtonUserPanel ();
void gf_ClickButtonUserPanel ();
void gf_TipSameRace ();
void gf_ChangeBuilder (int lp_oldBuilder, int lp_newBuilder, int lp_team);
void gf_OwnershipForChangeBuilder (int lp_oldBuilder, int lp_newBuilder);
void gf_UpdateMorphForChangeBuilder (int lp_oldBuilder, int lp_newBuilder);
void gf_UpdateRole (int lp_team, int lp_oldBuilder, int lp_newBuilder);
void gf_TransferResource (int lp_team, int lp_player_1, int lp_player_2);
void gf_UpdateResource (int lp_team, int lp_oldBuilder, int lp_newBuilder);
void gf_CloseResourceUpdateTrigger (int lp_team);
void gf_OpenResourceUpdateTrigger (int lp_team);
void gf_OpenSupplyShareTrigger (int lp_team);
void gf_CloseSupplyShareTrigger (int lp_team);
void gf_MaintainSupplyUnchanged (int lp_oldOwner, int lp_newOwner);
void gf_AllowZergMorph (int lp_player);
void gf_DisallowZergMorph (int lp_player);
void gf_ZergMorph (int lp_player, bool lp_option);
void gf_ZergBWMorph (int lp_player, bool lp_option);
void gf_ChangeOwnershipAfterSelect (unit lp_unit, int lp_fighter);
void gf_ChangeOwnershipAfterRelease (unit lp_unit);
void gf_DisableAbilityForReleasedMainBase (unit lp_unit);
void gf_EnableAbilityForReleasedMainBase (unit lp_unit);
void gf_ChangeFighterMode (int lp_team, int lp_mode);
void gf_UpdateFighterMode (int lp_team);
void gf_FighterDefeat (int lp_team);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_temp;
trigger gt_Debug;
trigger gt_Test;
trigger gt_Food;
trigger gt_Res;
trigger gt_Fog;
trigger gt_Fast;
trigger gt_Control;
trigger gt_GainControl;
trigger gt_ChangeRaceForDebug;
trigger gt_RemoveUnit;
trigger gt_Worker;
trigger gt_Color;
trigger gt_BeBuilder;
trigger gt_BeFighter;
trigger gt_NF;
trigger gt__1F;
trigger gt_GG;
trigger gt_ShowHideUI;
trigger gt_DisableExperimental;
trigger gt_EnableExperimental;
trigger gt_unlock_pv_releaseToChangeOwner;
trigger gt_Initialization;
trigger gt_MapInitialization;
trigger gt_BeforeRoleSelection;
trigger gt_DuringRoleSelection;
trigger gt_AfterRoleSelection;
trigger gt_ClickDialogItem;
trigger gt_TipRole;
trigger gt_TipCommands;
trigger gt_TipDebugCommands;
trigger gt_TipGG;
trigger gt_TipSensorTower;
trigger gt_TipRace;
trigger gt_TipHelp;
trigger gt_TipZerg;
trigger gt_GiveUpBuilderRole;
trigger gt_ChangeBuilder;
trigger gt_ChangeRace;
trigger gt_FighterQuit;
trigger gt_Team1_ResourceDisplay;
trigger gt_Team2_ResourceDisplay;
trigger gt_Team1_BuilderMineralUpdate;
trigger gt_Team1_BuilderVespeneUpdate;
trigger gt_Team1_FighterMineralUpdate;
trigger gt_Team1_FighterVespeneUpdate;
trigger gt_Team2_BuilderMineralUpdate;
trigger gt_Team2_BuilderVespeneUpdate;
trigger gt_Team2_FighterMineralUpdate;
trigger gt_Team2_FighterVespeneUpdate;
trigger gt_Team1_BuilderMadeChange;
trigger gt_Team1_BuilderUsedChange;
trigger gt_Team1_FighterMadeChange;
trigger gt_Team1_FighterUsedChange;
trigger gt_Team2_BuilderMadeChange;
trigger gt_Team2_BuilderUsedChange;
trigger gt_Team2_FighterMadeChange;
trigger gt_Team2_FighterUsedChange;
trigger gt_ChangeMorphEnabledByBuilder;
trigger gt_ShareStructure;
trigger gt_ShareUpgrade;
trigger gt_AddArmory;
trigger gt_DecArmory;
trigger gt_AddBanelingNest;
trigger gt_DecBanelingNest;
trigger gt_AddRoachWarren;
trigger gt_DecRoachWarren;
trigger gt_AddLair;
trigger gt_DecLair;
trigger gt_AddLurkerDen;
trigger gt_DecLurkerDen;
trigger gt_AddGreaterSpire;
trigger gt_DecGreaterSpire;
trigger gt_AddGreaterSpireBW;
trigger gt_DecGreaterSpireBW;
trigger gt_TrainGhostComplete;
trigger gt_AddNuke;
trigger gt_UseNuke;
trigger gt_TrainGhostBWComplete;
trigger gt_AddNukeBW;
trigger gt_UseNukeBW;
trigger gt_BuildNexusComplete;
trigger gt_AddMothership;
trigger gt_DecMothership;
trigger gt_ReleaseByBuilder;
trigger gt_ReleaseByFighter;
trigger gt_ReleaseAfterTrain;
trigger gt_ReleaseAfterMorph;
trigger gt_ReleaseAfterWarp;
trigger gt_GetByBuillder;
trigger gt_GetByFighterSelect;
trigger gt_BuilderDefeat;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_wait (int lp_s) {
    // Automatic Variable Declarations
    // Implementation
    gv_pv_releaseToChangeOwner -= 1;
}

void gf_signal (int lp_s) {
    // Automatic Variable Declarations
    // Implementation
    gv_pv_releaseToChangeOwner += 1;
    if ((lp_s >= 1)) {
        TriggerExecute(gt_unlock_pv_releaseToChangeOwner, true, false);
    }

}

bool gf_IsEconomicUnitType (unit lp_unit) {
    // Variable Declarations
    string lv__unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv__unitType = UnitGetType(lp_unit);
    if (((lv__unitType == "SCV") || (lv__unitType == "MULE") || (lv__unitType == "Drone") || (lv__unitType == "Queen") || (lv__unitType == "Overlord") || (lv__unitType == "Probe") || (lv__unitType == "SCVSCBW") || (lv__unitType == "DroneSCBW") || (lv__unitType == "OverlordSCBW") || (lv__unitType == "ProbeSCBW"))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsWorkerUnitType (unit lp_unit) {
    // Variable Declarations
    string lv__unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv__unitType = UnitGetType(lp_unit);
    if (((lv__unitType == "SCV") || (lv__unitType == "MULE") || (lv__unitType == "Drone") || (lv__unitType == "Probe") || (lv__unitType == "SCVSCBW") || (lv__unitType == "DroneSCBW") || (lv__unitType == "ProbeSCBW"))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsMainBaseUnitType (unit lp_unit) {
    // Variable Declarations
    string lv__unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv__unitType = UnitGetType(lp_unit);
    if (((lv__unitType == "CommandCenter") || (lv__unitType == "CommandCenterFlying") || (lv__unitType == "OrbitalCommand") || (lv__unitType == "OrbitalCommandFlying") || (lv__unitType == "PlanetaryFortress") || (lv__unitType == "Hatchery") || (lv__unitType == "Lair") || (lv__unitType == "Hive") || (lv__unitType == "Nexus") || (lv__unitType == "CommandCenterSCBW") || (lv__unitType == "CommandCenterSCBW@Flying") || (lv__unitType == "HatcherySCBW") || (lv__unitType == "LairSCBW") || (lv__unitType == "HiveSCBW") || (lv__unitType == "NexusSCBW"))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsSharedGroupedUnitType (unit lp_unit) {
    // Variable Declarations
    string lv__unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv__unitType = UnitGetType(lp_unit);
    if (((lv__unitType == "SensorTower") || (lv__unitType == "CreepTumorQueen") || (lv__unitType == "CreepTumorBurrowed") || (lv__unitType == "CreepTumor") || (lv__unitType == "OrbitalCommand") || (lv__unitType == "OrbitalCommandFlying") || (lv__unitType == "CommandCenterSCBW") || (lv__unitType == "CommandCenterSCBW@Flying") || (lv__unitType == "ComsatStationSCBW"))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsCanReleaseByBuilderUnitType (unit lp_unit) {
    // Variable Declarations
    string lv__unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv__unitType = UnitGetType(lp_unit);
    if (((lv__unitType == "OverlordSCBW") || (lv__unitType == "OrbitalCommand") || (lv__unitType == "CommandCenterSCBW"))) {
        return true;
    }
    else {
        return false;
    }
}

int gf_GetTeamOfPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(gv_team1_playerGroup.lv_players, lp_player) == true)) {
        return 1;
    }
    else {
        return 2;
    }
}

int gf_GetRoleOfPlayer (int lp_player) {
    // Variable Declarations
    int lv__team;
    int lv__builder;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv__team = gf_GetTeamOfPlayer(lp_player);
    if ((lv__team == 1)) {
        lv__builder = gv_team1_teamInfo.lv_builder;
    }
    else {
        lv__builder = gv_team2_teamInfo.lv_builder;
    }
    if ((lp_player == lv__builder)) {
        return ge_Role_Builder;
    }
    else {
        return ge_Role_Fighter;
    }
}

int gf_GetPlayerOfButton (int lp_button) {
    // Automatic Variable Declarations
    int auto8D024C9E_val;

    // Implementation
    auto8D024C9E_val = lp_button;
    if (auto8D024C9E_val == gv_buttonPlayer1) {
        return 1;
    }
    else if (auto8D024C9E_val == gv_buttonPlayer2) {
        return 2;
    }
    else if (auto8D024C9E_val == gv_buttonPlayer3) {
        return 3;
    }
    else if (auto8D024C9E_val == gv_buttonPlayer4) {
        return 4;
    }
    else if (auto8D024C9E_val == gv_buttonPlayer5) {
        return 5;
    }
    else if (auto8D024C9E_val == gv_buttonPlayer6) {
        return 6;
    }
    else if (auto8D024C9E_val == gv_buttonPlayer7) {
        return 7;
    }
    else if (auto8D024C9E_val == gv_buttonPlayer8) {
        return 8;
    }
    else if (auto8D024C9E_val == gv_buttonPlayer9) {
        return 9;
    }
    else if (auto8D024C9E_val == gv_buttonPlayer10) {
        return 10;
    }
    else if (auto8D024C9E_val == gv_buttonPlayer11) {
        return 11;
    }
    else if (auto8D024C9E_val == gv_buttonPlayer12) {
        return 12;
    }
    else {
        return -1;
    }
}

int gf_GetOwnerForRelease (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_team == 1)) {
        return gv_team1_teamMode.lv_ownerForRelease;
    }
    else {
        return gv_team2_teamMode.lv_ownerForRelease;
    }
}

int gf_GetColorForRelease (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_team == 1)) {
        return gv_team1_teamMode.lv_colorForRelease;
    }
    else {
        return gv_team2_teamMode.lv_colorForRelease;
    }
}

int gf_GetNeutralOfTeam (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_team == 1)) {
        return 13;
    }
    else {
        return 14;
    }
}

point gf_GetStartLocationOfTeam (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_team == 1)) {
        return gv_team1_teamInfo.lv_startLocation;
    }
    else {
        return gv_team2_teamInfo.lv_startLocation;
    }
}

bool gf_GetMorphEnabledOfTeam (int lp_team) {
    // Automatic Variable Declarations
    int auto2B22285A_val;

    // Implementation
    auto2B22285A_val = lp_team;
    if (auto2B22285A_val == 1) {
        return gv_team1_teamMode.lv_morphEnabled;
    }
    else if (auto2B22285A_val == 2) {
        return gv_team2_teamMode.lv_morphEnabled;
    }
    else {
        return false;
    }
}

int gf_GetBuilderOfTeam (int lp_team) {
    // Automatic Variable Declarations
    int auto5A7BD3DD_val;

    // Implementation
    auto5A7BD3DD_val = lp_team;
    if (auto5A7BD3DD_val == 1) {
        return gv_team1_teamInfo.lv_builder;
    }
    else if (auto5A7BD3DD_val == 2) {
        return gv_team2_teamInfo.lv_builder;
    }
    else {
        return -1;
    }
}

void gf_ReturnCargo (unit lp_unit) {
    // Automatic Variable Declarations
    string autoB9B079BB_val;

    // Implementation
    autoB9B079BB_val = UnitGetType(lp_unit);
    if (autoB9B079BB_val == "SCV") {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("SCVHarvest", 1)), c_orderQueueReplace);
    }
    else if (autoB9B079BB_val == "MULE") {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("MULEGather", 1)), c_orderQueueReplace);
    }
    else if (autoB9B079BB_val == "Drone") {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("DroneHarvest", 1)), c_orderQueueReplace);
    }
    else if (autoB9B079BB_val == "Probe") {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("ProbeHarvest", 1)), c_orderQueueReplace);
    }
    else if (autoB9B079BB_val == "SCVSCBW") {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("SCVSCBW@Harvest", 1)), c_orderQueueReplace);
    }
    else if (autoB9B079BB_val == "DroneSCBW") {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("DroneSCBW@Harvest", 1)), c_orderQueueReplace);
    }
    else if (autoB9B079BB_val == "ProbeSCBW") {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("ProbeSCBW@Harvest", 1)), c_orderQueueReplace);
    }
    else {
    }
}

int gf_RandomFighterFromTeam (int lp_team) {
    // Variable Declarations
    int lv__fighterNum;
    int lv__random;
    int lv__fighter;

    // Automatic Variable Declarations
    int auto28F3F02F_val;

    // Variable Initialization

    // Implementation
    auto28F3F02F_val = lp_team;
    if (auto28F3F02F_val == 1) {
        lv__fighterNum = PlayerGroupCount(gv_team1_teamInfo.lv_fighterGroup);
        lv__random = RandomInt(1, lv__fighterNum);
        lv__fighter = PlayerGroupPlayer(gv_team1_teamInfo.lv_fighterGroup, lv__random);
    }
    else if (auto28F3F02F_val == 2) {
        lv__fighterNum = PlayerGroupCount(gv_team2_teamInfo.lv_fighterGroup);
        lv__random = RandomInt(1, lv__fighterNum);
        lv__fighter = PlayerGroupPlayer(gv_team2_teamInfo.lv_fighterGroup, lv__random);
    }
    else {
    }
    return lv__fighter;
}

int gf_RandomFighterExcludeHaveBeenFromTeam (int lp_team) {
    // Variable Declarations
    int lv__fighterNum;
    int lv__random;
    int lv__fighter;
    playergroup lv__fighterGroupExcludeHaveBeen;
    int lv__player;

    // Automatic Variable Declarations
    int auto35E12C3D_val;
    playergroup auto2D34FF5D_g;

    // Variable Initialization
    lv__fighterGroupExcludeHaveBeen = PlayerGroupEmpty();

    // Implementation
    auto35E12C3D_val = lp_team;
    if (auto35E12C3D_val == 1) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(gv_team1_teamInfo.lv_fighterGroup, lv__fighterGroupExcludeHaveBeen);
    }
    else if (auto35E12C3D_val == 2) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(gv_team2_teamInfo.lv_fighterGroup, lv__fighterGroupExcludeHaveBeen);
    }
    else {
    }
    auto2D34FF5D_g = lv__fighterGroupExcludeHaveBeen;
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(auto2D34FF5D_g, lv__player);
        if (lv__player < 0) { break; }
        if ((gv_playerProperty[lv__player].lv_haveBeenBuilder == true)) {
            PlayerGroupRemove(lv__fighterGroupExcludeHaveBeen, lv__player);
        }

    }
    lv__fighterNum = PlayerGroupCount(lv__fighterGroupExcludeHaveBeen);
    if ((lv__fighterNum >= 1)) {
        lv__random = RandomInt(1, lv__fighterNum);
        lv__fighter = PlayerGroupPlayer(lv__fighterGroupExcludeHaveBeen, lv__random);
        return lv__fighter;
    }
    else {
        return -1;
    }
}

void gf_SetGameRace () {
    // Variable Declarations
    int lv_playerIndex;

    // Automatic Variable Declarations
    playergroup auto666F624A_g;
    string autoE1328F44_val;

    // Variable Initialization

    // Implementation
    auto666F624A_g = PlayerGroupActive();
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(auto666F624A_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        autoE1328F44_val = GameAttributePlayerValue("[bnet:NF1B_SCEvoMulti/0.0/236353,file:Mods\\NF1B_SCEvoComplete\\NF1B_SCEvoMulti.SC2Mod]1", lv_playerIndex);
        if (autoE1328F44_val == "0001") {
            gf_SetPlayerRaceToBW(lv_playerIndex);
        }
        else if (autoE1328F44_val == "0002") {
            gf_SetPlayerRaceToSC2(lv_playerIndex);
        }
        else if (autoE1328F44_val == "0003") {
            if ((RandomInt(0, 1) == 1)) {
                gf_SetPlayerRaceToBW(lv_playerIndex);
            }
            else {
                gf_SetPlayerRaceToSC2(lv_playerIndex);
            }
        }
        else {
            if ((RandomInt(0, 1) == 1)) {
                gf_SetPlayerRaceToBW(lv_playerIndex);
            }
            else {
                gf_SetPlayerRaceToSC2(lv_playerIndex);
            }
        }
    }
    libSCEV_gf_SCEvoActivateFeature(libSCEV_ge_SCEvoFeatures_FractionalArmor, true);
    libSCEV_gf_SCEvoActivateFeature(libSCEV_ge_SCEvoFeatures_MissChance, true);
}

void gf_SetPlayerRaceToBW (int lp_player) {
    // Automatic Variable Declarations
    string autoD75E6D6D_val;

    // Implementation
    autoD75E6D6D_val = PlayerRace(lp_player);
    if (autoD75E6D6D_val == ("Terr")) {
        PlayerSetRace(lp_player, "BWTe");
    }
    else if (autoD75E6D6D_val == ("Prot")) {
        PlayerSetRace(lp_player, "BWPr");
    }
    else if (autoD75E6D6D_val == ("Zerg")) {
        PlayerSetRace(lp_player, "BWZe");
    }
    else {
    }
}

void gf_SetPlayerRaceToSC2 (int lp_player) {
    // Automatic Variable Declarations
    string auto57EF8C76_val;

    // Implementation
    auto57EF8C76_val = PlayerRace(lp_player);
    if (auto57EF8C76_val == ("BWTe")) {
        PlayerSetRace(lp_player, "Terr");
    }
    else if (auto57EF8C76_val == ("BWPr")) {
        PlayerSetRace(lp_player, "Prot");
    }
    else if (auto57EF8C76_val == ("BWZe")) {
        PlayerSetRace(lp_player, "Zerg");
    }
    else {
    }
}

unit gf_ReturnTownBuildingUnitType (int lp_player) {
    // Variable Declarations
    string lv_townBuildingType;
    unit lv_townUnit;

    // Automatic Variable Declarations
    string auto26A44178_val;
    unitgroup auto9AD84FEF_g;
    int auto9AD84FEF_u;
    unit auto9AD84FEF_var;

    // Variable Initialization

    // Implementation
    Wait(0.005, c_timeGame);
    auto26A44178_val = PlayerRace(lp_player);
    if (auto26A44178_val == "Prot") {
        lv_townBuildingType = "Nexus";
    }
    else if (auto26A44178_val == "Terr") {
        lv_townBuildingType = "CommandCenter";
    }
    else if (auto26A44178_val == "Zerg") {
        lv_townBuildingType = "Hatchery";
    }
    else if (auto26A44178_val == "BWPr") {
        lv_townBuildingType = "NexusSCBW";
    }
    else if (auto26A44178_val == "BWTe") {
        lv_townBuildingType = "CommandCenterSCBW";
    }
    else if (auto26A44178_val == "BWZe") {
        lv_townBuildingType = "HatcherySCBW";
    }
    else {
        return null;
    }
    auto9AD84FEF_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto9AD84FEF_u = UnitGroupCount(auto9AD84FEF_g, c_unitCountAll);
    for (;; auto9AD84FEF_u -= 1) {
        auto9AD84FEF_var = UnitGroupUnitFromEnd(auto9AD84FEF_g, auto9AD84FEF_u);
        if (auto9AD84FEF_var == null) { break; }
        lv_townUnit = auto9AD84FEF_var;
    }
    return lv_townUnit;
}

void gf_SetTimer () {
    // Automatic Variable Declarations
    // Implementation
    TimerStart(gv_timer, 60.0, false, c_timeReal);
}

void gf_SetSingleMultiPlayerMode () {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupCount(libSCEV_gf_HumanPlayers()) == 1)) {
        gv_debug = true;
        gv_ggFlag = true;
        UIDisplayMessage(libSCEV_gf_HumanPlayers(), c_messageAreaSubtitle, StringExternal("Param/Value/C2B87501"));
        TriggerExecute(gt_TipDebugCommands, true, false);
    }

}

void gf_SetPlayerGroup () {
    // Variable Declarations
    int lv__player;

    // Automatic Variable Declarations
    playergroup auto80095435_g;
    playergroup auto575BAC2B_g;

    // Variable Initialization

    // Implementation
    if ((GameIsOnline() == true)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(GameAttributePlayersForTeam(1), gv_team1_playerGroup.lv_users);
        libNtve_gf_AddPlayerGroupToPlayerGroup(GameAttributePlayersForTeam(2), gv_team2_playerGroup.lv_users);
    }
    else {
        PlayerGroupAdd(gv_team1_playerGroup.lv_users, 1);
        PlayerGroupAdd(gv_team1_playerGroup.lv_users, 2);
        PlayerGroupAdd(gv_team1_playerGroup.lv_users, 3);
        PlayerGroupAdd(gv_team2_playerGroup.lv_users, 4);
        PlayerGroupAdd(gv_team2_playerGroup.lv_users, 5);
        PlayerGroupAdd(gv_team2_playerGroup.lv_users, 6);
    }
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_team1_playerGroup.lv_users, gv_team1_playerGroup.lv_players);
    PlayerGroupAdd(gv_team1_playerGroup.lv_players, 13);
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_team2_playerGroup.lv_users, gv_team2_playerGroup.lv_players);
    PlayerGroupAdd(gv_team2_playerGroup.lv_players, 14);
    auto80095435_g = gv_team1_playerGroup.lv_players;
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(auto80095435_g, lv__player);
        if (lv__player < 0) { break; }
        gv_playerProperty[lv__player].lv_team = 1;
    }
    auto575BAC2B_g = gv_team2_playerGroup.lv_players;
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(auto575BAC2B_g, lv__player);
        if (lv__player < 0) { break; }
        gv_playerProperty[lv__player].lv_team = 2;
    }
}

void gf_SetStartLocation () {
    // Variable Declarations
    int lv__random;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv__random = RandomInt(1, 2);
    if ((lv__random == 1)) {
        gv_team1_teamInfo.lv_startLocation = PointFromId(2007263747);
        gv_team2_teamInfo.lv_startLocation = PointFromId(760164555);
    }
    else {
        gv_team1_teamInfo.lv_startLocation = PointFromId(760164555);
        gv_team2_teamInfo.lv_startLocation = PointFromId(2007263747);
    }
}

void gf_SetRoleForTeam1 () {
    // Variable Declarations
    int lv__player;
    int lv__builder;
    int lv__random;
    int lv__builderNum;
    playergroup lv__builderGroup;

    // Automatic Variable Declarations
    playergroup auto61B413DA_g;

    // Variable Initialization
    lv__builderGroup = PlayerGroupEmpty();

    // Implementation
    gv_team1_teamInfo.lv_userNum = PlayerGroupCount(gv_team1_playerGroup.lv_users);
    gv_team1_teamInfo.lv_fighterNum = gv_team1_teamInfo.lv_userNum;
    gv_team1_teamInfo.lv_fighterNum -= 1;
    auto61B413DA_g = gv_team1_playerGroup.lv_users;
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(auto61B413DA_g, lv__player);
        if (lv__player < 0) { break; }
        if ((GameAttributePlayerValue("[bnet:NF1B_SCEvoMulti/0.0/236353,file:Mods\\NF1B_SCEvoComplete\\NF1B_SCEvoMulti.SC2Mod]2", lv__player) == "0001")) {
            PlayerGroupAdd(lv__builderGroup, lv__player);
        }
        else {
            PlayerGroupAdd(gv_team1_teamInfo.lv_fighterGroup, lv__player);
        }
    }
    lv__builderNum = PlayerGroupCount(lv__builderGroup);
    if ((lv__builderNum == 0)) {
        lv__random = RandomInt(1, gv_team1_teamInfo.lv_userNum);
        lv__builder = PlayerGroupPlayer(gv_team1_playerGroup.lv_users, lv__random);
        gv_team1_teamInfo.lv_builder = lv__builder;
        PlayerGroupRemove(gv_team1_teamInfo.lv_fighterGroup, lv__builder);
    }
    else if ((lv__builderNum == 1)) {
        gv_team1_teamInfo.lv_builder = PlayerGroupPlayer(lv__builderGroup, 1);
    }
    else if ((lv__builderNum > 1)) {
        lv__random = RandomInt(1, lv__builderNum);
        lv__builder = PlayerGroupPlayer(lv__builderGroup, lv__random);
        gv_team1_teamInfo.lv_builder = lv__builder;
        PlayerGroupRemove(lv__builderGroup, lv__builder);
        libNtve_gf_AddPlayerGroupToPlayerGroup(lv__builderGroup, gv_team1_teamInfo.lv_fighterGroup);
    }
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_team1_teamInfo.lv_fighterGroup, gv_team1_playerGroup.lv_fightersWithNeutral);
    PlayerGroupAdd(gv_team1_playerGroup.lv_fightersWithNeutral, 13);
}

void gf_SetRoleForTeam2 () {
    // Variable Declarations
    int lv__player;
    int lv__builder;
    int lv__random;
    int lv__builderNum;
    playergroup lv__builderGroup;

    // Automatic Variable Declarations
    playergroup auto15D3362E_g;

    // Variable Initialization
    lv__builderGroup = PlayerGroupEmpty();

    // Implementation
    gv_team2_teamInfo.lv_userNum = PlayerGroupCount(gv_team2_playerGroup.lv_users);
    gv_team2_teamInfo.lv_fighterNum = gv_team2_teamInfo.lv_userNum;
    gv_team2_teamInfo.lv_fighterNum -= 1;
    auto15D3362E_g = gv_team2_playerGroup.lv_users;
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(auto15D3362E_g, lv__player);
        if (lv__player < 0) { break; }
        if ((GameAttributePlayerValue("[bnet:NF1B_SCEvoMulti/0.0/236353,file:Mods\\NF1B_SCEvoComplete\\NF1B_SCEvoMulti.SC2Mod]2", lv__player) == "0001")) {
            PlayerGroupAdd(lv__builderGroup, lv__player);
        }
        else {
            PlayerGroupAdd(gv_team2_teamInfo.lv_fighterGroup, lv__player);
        }
    }
    lv__builderNum = PlayerGroupCount(lv__builderGroup);
    if ((lv__builderNum == 0)) {
        lv__random = RandomInt(1, gv_team2_teamInfo.lv_userNum);
        lv__builder = PlayerGroupPlayer(gv_team2_playerGroup.lv_users, lv__random);
        gv_team2_teamInfo.lv_builder = lv__builder;
        PlayerGroupRemove(gv_team2_teamInfo.lv_fighterGroup, lv__builder);
    }
    else if ((lv__builderNum == 1)) {
        gv_team2_teamInfo.lv_builder = PlayerGroupPlayer(lv__builderGroup, 1);
    }
    else if ((lv__builderNum > 1)) {
        lv__random = RandomInt(1, lv__builderNum);
        lv__builder = PlayerGroupPlayer(lv__builderGroup, lv__random);
        gv_team2_teamInfo.lv_builder = lv__builder;
        PlayerGroupRemove(lv__builderGroup, lv__builder);
        libNtve_gf_AddPlayerGroupToPlayerGroup(lv__builderGroup, gv_team2_teamInfo.lv_fighterGroup);
    }
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_team2_teamInfo.lv_fighterGroup, gv_team2_playerGroup.lv_fightersWithNeutral);
    PlayerGroupAdd(gv_team2_playerGroup.lv_fightersWithNeutral, 14);
}

void gf_SetStartingUnit () {
    // Variable Declarations
    int lv__player;

    // Automatic Variable Declarations
    playergroup autoDFB74190_g;
    playergroup autoF4337112_g;

    // Variable Initialization

    // Implementation
    gv_team1_teamInfo.lv_race = PlayerRace(gv_team1_teamInfo.lv_builder);
    gv_team1_teamInfo.lv_playerColor = PlayerGetColorIndex(gv_team1_teamInfo.lv_builder, false);
    gv_team1_teamInfo.lv_color = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_team1_teamInfo.lv_builder, false));
    MeleeInitResourcesForPlayer(gv_team1_teamInfo.lv_builder, gv_team1_teamInfo.lv_race);
    MeleeInitUnitsForPlayer(gv_team1_teamInfo.lv_builder, gv_team1_teamInfo.lv_race, gv_team1_teamInfo.lv_startLocation);
    autoDFB74190_g = gv_team1_playerGroup.lv_fightersWithNeutral;
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(autoDFB74190_g, lv__player);
        if (lv__player < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, lv__player, gv_team1_teamInfo.lv_startLocation);
        libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
        PlayerSetRace(lv__player, gv_team1_teamInfo.lv_race);
        PlayerSetColorIndex(lv__player, gv_team1_teamInfo.lv_playerColor, true);
        CameraPan(lv__player, gv_team1_teamInfo.lv_startLocation, 0.0, -1, 10.0, false);
    }
    gv_team2_teamInfo.lv_race = PlayerRace(gv_team2_teamInfo.lv_builder);
    gv_team2_teamInfo.lv_playerColor = PlayerGetColorIndex(gv_team2_teamInfo.lv_builder, false);
    gv_team2_teamInfo.lv_color = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_team2_teamInfo.lv_builder, false));
    MeleeInitResourcesForPlayer(gv_team2_teamInfo.lv_builder, gv_team2_teamInfo.lv_race);
    MeleeInitUnitsForPlayer(gv_team2_teamInfo.lv_builder, gv_team2_teamInfo.lv_race, gv_team2_teamInfo.lv_startLocation);
    autoF4337112_g = gv_team2_playerGroup.lv_fightersWithNeutral;
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(autoF4337112_g, lv__player);
        if (lv__player < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, lv__player, gv_team2_teamInfo.lv_startLocation);
        libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
        PlayerSetRace(lv__player, gv_team2_teamInfo.lv_race);
        PlayerSetColorIndex(lv__player, gv_team2_teamInfo.lv_playerColor, true);
        CameraPan(lv__player, gv_team2_teamInfo.lv_startLocation, 0.0, -1, 10.0, false);
    }
}

void gf_SetChangeRaceFlag () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_team1_teamInfo.lv_race == gv_team2_teamInfo.lv_race)) {
        gv_changeRaceEnabled = true;
        gf_TipSameRace();
    }

}

void gf_SetTechRestrictions (int lp_team) {
    // Variable Declarations
    int lv__player;

    // Automatic Variable Declarations
    playergroup auto652F3E92_g;
    playergroup autoFDAF23B4_g;

    // Variable Initialization

    // Implementation
    auto652F3E92_g = gv_team1_playerGroup.lv_fightersWithNeutral;
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(auto652F3E92_g, lv__player);
        if (lv__player < 0) { break; }
        gf_DisallowZergMorph(lv__player);
    }
    autoFDAF23B4_g = gv_team2_playerGroup.lv_fightersWithNeutral;
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(autoFDAF23B4_g, lv__player);
        if (lv__player < 0) { break; }
        gf_DisallowZergMorph(lv__player);
    }
}

trigger auto_gf_SetUI_Trigger = null;

void gf_SetUI () {
    if (auto_gf_SetUI_Trigger == null) {
        auto_gf_SetUI_Trigger = TriggerCreate("auto_gf_SetUI_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetUI_Trigger, false, false);
}

bool auto_gf_SetUI_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gf_SetUserPanel();
    return true;
}

trigger auto_gf_SetFighterMode_Trigger = null;

void gf_SetFighterMode () {
    if (auto_gf_SetFighterMode_Trigger == null) {
        auto_gf_SetFighterMode_Trigger = TriggerCreate("auto_gf_SetFighterMode_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetFighterMode_Trigger, false, false);
}

bool auto_gf_SetFighterMode_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_team1_teamInfo.lv_fighterNum == 1)) {
        gf_ChangeFighterMode(1, ge_FighterMode__1F1B);
    }
    else {
        gf_ChangeFighterMode(1, ge_FighterMode_NF1B);
    }
    if ((gv_team2_teamInfo.lv_fighterNum == 1)) {
        gf_ChangeFighterMode(2, ge_FighterMode__1F1B);
    }
    else {
        gf_ChangeFighterMode(2, ge_FighterMode_NF1B);
    }
    return true;
}

trigger auto_gf_SetMeleeOptions_Trigger = null;

void gf_SetMeleeOptions () {
    if (auto_gf_SetMeleeOptions_Trigger == null) {
        auto_gf_SetMeleeOptions_Trigger = TriggerCreate("auto_gf_SetMeleeOptions_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetMeleeOptions_Trigger, false, false);
}

bool auto_gf_SetMeleeOptions_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;

    // Automatic Variable Declarations
    playergroup autoF0FCBD7F_g;

    // Variable Initialization

    // Implementation
    if ((gv_debug == false)) {
        autoF0FCBD7F_g = PlayerGroupAll();
        lv__player = -1;
        while (true) {
            lv__player = PlayerGroupNextPlayer(autoF0FCBD7F_g, lv__player);
            if (lv__player < 0) { break; }
            MeleeSetOption(lv__player, c_meleeOptionVictory, true);
            MeleeSetOption(lv__player, c_meleeOptionDefeat, true);
        }
        MeleeSetOption(gv_team1_teamInfo.lv_builder, c_meleeOptionReveal, true);
        MeleeSetOption(gv_team2_teamInfo.lv_builder, c_meleeOptionReveal, true);
    }

    return true;
}

void gf_SetPlayerProperty () {
    // Automatic Variable Declarations
    // Implementation
    gv_playerProperty[gv_team1_teamInfo.lv_builder].lv_role = ge_Role_Builder;
    gv_playerProperty[gv_team1_teamInfo.lv_builder].lv_haveBeenBuilder = true;
    gv_playerProperty[gv_team2_teamInfo.lv_builder].lv_role = ge_Role_Builder;
    gv_playerProperty[gv_team2_teamInfo.lv_builder].lv_haveBeenBuilder = true;
}

trigger auto_gf_InitNexusGroup_Trigger = null;

void gf_InitNexusGroup () {
    if (auto_gf_InitNexusGroup_Trigger == null) {
        auto_gf_InitNexusGroup_Trigger = TriggerCreate("auto_gf_InitNexusGroup_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitNexusGroup_Trigger, false, false);
}

bool auto_gf_InitNexusGroup_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF3E6B359_g;
    int autoF3E6B359_u;
    unit autoF3E6B359_var;
    unitgroup auto5FFCC421_g;
    int auto5FFCC421_u;
    unit auto5FFCC421_var;

    // Implementation
    autoF3E6B359_g = UnitGroup("Nexus", gv_team1_teamInfo.lv_builder, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF3E6B359_u = UnitGroupCount(autoF3E6B359_g, c_unitCountAll);
    for (;; autoF3E6B359_u -= 1) {
        autoF3E6B359_var = UnitGroupUnitFromEnd(autoF3E6B359_g, autoF3E6B359_u);
        if (autoF3E6B359_var == null) { break; }
        UnitGroupAdd(gv_team1_unitGroup.lv_nexusGroup, autoF3E6B359_var);
    }
    auto5FFCC421_g = UnitGroup("Nexus", gv_team2_teamInfo.lv_builder, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5FFCC421_u = UnitGroupCount(auto5FFCC421_g, c_unitCountAll);
    for (;; auto5FFCC421_u -= 1) {
        auto5FFCC421_var = UnitGroupUnitFromEnd(auto5FFCC421_g, auto5FFCC421_u);
        if (auto5FFCC421_var == null) { break; }
        UnitGroupAdd(gv_team2_unitGroup.lv_nexusGroup, auto5FFCC421_var);
    }
    return true;
}

trigger auto_gf_SetResource_Trigger = null;

void gf_SetResource () {
    if (auto_gf_SetResource_Trigger == null) {
        auto_gf_SetResource_Trigger = TriggerCreate("auto_gf_SetResource_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetResource_Trigger, false, false);
}

bool auto_gf_SetResource_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    UISetResourceTradeCountdownTime(0);
    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    UISetResourceVisible(gv_team1_teamInfo.lv_fighterGroup, c_resourceTypeMinerals, false);
    UISetResourceVisible(gv_team1_teamInfo.lv_fighterGroup, c_resourceTypeVespene, false);
    UISetResourceVisible(gv_team2_teamInfo.lv_fighterGroup, c_resourceTypeMinerals, false);
    UISetResourceVisible(gv_team2_teamInfo.lv_fighterGroup, c_resourceTypeVespene, false);
    return true;
}

trigger auto_gf_SetAlliance_Trigger = null;

void gf_SetAlliance () {
    if (auto_gf_SetAlliance_Trigger == null) {
        auto_gf_SetAlliance_Trigger = TriggerCreate("auto_gf_SetAlliance_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetAlliance_Trigger, false, false);
}

bool auto_gf_SetAlliance_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA43E557F_g;
    int autoA43E557F_var;
    playergroup auto3245329C_g;
    int auto3245329C_var;

    // Implementation
    libNtve_gf_SetPlayerGroupAlliance(gv_team1_playerGroup.lv_players, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAllianceAspectForPlayerGroup(gv_team1_playerGroup.lv_players, c_allianceIdPower, true);
    libNtve_gf_SetAllianceAspectForPlayerGroup(gv_team1_playerGroup.lv_players, c_allianceIdSpend, true);
    autoA43E557F_g = gv_team1_playerGroup.lv_users;
    autoA43E557F_var = -1;
    while (true) {
        autoA43E557F_var = PlayerGroupNextPlayer(autoA43E557F_g, autoA43E557F_var);
        if (autoA43E557F_var < 0) { break; }
        PlayerSetAlliance(13, c_allianceIdControl, autoA43E557F_var, true);
    }
    libNtve_gf_SetPlayerGroupAlliance(gv_team2_playerGroup.lv_players, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAllianceAspectForPlayerGroup(gv_team2_playerGroup.lv_players, c_allianceIdPower, true);
    libNtve_gf_SetAllianceAspectForPlayerGroup(gv_team2_playerGroup.lv_players, c_allianceIdSpend, true);
    auto3245329C_g = gv_team2_playerGroup.lv_users;
    auto3245329C_var = -1;
    while (true) {
        auto3245329C_var = PlayerGroupNextPlayer(auto3245329C_g, auto3245329C_var);
        if (auto3245329C_var < 0) { break; }
        PlayerSetAlliance(14, c_allianceIdControl, auto3245329C_var, true);
    }
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_team1_playerGroup.lv_players, gv_team2_playerGroup.lv_players, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_team2_playerGroup.lv_players, gv_team1_playerGroup.lv_players, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(13, 15, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Enemy);
    return true;
}

trigger auto_gf_SetSupplyLimit_Trigger = null;

void gf_SetSupplyLimit () {
    if (auto_gf_SetSupplyLimit_Trigger == null) {
        auto_gf_SetSupplyLimit_Trigger = TriggerCreate("auto_gf_SetSupplyLimit_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetSupplyLimit_Trigger, false, false);
}

bool auto_gf_SetSupplyLimit_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__supplyLimit;

    // Automatic Variable Declarations
    string auto0D9D2283_val;
    playergroup auto2F5433F5_g;
    int auto2F5433F5_var;

    // Variable Initialization

    // Implementation
    auto0D9D2283_val = GameAttributeGameValue("[bnet:NF1B_SCEvoMulti/0.0/236353,file:Mods\\NF1B_SCEvoComplete\\NF1B_SCEvoMulti.SC2Mod]3");
    if (auto0D9D2283_val == "0001") {
        lv__supplyLimit = 200;
    }
    else if (auto0D9D2283_val == "0002") {
        lv__supplyLimit = 250;
    }
    else if (auto0D9D2283_val == "0003") {
        lv__supplyLimit = 300;
    }
    else if (auto0D9D2283_val == "0004") {
        lv__supplyLimit = 350;
    }
    else if (auto0D9D2283_val == "0005") {
        lv__supplyLimit = 400;
    }
    else {
        lv__supplyLimit = 300;
    }
    auto2F5433F5_g = PlayerGroupAll();
    auto2F5433F5_var = -1;
    while (true) {
        auto2F5433F5_var = PlayerGroupNextPlayer(auto2F5433F5_g, auto2F5433F5_var);
        if (auto2F5433F5_var < 0) { break; }
        PlayerModifyPropertyInt(auto2F5433F5_var, c_playerPropSuppliesLimit, c_playerPropOperSetTo, lv__supplyLimit);
    }
    return true;
}

bool gf_IsButtonPlayerType (int lp_button) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_button == gv_buttonPlayer1) || (lp_button == gv_buttonPlayer2) || (lp_button == gv_buttonPlayer3) || (lp_button == gv_buttonPlayer4) || (lp_button == gv_buttonPlayer5) || (lp_button == gv_buttonPlayer6) || (lp_button == gv_buttonPlayer7) || (lp_button == gv_buttonPlayer8) || (lp_button == gv_buttonPlayer9) || (lp_button == gv_buttonPlayer10) || (lp_button == gv_buttonPlayer11) || (lp_button == gv_buttonPlayer12))) {
        return true;
    }
    else {
        return false;
    }
}

trigger auto_gf_SetButtonPlayer_Trigger = null;
int auto_gf_SetButtonPlayer_lp_length;

void gf_SetButtonPlayer (int lp_length) {
    auto_gf_SetButtonPlayer_lp_length = lp_length;

    if (auto_gf_SetButtonPlayer_Trigger == null) {
        auto_gf_SetButtonPlayer_Trigger = TriggerCreate("auto_gf_SetButtonPlayer_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetButtonPlayer_Trigger, false, false);
}

bool auto_gf_SetButtonPlayer_TriggerFunc (bool testConds, bool runActions) {
    int lp_length = auto_gf_SetButtonPlayer_lp_length;

    // Variable Declarations
    int lv__height;
    int lv__xID1;
    int lv__xButton1;
    int lv__xID2;
    int lv__xButton2;
    int lv__i;

    // Automatic Variable Declarations
    playergroup autoAA8EB649_g;
    int autoAA8EB649_var;
    playergroup auto20762A18_g;
    int auto20762A18_var;

    // Variable Initialization
    lv__height = 90;
    lv__xID1 = 50;
    lv__xButton1 = 80;
    lv__xID2 = lp_length;

    // Implementation
    lv__xID2 /= 2;
    lv__xID2 += 30;
    lv__xButton2 = lv__xID2;
    lv__xButton2 += 30;
    gf_SetRaceIcon(lv__xButton1, 35, lv__xButton2, 35);
    libNtve_gf_CreateDialogItemLabel(gv_controlPanel, 200, 50, c_anchorTopLeft, 140, 40, gv_textTeam1, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_controlPanel, 200, 50, c_anchorTopLeft, (lv__xButton2 + 60), 40, gv_textTeam2, ColorWithAlpha(0,0,0,0), false, 2.0);
    autoAA8EB649_g = gv_team1_playerGroup.lv_users;
    autoAA8EB649_var = -1;
    while (true) {
        autoAA8EB649_var = PlayerGroupNextPlayer(autoAA8EB649_g, autoAA8EB649_var);
        if (autoAA8EB649_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(gv_controlPanel, 200, 50, c_anchorTopLeft, lv__xID1, lv__height, IntToText(autoAA8EB649_var), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Arcade_Premium_Title", PlayerGroupAll());
        libNtve_gf_CreateDialogItemButton(gv_controlPanel, 300, 50, c_anchorTopLeft, lv__xButton1, lv__height, gv_textSetToBuilder, PlayerName(autoAA8EB649_var), "");
        gf_BindButton(autoAA8EB649_var);
        lv__height += 50;
        lv__i += 1;
    }
    lv__height = 90;
    lv__i = 0;
    auto20762A18_g = gv_team2_playerGroup.lv_users;
    auto20762A18_var = -1;
    while (true) {
        auto20762A18_var = PlayerGroupNextPlayer(auto20762A18_g, auto20762A18_var);
        if (auto20762A18_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(gv_controlPanel, 200, 50, c_anchorTopLeft, lv__xID2, lv__height, IntToText(auto20762A18_var), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Arcade_Premium_Title", PlayerGroupAll());
        libNtve_gf_CreateDialogItemButton(gv_controlPanel, 300, 50, c_anchorTopLeft, lv__xButton2, lv__height, gv_textSetToBuilder, PlayerName(auto20762A18_var), "");
        gf_BindButton(auto20762A18_var);
        lv__height += 50;
        lv__i += 1;
    }
    return true;
}

void gf_ClickButtonPlayer (int lp_oldBuilder, int lp_newBuilder) {
    // Variable Declarations
    int lv__team;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv__team = gf_GetTeamOfPlayer(lp_newBuilder);
    if ((gf_ErrorIsBuilder(lp_oldBuilder) == false)) {
        return ;
    }
    else if (((gf_GetTeamOfPlayer(lp_oldBuilder) != lv__team) || (lp_oldBuilder == lp_newBuilder))) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(lp_oldBuilder), gv_textValidFighter, SoundLink("UI_GenericError", -1));
        return ;
    }
    gf_ChangeBuilder(lp_oldBuilder, lp_newBuilder, lv__team);
}

void gf_UpdateButtonPlayer (int lp_oldBuilder, int lp_newBuilder) {
    // Variable Declarations
    int lv__oldDialogItem;
    int lv__newDialogItem;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__oldDialogItem = c_invalidDialogControlId;
    lv__newDialogItem = c_invalidDialogControlId;

    // Implementation
    lv__oldDialogItem = gv_playerProperty[lp_oldBuilder].lv_button;
    lv__newDialogItem = gv_playerProperty[lp_newBuilder].lv_button;
    DialogControlFadeTransparency(lv__oldDialogItem, PlayerGroupAll(), 0.0, 0.0);
    DialogControlFadeTransparency(lv__newDialogItem, PlayerGroupAll(), 0.0, 50.0);
}

void gf_BindButton (int lp_player) {
    // Automatic Variable Declarations
    int autoB71CC923_val;

    // Implementation
    autoB71CC923_val = lp_player;
    if (autoB71CC923_val == 1) {
        gv_buttonPlayer1 = DialogControlLastCreated();
        gv_playerProperty[lp_player].lv_button = gv_buttonPlayer1;
    }
    else if (autoB71CC923_val == 2) {
        gv_buttonPlayer2 = DialogControlLastCreated();
        gv_playerProperty[lp_player].lv_button = gv_buttonPlayer2;
    }
    else if (autoB71CC923_val == 3) {
        gv_buttonPlayer3 = DialogControlLastCreated();
        gv_playerProperty[lp_player].lv_button = gv_buttonPlayer3;
    }
    else if (autoB71CC923_val == 4) {
        gv_buttonPlayer4 = DialogControlLastCreated();
        gv_playerProperty[lp_player].lv_button = gv_buttonPlayer4;
    }
    else if (autoB71CC923_val == 5) {
        gv_buttonPlayer5 = DialogControlLastCreated();
        gv_playerProperty[lp_player].lv_button = gv_buttonPlayer5;
    }
    else if (autoB71CC923_val == 6) {
        gv_buttonPlayer6 = DialogControlLastCreated();
        gv_playerProperty[lp_player].lv_button = gv_buttonPlayer6;
    }
    else if (autoB71CC923_val == 7) {
        gv_buttonPlayer7 = DialogControlLastCreated();
        gv_playerProperty[lp_player].lv_button = gv_buttonPlayer7;
    }
    else if (autoB71CC923_val == 8) {
        gv_buttonPlayer8 = DialogControlLastCreated();
        gv_playerProperty[lp_player].lv_button = gv_buttonPlayer8;
    }
    else if (autoB71CC923_val == 9) {
        gv_buttonPlayer9 = DialogControlLastCreated();
        gv_playerProperty[lp_player].lv_button = gv_buttonPlayer9;
    }
    else if (autoB71CC923_val == 10) {
        gv_buttonPlayer10 = DialogControlLastCreated();
        gv_playerProperty[lp_player].lv_button = gv_buttonPlayer10;
    }
    else if (autoB71CC923_val == 11) {
        gv_buttonPlayer11 = DialogControlLastCreated();
        gv_playerProperty[lp_player].lv_button = gv_buttonPlayer11;
    }
    else if (autoB71CC923_val == 12) {
        gv_buttonPlayer12 = DialogControlLastCreated();
        gv_playerProperty[lp_player].lv_button = gv_buttonPlayer12;
    }
    else {
        gv_buttonPlayer1 = DialogControlLastCreated();
        gv_playerProperty[lp_player].lv_button = gv_buttonPlayer1;
    }
    if ((gf_GetRoleOfPlayer(lp_player) == ge_Role_Builder)) {
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    }

}

void gf_SetRaceIcon (int lp_x1, int lp_y1, int lp_x2, int lp_y2) {
    // Variable Declarations
    string lv__image;

    // Automatic Variable Declarations
    string auto740F3584_val;
    string autoEBCB5EA1_val;

    // Variable Initialization

    // Implementation
    auto740F3584_val = gv_team1_teamInfo.lv_race;
    if (auto740F3584_val == "Terr") {
        lv__image = "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_terran.dds";
    }
    else if (auto740F3584_val == "Zerg") {
        lv__image = "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_zerg.dds";
    }
    else if (auto740F3584_val == "Prot") {
        lv__image = "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_protoss.dds";
    }
    else if (auto740F3584_val == "BWTe") {
        lv__image = "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWterran.dds";
    }
    else if (auto740F3584_val == "BWZe") {
        lv__image = "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWzerg.dds";
    }
    else if (auto740F3584_val == "BWPr") {
        lv__image = "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWprotoss.dds";
    }
    else {
    }
    libNtve_gf_CreateDialogItemImage(gv_controlPanel, 48, 52, c_anchorTopLeft, lp_x1, lp_y1, StringToText(""), lv__image, c_triggerImageTypeNormal, true, gv_team1_teamInfo.lv_color, c_triggerBlendModeNormal);
    gv_team1_raceIcon = DialogControlLastCreated();
    autoEBCB5EA1_val = gv_team2_teamInfo.lv_race;
    if (autoEBCB5EA1_val == "Terr") {
        lv__image = "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_terran.dds";
    }
    else if (autoEBCB5EA1_val == "Zerg") {
        lv__image = "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_zerg.dds";
    }
    else if (autoEBCB5EA1_val == "Prot") {
        lv__image = "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_protoss.dds";
    }
    else if (autoEBCB5EA1_val == "BWTe") {
        lv__image = "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWterran.dds";
    }
    else if (autoEBCB5EA1_val == "BWZe") {
        lv__image = "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWzerg.dds";
    }
    else if (autoEBCB5EA1_val == "BWPr") {
        lv__image = "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWprotoss.dds";
    }
    else {
    }
    libNtve_gf_CreateDialogItemImage(gv_controlPanel, 48, 52, c_anchorTopLeft, lp_x2, lp_y2, StringToText(""), lv__image, c_triggerImageTypeNormal, true, gv_team2_teamInfo.lv_color, c_triggerBlendModeNormal);
    gv_team2_raceIcon = DialogControlLastCreated();
}

void gf_UpdateRaceIcon (int lp_team, string lp_race) {
    // Variable Declarations
    string lv__image;

    // Automatic Variable Declarations
    string auto960B1BDE_val;
    int auto3140ACDB_val;

    // Variable Initialization

    // Implementation
    auto960B1BDE_val = lp_race;
    if (auto960B1BDE_val == "Terr") {
        lv__image = "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_terran.dds";
    }
    else if (auto960B1BDE_val == "Zerg") {
        lv__image = "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_zerg.dds";
    }
    else if (auto960B1BDE_val == "Prot") {
        lv__image = "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_protoss.dds";
    }
    else if (auto960B1BDE_val == "BWTe") {
        lv__image = "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWterran.dds";
    }
    else if (auto960B1BDE_val == "BWZe") {
        lv__image = "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWzerg.dds";
    }
    else if (auto960B1BDE_val == "BWPr") {
        lv__image = "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWprotoss.dds";
    }
    else {
    }
    auto3140ACDB_val = lp_team;
    if (auto3140ACDB_val == 1) {
        libNtve_gf_SetDialogItemImage(gv_team1_raceIcon, lv__image, PlayerGroupAll());
    }
    else if (auto3140ACDB_val == 2) {
        libNtve_gf_SetDialogItemImage(gv_team2_raceIcon, lv__image, PlayerGroupAll());
    }
    else {
    }
}

bool gf_IsButtonMorphType (int lp_button) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_button == gv_buttonMorphTeam1[0]) || (lp_button == gv_buttonMorphTeam1[1]) || (lp_button == gv_buttonMorphTeam2[0]) || (lp_button == gv_buttonMorphTeam2[1]))) {
        return true;
    }
    else {
        return false;
    }
}

void gf_SetButtonMorph () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemLabel(gv_controlPanel, 400, 50, c_anchorTopLeft, 80, 415, gv_textMorph, ColorWithAlpha(0,0,0,0), false, 2.0);
    gf_SetButtonMorphForTeam(1);
    gf_SetButtonMorphForTeam(2);
}

void gf_SetButtonMorphForTeam (int lp_team) {
    // Variable Declarations
    int lv__xButton;
    int lv__yButton;

    // Automatic Variable Declarations
    int auto57795688_val;

    // Variable Initialization
    lv__xButton = 460;
    lv__yButton = 400;

    // Implementation
    auto57795688_val = lp_team;
    if (auto57795688_val == 1) {
        libNtve_gf_CreateDialogItemButton(gv_controlPanel, 125, 50, c_anchorTopLeft, lv__xButton, lv__yButton, StringToText(""), gv_textOn, "");
        gv_buttonMorphTeam1[0] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_controlPanel, 125, 50, c_anchorTopLeft, (lv__xButton + 125), lv__yButton, StringToText(""), gv_textOff, "");
        gv_buttonMorphTeam1[1] = DialogControlLastCreated();
        DialogControlFadeTransparency(gv_buttonMorphTeam1[1], PlayerGroupAll(), 0.0, 50.0);
        DialogControlSetVisible(gv_buttonMorphTeam1[0], gv_team2_playerGroup.lv_users, false);
        DialogControlSetVisible(gv_buttonMorphTeam1[1], gv_team2_playerGroup.lv_users, false);
    }
    else if (auto57795688_val == 2) {
        libNtve_gf_CreateDialogItemButton(gv_controlPanel, 125, 50, c_anchorTopLeft, lv__xButton, lv__yButton, StringToText(""), gv_textOn, "");
        gv_buttonMorphTeam2[0] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_controlPanel, 125, 50, c_anchorTopLeft, (lv__xButton + 125), lv__yButton, StringToText(""), gv_textOff, "");
        gv_buttonMorphTeam2[1] = DialogControlLastCreated();
        DialogControlFadeTransparency(gv_buttonMorphTeam2[1], PlayerGroupAll(), 0.0, 50.0);
        DialogControlSetVisible(gv_buttonMorphTeam2[0], gv_team1_playerGroup.lv_users, false);
        DialogControlSetVisible(gv_buttonMorphTeam2[1], gv_team1_playerGroup.lv_users, false);
    }
    else {
    }
}

void gf_ClickButtonMorph (int lp_button, int lp_team) {
    // Variable Declarations
    int lv__fighter;

    // Automatic Variable Declarations
    playergroup auto846000EB_g;
    playergroup auto9B884340_g;
    playergroup autoEEA75B98_g;
    playergroup auto68172231_g;

    // Variable Initialization

    // Implementation
    if ((lp_button == gv_buttonMorphTeam1[0]) && (lp_team == 1)) {
        auto846000EB_g = gv_team1_playerGroup.lv_fightersWithNeutral;
        lv__fighter = -1;
        while (true) {
            lv__fighter = PlayerGroupNextPlayer(auto846000EB_g, lv__fighter);
            if (lv__fighter < 0) { break; }
            gf_AllowZergMorph(lv__fighter);
        }
        gv_team1_teamMode.lv_morphEnabled = true;
        UIDisplayMessage(gv_team1_playerGroup.lv_users, c_messageAreaSubtitle, gv_textMorphOn);
    }
    else if ((lp_button == gv_buttonMorphTeam1[1]) && (lp_team == 1)) {
        auto9B884340_g = gv_team1_playerGroup.lv_fightersWithNeutral;
        lv__fighter = -1;
        while (true) {
            lv__fighter = PlayerGroupNextPlayer(auto9B884340_g, lv__fighter);
            if (lv__fighter < 0) { break; }
            gf_DisallowZergMorph(lv__fighter);
        }
        gv_team1_teamMode.lv_morphEnabled = false;
        UIDisplayMessage(gv_team1_playerGroup.lv_users, c_messageAreaSubtitle, gv_textMorphOff);
    }
    else if ((lp_button == gv_buttonMorphTeam2[0]) && (lp_team == 2)) {
        autoEEA75B98_g = gv_team2_playerGroup.lv_fightersWithNeutral;
        lv__fighter = -1;
        while (true) {
            lv__fighter = PlayerGroupNextPlayer(autoEEA75B98_g, lv__fighter);
            if (lv__fighter < 0) { break; }
            gf_AllowZergMorph(lv__fighter);
        }
        gv_team2_teamMode.lv_morphEnabled = true;
        UIDisplayMessage(gv_team2_playerGroup.lv_users, c_messageAreaSubtitle, gv_textMorphOn);
    }
    else if ((lp_button == gv_buttonMorphTeam2[1]) && (lp_team == 2)) {
        auto68172231_g = gv_team2_playerGroup.lv_fightersWithNeutral;
        lv__fighter = -1;
        while (true) {
            lv__fighter = PlayerGroupNextPlayer(auto68172231_g, lv__fighter);
            if (lv__fighter < 0) { break; }
            gf_DisallowZergMorph(lv__fighter);
        }
        gv_team2_teamMode.lv_morphEnabled = false;
        UIDisplayMessage(gv_team2_playerGroup.lv_users, c_messageAreaSubtitle, gv_textMorphOff);
    }
    gf_UpdateButtonMorphForTeam(lp_team);
}

void gf_UpdateButtonMorphForTeam (int lp_team) {
    // Automatic Variable Declarations
    int auto5919097E_val;

    // Implementation
    auto5919097E_val = lp_team;
    if (auto5919097E_val == 1) {
        if ((gv_team1_teamMode.lv_morphEnabled == true)) {
            DialogControlFadeTransparency(gv_buttonMorphTeam1[0], PlayerGroupAll(), 0.0, 50.0);
            DialogControlFadeTransparency(gv_buttonMorphTeam1[1], PlayerGroupAll(), 0.0, 0.0);
        }
        else {
            DialogControlFadeTransparency(gv_buttonMorphTeam1[0], PlayerGroupAll(), 0.0, 0.0);
            DialogControlFadeTransparency(gv_buttonMorphTeam1[1], PlayerGroupAll(), 0.0, 50.0);
        }
    }
    else if (auto5919097E_val == 2) {
        if ((gv_team2_teamMode.lv_morphEnabled == true)) {
            DialogControlFadeTransparency(gv_buttonMorphTeam2[0], PlayerGroupAll(), 0.0, 50.0);
            DialogControlFadeTransparency(gv_buttonMorphTeam2[1], PlayerGroupAll(), 0.0, 0.0);
        }
        else {
            DialogControlFadeTransparency(gv_buttonMorphTeam2[0], PlayerGroupAll(), 0.0, 0.0);
            DialogControlFadeTransparency(gv_buttonMorphTeam2[1], PlayerGroupAll(), 0.0, 50.0);
        }
    }
    else {
    }
}

bool gf_ClickButtonRace (int lp_player, int lp_button) {
    // Variable Declarations
    int lv__team;
    string lv__oldRace;
    string lv__newRace;
    unit lv__unit;
    point lv__startLocation;
    int lv__player;

    // Automatic Variable Declarations
    int auto44A7C032_val;
    int auto1450D695_val;
    int auto691D6925_val;
    unitgroup auto30BC15FD_g;
    int auto30BC15FD_u;
    playergroup auto0185DA65_g;
    playergroup autoCAC5C6BA_g;

    // Variable Initialization

    // Implementation
    if ((gf_GetRoleOfPlayer(lp_player) != ge_Role_Builder)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(lp_player), gv_textBuilderPermission, SoundLink("UI_GenericError", -1));
        return false;
    }
    else if ((TimerGetElapsed(gv_timer) >= 12.0)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(lp_player), gv_textOverRaceTime, SoundLink("UI_GenericError", -1));
        return false;
    }
    else if ((gv_changeRaceEnabled == false)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(lp_player), gv_textCanNotChangeRace, SoundLink("UI_GenericError", -1));
        return false;
    }
    lv__team = gf_GetTeamOfPlayer(lp_player);
    auto44A7C032_val = lv__team;
    if (auto44A7C032_val == 1) {
        lv__oldRace = gv_team1_teamInfo.lv_race;
        auto1450D695_val = lp_button;
        if (auto1450D695_val == gv_buttonRaceTeam1[0]) {
            lv__newRace = "BWTe";
        }
        else if (auto1450D695_val == gv_buttonRaceTeam1[1]) {
            lv__newRace = "BWZe";
        }
        else if (auto1450D695_val == gv_buttonRaceTeam1[2]) {
            lv__newRace = "BWPr";
        }
        else if (auto1450D695_val == gv_buttonRaceTeam1[3]) {
            lv__newRace = "Terr";
        }
        else if (auto1450D695_val == gv_buttonRaceTeam1[4]) {
            lv__newRace = "Zerg";
        }
        else if (auto1450D695_val == gv_buttonRaceTeam1[5]) {
            lv__newRace = "Prot";
        }
        else {
        }
    }
    else if (auto44A7C032_val == 2) {
        lv__oldRace = gv_team2_teamInfo.lv_race;
        auto691D6925_val = lp_button;
        if (auto691D6925_val == gv_buttonRaceTeam2[0]) {
            lv__newRace = "BWTe";
        }
        else if (auto691D6925_val == gv_buttonRaceTeam2[1]) {
            lv__newRace = "BWZe";
        }
        else if (auto691D6925_val == gv_buttonRaceTeam2[2]) {
            lv__newRace = "BWPr";
        }
        else if (auto691D6925_val == gv_buttonRaceTeam2[3]) {
            lv__newRace = "Terr";
        }
        else if (auto691D6925_val == gv_buttonRaceTeam2[4]) {
            lv__newRace = "Zerg";
        }
        else if (auto691D6925_val == gv_buttonRaceTeam2[5]) {
            lv__newRace = "Prot";
        }
        else {
        }
    }
    else {
    }
    if ((lv__oldRace == lv__newRace)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(lp_player), gv_textMustDiffRace, SoundLink("UI_GenericError", -1));
        return false;
    }
    else {
        gv_changeRaceEnabled = false;
        lv__startLocation = gf_GetStartLocationOfTeam(lv__team);
        auto30BC15FD_g = UnitGroup(null, lp_player, RegionPlayableMap(), UnitFilter(0, 0, 0, 0), 0);
        auto30BC15FD_u = UnitGroupCount(auto30BC15FD_g, c_unitCountAll);
        for (;; auto30BC15FD_u -= 1) {
            lv__unit = UnitGroupUnitFromEnd(auto30BC15FD_g, auto30BC15FD_u);
            if (lv__unit == null) { break; }
            UnitRemove(lv__unit);
        }
        if (((lv__oldRace == "Zerg") || (lv__oldRace == "BWZe")) && (lv__newRace != "Zerg") && (lv__newRace != "BWZe")) {
            CreepModify(lv__startLocation, 14.0, false, false);
        }
        else if ((lv__oldRace != "Zerg") && (lv__oldRace != "BWZe") && ((lv__newRace == "Zerg") || (lv__newRace == "BWZe"))) {
            CreepModify(lv__startLocation, 13.0, true, false);
        }
        MeleeInitUnitsForPlayer(lp_player, lv__newRace, lv__startLocation);
        if ((lv__team == 1)) {
            gv_team1_teamInfo.lv_race = lv__newRace;
            autoCAC5C6BA_g = gv_team1_playerGroup.lv_players;
            lv__player = -1;
            while (true) {
                lv__player = PlayerGroupNextPlayer(autoCAC5C6BA_g, lv__player);
                if (lv__player < 0) { break; }
                PlayerSetRace(lv__player, lv__newRace);
            }
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, gv_textWarningRaceTeam1);
        }
        else {
            CreepModify(gv_team2_teamInfo.lv_startLocation, 14.0, false, false);
            gv_team2_teamInfo.lv_race = lv__newRace;
            auto0185DA65_g = gv_team2_playerGroup.lv_players;
            lv__player = -1;
            while (true) {
                lv__player = PlayerGroupNextPlayer(auto0185DA65_g, lv__player);
                if (lv__player < 0) { break; }
                PlayerSetRace(lv__player, lv__newRace);
            }
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, gv_textWarningRaceTeam2);
        }
        gf_UpdateRaceIcon(lv__team, lv__newRace);
        gf_UpdateButtonRace(lv__oldRace, lv__newRace, lv__team);
        return true;
    }
}

int gf_GetIndexOfRace (string lp_race) {
    // Automatic Variable Declarations
    string autoE8BB2CCC_val;

    // Implementation
    autoE8BB2CCC_val = lp_race;
    if (autoE8BB2CCC_val == "BWTe") {
        return 0;
    }
    else if (autoE8BB2CCC_val == "BWZe") {
        return 1;
    }
    else if (autoE8BB2CCC_val == "BWPr") {
        return 2;
    }
    else if (autoE8BB2CCC_val == "Terr") {
        return 3;
    }
    else if (autoE8BB2CCC_val == "Zerg") {
        return 4;
    }
    else if (autoE8BB2CCC_val == "Prot") {
        return 5;
    }
    else {
        return -1;
    }
}

void gf_SetButtonRace () {
    // Variable Declarations
    int lv__xButton;
    int lv__yButton;
    int lv__i;

    // Automatic Variable Declarations
    const int autoA1586CBC_ae = 5;
    const int autoA1586CBC_ai = 1;
    const int autoCDA7A5FB_ae = 5;
    const int autoCDA7A5FB_ai = 1;

    // Variable Initialization
    lv__xButton = 80;
    lv__yButton = 500;

    // Implementation
    libNtve_gf_CreateDialogItemLabel(gv_controlPanel, 200, 50, c_anchorTopLeft, 80, (lv__yButton - 35), gv_textChangeRace, ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_textButtonRace[0] = gv_textBWTe;
    gv_textButtonRace[1] = gv_textBWZe;
    gv_textButtonRace[2] = gv_textBWPr;
    gv_textButtonRace[3] = gv_textTerr;
    gv_textButtonRace[4] = gv_textZerg;
    gv_textButtonRace[5] = gv_textProt;
    gv_raceMap[0] = "BWTe";
    gv_raceMap[1] = "BWZe";
    gv_raceMap[2] = "BWPr";
    gv_raceMap[3] = "Terr";
    gv_raceMap[4] = "Zerg";
    gv_raceMap[5] = "Prot";
    lv__i = 0;
    for ( ; ( (autoA1586CBC_ai >= 0 && lv__i <= autoA1586CBC_ae) || (autoA1586CBC_ai < 0 && lv__i >= autoA1586CBC_ae) ) ; lv__i += autoA1586CBC_ai ) {
        libNtve_gf_CreateDialogItemButton(gv_controlPanel, 100, 50, c_anchorTopLeft, lv__xButton, lv__yButton, StringToText(""), gv_textButtonRace[lv__i], "");
        gv_buttonRaceTeam1[lv__i] = DialogControlLastCreated();
        DialogControlSetVisible(gv_buttonRaceTeam1[lv__i], gv_team2_playerGroup.lv_users, false);
        if ((gv_team1_teamInfo.lv_race == gv_raceMap[lv__i])) {
            DialogControlFadeTransparency(gv_buttonRaceTeam1[lv__i], gv_team1_playerGroup.lv_users, 0.0, 50.0);
        }

        lv__xButton += 100;
    }
    lv__xButton = 50;
    lv__i = 0;
    for ( ; ( (autoCDA7A5FB_ai >= 0 && lv__i <= autoCDA7A5FB_ae) || (autoCDA7A5FB_ai < 0 && lv__i >= autoCDA7A5FB_ae) ) ; lv__i += autoCDA7A5FB_ai ) {
        libNtve_gf_CreateDialogItemButton(gv_controlPanel, 100, 50, c_anchorTopLeft, lv__xButton, lv__yButton, StringToText(""), gv_textButtonRace[lv__i], "");
        gv_buttonRaceTeam2[lv__i] = DialogControlLastCreated();
        DialogControlSetVisible(gv_buttonRaceTeam2[lv__i], gv_team1_playerGroup.lv_users, false);
        if ((gv_team2_teamInfo.lv_race == gv_raceMap[lv__i])) {
            DialogControlFadeTransparency(gv_buttonRaceTeam2[lv__i], gv_team2_playerGroup.lv_users, 0.0, 50.0);
        }

        lv__xButton += 100;
    }
}

void gf_UpdateButtonRace (string lp_oldRace, string lp_newRace, int lp_team) {
    // Variable Declarations
    string lv__race;
    int lv__indexOld;
    int lv__indexNew;

    // Automatic Variable Declarations
    int auto80189B34_val;

    // Variable Initialization

    // Implementation
    lv__indexOld = gf_GetIndexOfRace(lp_oldRace);
    lv__indexNew = gf_GetIndexOfRace(lp_newRace);
    auto80189B34_val = lp_team;
    if (auto80189B34_val == 1) {
        DialogControlFadeTransparency(gv_buttonRaceTeam1[lv__indexOld], gv_team1_playerGroup.lv_users, 0.0, 0.0);
        DialogControlFadeTransparency(gv_buttonRaceTeam1[lv__indexNew], gv_team1_playerGroup.lv_users, 0.0, 50.0);
    }
    else if (auto80189B34_val == 2) {
        DialogControlFadeTransparency(gv_buttonRaceTeam2[lv__indexOld], gv_team2_playerGroup.lv_users, 0.0, 0.0);
        DialogControlFadeTransparency(gv_buttonRaceTeam2[lv__indexNew], gv_team2_playerGroup.lv_users, 0.0, 50.0);
    }
    else {
    }
}

bool gf_ErrorIsBuilder (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_GetRoleOfPlayer(lp_player) == ge_Role_Builder)) {
        return true;
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(lp_player), gv_textBuilderPermission, SoundLink("UI_GenericError", -1));
        return false;
    }
}

void gf_SetUserPanel () {
    // Variable Declarations
    int lv__length;
    int lv__width;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__length = 800;
    lv__width = 600;

    // Implementation
    DialogCreate(lv__length, lv__width, c_anchorTopRight, 60, 45, true);
    gv_controlPanel = DialogLastCreated();
    gf_SetButtonUserPanel();
    gf_SetButtonPlayer(lv__length);
    gf_SetButtonMorph();
    gf_SetButtonRace();
}

void gf_SetButtonUserPanel () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(60, 60, c_anchorTopRight, 0, 45, true);
    gv_dButtonControlPanel = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 60, c_anchorTopRight, 0, 0, gv_textButtonControlPanel, StringToText(""), "");
    gv_buttonControlPanel = DialogControlLastCreated();
    DialogControlSetVisible(gv_buttonControlPanel, PlayerGroupAll(), true);
}

void gf_ClickButtonUserPanel () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_buttonUserPanelClicked == false)) {
        DialogSetVisible(gv_controlPanel, PlayerGroupAll(), true);
        DialogControlFadeTransparency(gv_buttonControlPanel, PlayerGroupAll(), 0.0, 50.0);
        gv_buttonUserPanelClicked = true;
    }
    else {
        DialogSetVisible(gv_controlPanel, PlayerGroupAll(), false);
        DialogControlFadeTransparency(gv_buttonControlPanel, PlayerGroupAll(), 0.0, 0.0);
        gv_buttonUserPanelClicked = false;
    }
}

void gf_TipSameRace () {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2266D75E"));
}

void gf_ChangeBuilder (int lp_oldBuilder, int lp_newBuilder, int lp_team) {
    // Automatic Variable Declarations
    int auto05EF88FD_val;

    // Implementation
    gf_UpdateButtonPlayer(lp_oldBuilder, lp_newBuilder);
    gf_UpdateRole(lp_team, lp_oldBuilder, lp_newBuilder);
    gf_UpdateMorphForChangeBuilder(lp_oldBuilder, lp_newBuilder);
    gf_AllowZergMorph(lp_newBuilder);
    gf_DisallowZergMorph(lp_oldBuilder);
    gf_UpdateFighterMode(lp_team);
    gf_OwnershipForChangeBuilder(lp_oldBuilder, lp_newBuilder);
    gf_MaintainSupplyUnchanged(lp_oldBuilder, lp_newBuilder);
    gf_UpdateResource(lp_team, lp_oldBuilder, lp_newBuilder);
    auto05EF88FD_val = lp_team;
    if (auto05EF88FD_val == 1) {
        UIDisplayMessage(gv_team1_playerGroup.lv_users, c_messageAreaSubtitle, gv_textChangeBuilder);
    }
    else if (auto05EF88FD_val == 2) {
        UIDisplayMessage(gv_team2_playerGroup.lv_users, c_messageAreaSubtitle, gv_textChangeBuilder);
    }
    else {
    }
    UIDisplayMessage(PlayerGroupSingle(lp_newBuilder), c_messageAreaSubtitle, gv_textNewBuilder);
}

void gf_OwnershipForChangeBuilder (int lp_oldBuilder, int lp_newBuilder) {
    // Variable Declarations
    int lv__team;
    order lv__order;
    unit lv__unit;
    unitgroup lv__workerGroup;
    unitgroup lv__otherGroup;
    int lv__ownerForRelease;
    int lv__colorForRelease;
    int lv__playerForOrder;

    // Automatic Variable Declarations
    unitgroup auto8D0E9D38_g;
    int auto8D0E9D38_u;
    unitgroup auto5CE33954_g;
    int auto5CE33954_u;
    unitgroup auto69821EDD_g;
    int auto69821EDD_u;
    unitgroup auto890FDEC2_g;
    int auto890FDEC2_u;

    // Variable Initialization
    lv__workerGroup = UnitGroupEmpty();
    lv__otherGroup = UnitGroupEmpty();

    // Implementation
    lv__team = gf_GetTeamOfPlayer(lp_newBuilder);
    if ((lv__team == 1)) {
        lv__ownerForRelease = gv_team1_teamMode.lv_ownerForRelease;
        lv__colorForRelease = gv_team1_teamMode.lv_colorForRelease;
    }
    else {
        lv__ownerForRelease = gv_team2_teamMode.lv_ownerForRelease;
        lv__colorForRelease = gv_team2_teamMode.lv_colorForRelease;
    }
    gf_CloseSupplyShareTrigger(lv__team);
    auto8D0E9D38_g = UnitGroup(null, lp_oldBuilder, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto8D0E9D38_u = UnitGroupCount(auto8D0E9D38_g, c_unitCountAll);
    for (;; auto8D0E9D38_u -= 1) {
        lv__unit = UnitGroupUnitFromEnd(auto8D0E9D38_g, auto8D0E9D38_u);
        if (lv__unit == null) { break; }
        if (gf_IsWorkerUnitType(lv__unit)) {
            UnitGroupAdd(lv__workerGroup, lv__unit);
        }
        else {
            UnitGroupAdd(lv__otherGroup, lv__unit);
        }
    }
    auto5CE33954_g = UnitGroup(null, lp_newBuilder, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto5CE33954_u = UnitGroupCount(auto5CE33954_g, c_unitCountAll);
    for (;; auto5CE33954_u -= 1) {
        lv__unit = UnitGroupUnitFromEnd(auto5CE33954_g, auto5CE33954_u);
        if (lv__unit == null) { break; }
        UnitSetOwner(lv__unit, lv__ownerForRelease, true);
        UnitSetTeamColorIndex(lv__unit, lv__colorForRelease);
    }
    auto69821EDD_g = lv__otherGroup;
    auto69821EDD_u = UnitGroupCount(auto69821EDD_g, c_unitCountAll);
    for (;; auto69821EDD_u -= 1) {
        lv__unit = UnitGroupUnitFromEnd(auto69821EDD_g, auto69821EDD_u);
        if (lv__unit == null) { break; }
        UnitSetOwner(lv__unit, lp_newBuilder, true);
    }
    auto890FDEC2_g = lv__workerGroup;
    auto890FDEC2_u = UnitGroupCount(auto890FDEC2_g, c_unitCountAll);
    for (;; auto890FDEC2_u -= 1) {
        lv__unit = UnitGroupUnitFromEnd(auto890FDEC2_g, auto890FDEC2_u);
        if (lv__unit == null) { break; }
        lv__order = UnitOrder(lv__unit, 0);
        UnitSetOwner(lv__unit, lp_newBuilder, true);
        if ((lv__order != null)) {
            lv__playerForOrder = OrderGetPlayer(lv__order);
            if (((lp_newBuilder == lv__playerForOrder) || (PlayerGetAlliance(lp_newBuilder, c_allianceIdControl, lv__playerForOrder) == true))) {
                if (gf_IsMainBaseUnitType(OrderGetTargetUnit(lv__order))) {
                    gf_ReturnCargo(lv__unit);
                }
                else {
                    UnitIssueOrder(lv__unit, lv__order, c_orderQueueReplace);
                }
            }
            else {
                PlayerSetAlliance(lp_newBuilder, c_allianceIdControl, lv__playerForOrder, true);
                PlayerSetAlliance(lp_newBuilder, c_allianceIdControl, lp_oldBuilder, true);
                if (gf_IsMainBaseUnitType(OrderGetTargetUnit(lv__order))) {
                    gf_ReturnCargo(lv__unit);
                }
                else {
                    UnitIssueOrder(lv__unit, lv__order, c_orderQueueReplace);
                }
                PlayerSetAlliance(lp_newBuilder, c_allianceIdControl, lv__playerForOrder, false);
                PlayerSetAlliance(lp_newBuilder, c_allianceIdControl, lp_oldBuilder, false);
            }
        }

    }
}

void gf_UpdateMorphForChangeBuilder (int lp_oldBuilder, int lp_newBuilder) {
    // Variable Declarations
    int lv__team;
    bool lv__morphEnabled;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv__team = gf_GetTeamOfPlayer(lp_newBuilder);
    lv__morphEnabled = gf_GetMorphEnabledOfTeam(lv__team);
    if ((lv__morphEnabled == false)) {
        gf_DisallowZergMorph(lp_oldBuilder);
        gf_AllowZergMorph(lp_newBuilder);
    }

}

void gf_UpdateRole (int lp_team, int lp_oldBuilder, int lp_newBuilder) {
    // Automatic Variable Declarations
    int auto4FBB1AC2_val;

    // Implementation
    auto4FBB1AC2_val = lp_team;
    if (auto4FBB1AC2_val == 1) {
        PlayerGroupAdd(gv_team1_teamInfo.lv_fighterGroup, lp_oldBuilder);
        PlayerGroupAdd(gv_team1_playerGroup.lv_fightersWithNeutral, lp_oldBuilder);
        gv_team1_teamInfo.lv_builder = lp_newBuilder;
        PlayerGroupRemove(gv_team1_teamInfo.lv_fighterGroup, lp_newBuilder);
        PlayerGroupRemove(gv_team1_playerGroup.lv_fightersWithNeutral, lp_newBuilder);
    }
    else if (auto4FBB1AC2_val == 2) {
        PlayerGroupAdd(gv_team2_teamInfo.lv_fighterGroup, lp_oldBuilder);
        PlayerGroupAdd(gv_team2_playerGroup.lv_fightersWithNeutral, lp_oldBuilder);
        gv_team2_teamInfo.lv_builder = lp_newBuilder;
        PlayerGroupRemove(gv_team2_teamInfo.lv_fighterGroup, lp_newBuilder);
        PlayerGroupRemove(gv_team2_playerGroup.lv_fightersWithNeutral, lp_newBuilder);
    }
    else {
    }
    gv_playerProperty[lp_oldBuilder].lv_role = ge_Role_Fighter;
    gv_playerProperty[lp_newBuilder].lv_role = ge_Role_Builder;
    gv_playerProperty[lp_newBuilder].lv_haveBeenBuilder = true;
}

void gf_TransferResource (int lp_team, int lp_player_1, int lp_player_2) {
    // Automatic Variable Declarations
    // Implementation
    gf_CloseResourceUpdateTrigger(lp_team);
    PlayerModifyPropertyFixed(lp_player_2, c_playerPropMinerals, c_playerPropOperSetTo, PlayerGetPropertyFixed(lp_player_1, c_playerPropMinerals));
    PlayerModifyPropertyFixed(lp_player_2, c_playerPropVespene, c_playerPropOperSetTo, PlayerGetPropertyFixed(lp_player_1, c_playerPropVespene));
    PlayerModifyPropertyFixed(lp_player_1, c_playerPropMinerals, c_playerPropOperSetTo, 0.0);
    PlayerModifyPropertyFixed(lp_player_1, c_playerPropVespene, c_playerPropOperSetTo, 0.0);
    gf_OpenResourceUpdateTrigger(lp_team);
}

void gf_UpdateResource (int lp_team, int lp_oldBuilder, int lp_newBuilder) {
    // Automatic Variable Declarations
    int auto47E72597_val;

    // Implementation
    gf_TransferResource(lp_team, lp_oldBuilder, lp_newBuilder);
    UISetResourceVisible(PlayerGroupSingle(lp_newBuilder), c_resourceTypeMinerals, true);
    UISetResourceVisible(PlayerGroupSingle(lp_newBuilder), c_resourceTypeVespene, true);
    UISetResourceVisible(PlayerGroupSingle(lp_oldBuilder), c_resourceTypeMinerals, false);
    UISetResourceVisible(PlayerGroupSingle(lp_oldBuilder), c_resourceTypeVespene, false);
    if ((gv_uiShowed == true)) {
        auto47E72597_val = lp_team;
        if (auto47E72597_val == 1) {
            DialogSetVisible(gv_team1_resourcePanel, PlayerGroupSingle(lp_oldBuilder), true);
            DialogSetVisible(gv_team1_resourcePanel, PlayerGroupSingle(lp_newBuilder), false);
        }
        else if (auto47E72597_val == 2) {
            DialogSetVisible(gv_team2_resourcePanel, PlayerGroupSingle(lp_oldBuilder), true);
            DialogSetVisible(gv_team2_resourcePanel, PlayerGroupSingle(lp_newBuilder), false);
        }
        else {
        }
    }

}

void gf_CloseResourceUpdateTrigger (int lp_team) {
    // Automatic Variable Declarations
    int autoE85027B3_val;

    // Implementation
    autoE85027B3_val = lp_team;
    if (autoE85027B3_val == 1) {
        TriggerEnable(gt_Team1_BuilderMineralUpdate, false);
        TriggerEnable(gt_Team1_BuilderVespeneUpdate, false);
        TriggerEnable(gt_Team1_FighterMineralUpdate, false);
        TriggerEnable(gt_Team1_FighterVespeneUpdate, false);
    }
    else if (autoE85027B3_val == 2) {
        TriggerEnable(gt_Team2_BuilderMineralUpdate, false);
        TriggerEnable(gt_Team2_BuilderVespeneUpdate, false);
        TriggerEnable(gt_Team2_FighterMineralUpdate, false);
        TriggerEnable(gt_Team2_FighterVespeneUpdate, false);
    }
    else {
    }
}

void gf_OpenResourceUpdateTrigger (int lp_team) {
    // Automatic Variable Declarations
    int autoFA4C0FAB_val;

    // Implementation
    autoFA4C0FAB_val = lp_team;
    if (autoFA4C0FAB_val == 1) {
        TriggerEnable(gt_Team1_BuilderMineralUpdate, true);
        TriggerEnable(gt_Team1_BuilderVespeneUpdate, true);
        TriggerEnable(gt_Team1_FighterMineralUpdate, true);
        TriggerEnable(gt_Team1_FighterVespeneUpdate, true);
    }
    else if (autoFA4C0FAB_val == 2) {
        TriggerEnable(gt_Team2_BuilderMineralUpdate, true);
        TriggerEnable(gt_Team2_BuilderVespeneUpdate, true);
        TriggerEnable(gt_Team2_FighterMineralUpdate, true);
        TriggerEnable(gt_Team2_FighterVespeneUpdate, true);
    }
    else {
    }
}

void gf_OpenSupplyShareTrigger (int lp_team) {
    // Automatic Variable Declarations
    int auto7384AA08_val;

    // Implementation
    auto7384AA08_val = lp_team;
    if (auto7384AA08_val == 1) {
        TriggerEnable(gt_Team1_BuilderUsedChange, true);
        TriggerEnable(gt_Team1_BuilderMadeChange, true);
        TriggerEnable(gt_Team1_FighterUsedChange, true);
        TriggerEnable(gt_Team1_FighterMadeChange, true);
    }
    else if (auto7384AA08_val == 2) {
        TriggerEnable(gt_Team2_BuilderUsedChange, true);
        TriggerEnable(gt_Team2_BuilderMadeChange, true);
        TriggerEnable(gt_Team2_FighterUsedChange, true);
        TriggerEnable(gt_Team2_FighterMadeChange, true);
    }
    else {
    }
}

void gf_CloseSupplyShareTrigger (int lp_team) {
    // Automatic Variable Declarations
    int auto806A96BC_val;

    // Implementation
    auto806A96BC_val = lp_team;
    if (auto806A96BC_val == 1) {
        TriggerEnable(gt_Team1_BuilderUsedChange, false);
        TriggerEnable(gt_Team1_BuilderMadeChange, false);
        TriggerEnable(gt_Team1_FighterUsedChange, false);
        TriggerEnable(gt_Team1_FighterMadeChange, false);
    }
    else if (auto806A96BC_val == 2) {
        TriggerEnable(gt_Team2_BuilderUsedChange, false);
        TriggerEnable(gt_Team2_BuilderMadeChange, false);
        TriggerEnable(gt_Team2_FighterUsedChange, false);
        TriggerEnable(gt_Team2_FighterMadeChange, false);
    }
    else {
    }
}

void gf_MaintainSupplyUnchanged (int lp_oldOwner, int lp_newOwner) {
    // Variable Declarations
    int lv__team;

    // Automatic Variable Declarations
    int autoB6480F46_val;

    // Variable Initialization

    // Implementation
    lv__team = gf_GetTeamOfPlayer(lp_newOwner);
    autoB6480F46_val = lv__team;
    if (autoB6480F46_val == 1) {
        PlayerModifyPropertyFixed(lp_oldOwner, c_playerPropSuppliesMade, c_playerPropOperSetTo, gv_team1_teamInfo.lv_supplyMade);
        PlayerModifyPropertyFixed(lp_oldOwner, c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_team1_teamInfo.lv_supplyUsed);
        PlayerModifyPropertyFixed(lp_newOwner, c_playerPropSuppliesMade, c_playerPropOperSetTo, gv_team1_teamInfo.lv_supplyMade);
        PlayerModifyPropertyFixed(lp_newOwner, c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_team1_teamInfo.lv_supplyUsed);
    }
    else if (autoB6480F46_val == 2) {
        PlayerModifyPropertyFixed(lp_oldOwner, c_playerPropSuppliesMade, c_playerPropOperSetTo, gv_team2_teamInfo.lv_supplyMade);
        PlayerModifyPropertyFixed(lp_oldOwner, c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_team2_teamInfo.lv_supplyUsed);
        PlayerModifyPropertyFixed(lp_newOwner, c_playerPropSuppliesMade, c_playerPropOperSetTo, gv_team2_teamInfo.lv_supplyMade);
        PlayerModifyPropertyFixed(lp_newOwner, c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_team2_teamInfo.lv_supplyUsed);
    }
    else {
    }
    gf_OpenSupplyShareTrigger(lv__team);
}

void gf_AllowZergMorph (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeRestrictionsEnable(lp_player, false);
    gf_ZergMorph(lp_player, true);
    gf_ZergBWMorph(lp_player, true);
}

void gf_DisallowZergMorph (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeRestrictionsEnable(lp_player, true);
    gf_ZergMorph(lp_player, false);
    gf_ZergBWMorph(lp_player, false);
}

void gf_ZergMorph (int lp_player, bool lp_option) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("MorphToBaneling", 0), lp_option);
    TechTreeAbilityAllow(lp_player, AbilityCommand("MorphToRavager", 0), lp_option);
    TechTreeAbilityAllow(lp_player, AbilityCommand("MorphToOverseer", 0), lp_option);
    TechTreeAbilityAllow(lp_player, AbilityCommand("MorphToTransportOverlord", 0), lp_option);
    TechTreeAbilityAllow(lp_player, AbilityCommand("MorphToLurker", 0), lp_option);
    TechTreeAbilityAllow(lp_player, AbilityCommand("MorphToBroodLord", 0), lp_option);
}

void gf_ZergBWMorph (int lp_player, bool lp_option) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("LurkerSCBW@Morph", 0), lp_option);
    TechTreeAbilityAllow(lp_player, AbilityCommand("GuardianSCBW@Morph", 0), lp_option);
    TechTreeAbilityAllow(lp_player, AbilityCommand("DevourerSCBW@Morph", 0), lp_option);
}

void gf_ChangeOwnershipAfterSelect (unit lp_unit, int lp_fighter) {
    // Variable Declarations
    int lv__team;
    order lv__order;
    int lv__playerForOrder;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv__team = gf_GetTeamOfPlayer(lp_fighter);
    lv__order = UnitOrder(lp_unit, 0);
    gf_CloseSupplyShareTrigger(lv__team);
    UnitSetOwner(lp_unit, lp_fighter, true);
    if ((lv__order != null)) {
        lv__playerForOrder = OrderGetPlayer(lv__order);
        if ((PlayerGetAlliance(lp_fighter, c_allianceIdControl, lv__playerForOrder) == true)) {
            UnitIssueOrder(lp_unit, lv__order, c_orderQueueReplace);
        }
        else {
            PlayerSetAlliance(lp_fighter, c_allianceIdControl, lv__playerForOrder, true);
            UnitIssueOrder(lp_unit, lv__order, c_orderQueueReplace);
            PlayerSetAlliance(lp_fighter, c_allianceIdControl, lv__playerForOrder, false);
        }
    }

}

void gf_ChangeOwnershipAfterRelease (unit lp_unit) {
    // Variable Declarations
    int lv__oldOwner;
    int lv__team;
    int lv__newOwner;
    int lv__newColor;
    order lv__order;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv__oldOwner = UnitGetOwner(lp_unit);
    lv__team = gf_GetTeamOfPlayer(lv__oldOwner);
    lv__newOwner = gf_GetOwnerForRelease(lv__team);
    lv__newColor = gf_GetColorForRelease(lv__team);
    gf_CloseSupplyShareTrigger(lv__team);
    lv__order = UnitOrder(lp_unit, 0);
    UnitSetOwner(lp_unit, lv__newOwner, true);
    UnitSetTeamColorIndex(lp_unit, lv__newColor);
    if ((PlayerGetAlliance(lv__newOwner, c_allianceIdControl, lv__oldOwner) == true)) {
        UnitIssueOrder(lp_unit, lv__order, c_orderQueueReplace);
    }
    else {
        PlayerSetAlliance(lv__newOwner, c_allianceIdControl, lv__oldOwner, true);
        UnitIssueOrder(lp_unit, lv__order, c_orderQueueReplace);
        PlayerSetAlliance(lv__newOwner, c_allianceIdControl, lv__oldOwner, false);
    }
    gf_MaintainSupplyUnchanged(lv__oldOwner, lv__newOwner);
}

void gf_DisableAbilityForReleasedMainBase (unit lp_unit) {
    // Automatic Variable Declarations
    string autoB8080D02_val;

    // Implementation
    autoB8080D02_val = UnitGetType(lp_unit);
    if (autoB8080D02_val == "OrbitalCommand") {
        UnitAbilityEnable(lp_unit, "CommandCenterTrain", false);
    }
    else if (autoB8080D02_val == "CommandCenterSCBW") {
        UnitAbilityEnable(lp_unit, "CommandCenterSCBW@Train", false);
    }
    else {
    }
}

void gf_EnableAbilityForReleasedMainBase (unit lp_unit) {
    // Automatic Variable Declarations
    string auto09D7AC19_val;

    // Implementation
    auto09D7AC19_val = UnitGetType(lp_unit);
    if (auto09D7AC19_val == "OrbitalCommand") {
        UnitAbilityEnable(lp_unit, "CommandCenterTrain", true);
    }
    else if (auto09D7AC19_val == "CommandCenterSCBW") {
        UnitAbilityEnable(lp_unit, "CommandCenterSCBW@Train", true);
    }
    else {
    }
}

void gf_ChangeFighterMode (int lp_team, int lp_mode) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_team == 1) && (lp_mode == ge_FighterMode_NF1B)) {
        gv_team1_teamMode.lv_fighterMode = ge_FighterMode_NF1B;
        gv_team1_teamMode.lv_ownerForRelease = 13;
        gv_team1_teamMode.lv_colorForRelease = 0;
    }
    else if ((lp_team == 1) && (lp_mode == ge_FighterMode__1F1B)) {
        gv_team1_teamMode.lv_fighterMode = ge_FighterMode__1F1B;
        gv_team1_teamMode.lv_ownerForRelease = PlayerGroupPlayer(gv_team1_teamInfo.lv_fighterGroup, 1);
        gv_team1_teamMode.lv_colorForRelease = gv_team1_teamInfo.lv_playerColor;
    }
    else if ((lp_team == 2) && (lp_mode == ge_FighterMode_NF1B)) {
        gv_team2_teamMode.lv_fighterMode = ge_FighterMode_NF1B;
        gv_team2_teamMode.lv_ownerForRelease = 14;
        gv_team2_teamMode.lv_colorForRelease = 0;
    }
    else if ((lp_team == 2) && (lp_mode == ge_FighterMode__1F1B)) {
        gv_team2_teamMode.lv_fighterMode = ge_FighterMode__1F1B;
        gv_team2_teamMode.lv_ownerForRelease = PlayerGroupPlayer(gv_team2_teamInfo.lv_fighterGroup, 1);
        gv_team2_teamMode.lv_colorForRelease = gv_team2_teamInfo.lv_playerColor;
    }
}

void gf_UpdateFighterMode (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_team == 1)) {
        gf_ChangeFighterMode(1, gv_team1_teamMode.lv_fighterMode);
    }
    else if ((lp_team == 2)) {
        gf_ChangeFighterMode(2, gv_team2_teamMode.lv_fighterMode);
    }
}

void gf_FighterDefeat (int lp_team) {
    // Automatic Variable Declarations
    int autoF0861C2A_val;
    playergroup auto3FB7E512_g;
    int auto3FB7E512_var;
    playergroup auto8948B628_g;
    int auto8948B628_var;

    // Implementation
    autoF0861C2A_val = lp_team;
    if (autoF0861C2A_val == 1) {
        gv_ggFlag = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6FD47613"));
        Wait(2.0, c_timeGame);
        auto3FB7E512_g = gv_team1_playerGroup.lv_users;
        auto3FB7E512_var = -1;
        while (true) {
            auto3FB7E512_var = PlayerGroupNextPlayer(auto3FB7E512_g, auto3FB7E512_var);
            if (auto3FB7E512_var < 0) { break; }
            GameOver(auto3FB7E512_var, c_gameOverDefeat, true, true);
        }
    }
    else if (autoF0861C2A_val == 2) {
        gv_ggFlag = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/738A54F4"));
        Wait(2.0, c_timeGame);
        auto8948B628_g = gv_team2_playerGroup.lv_users;
        auto8948B628_var = -1;
        while (true) {
            auto8948B628_var = PlayerGroupNextPlayer(auto8948B628_g, auto8948B628_var);
            if (auto8948B628_var < 0) { break; }
            GameOver(auto8948B628_var, c_gameOverDefeat, true, true);
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: temp
//--------------------------------------------------------------------------------------------------
bool gt_temp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_temp_Init () {
    gt_temp = TriggerCreate("gt_temp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug
//--------------------------------------------------------------------------------------------------
bool gt_Debug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(libSCEV_gf_HumanPlayers()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debug == true)) {
        gv_debug = false;
    }
    else {
        gv_debug = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_Init () {
    gt_Debug = TriggerCreate("gt_Debug_Func");
    TriggerAddEventChatMessage(gt_Debug, c_playerAny, ("-d"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test
//--------------------------------------------------------------------------------------------------
bool gt_Test_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ConsoleCommand("CatFoodForPrawnGuns", true, true);
    ConsoleCommand("Bunker55AliveInside", true, true);
    ConsoleCommand("TookTheRedPill", true, true);
    PlayerModifyPropertyFixed(gv_team1_teamInfo.lv_builder, c_playerPropMinerals, c_playerPropOperAdd, 10000.0);
    PlayerModifyPropertyFixed(gv_team1_teamInfo.lv_builder, c_playerPropVespene, c_playerPropOperAdd, 10000.0);
    PlayerModifyPropertyFixed(gv_team2_teamInfo.lv_builder, c_playerPropMinerals, c_playerPropOperAdd, 10000.0);
    PlayerModifyPropertyFixed(gv_team2_teamInfo.lv_builder, c_playerPropVespene, c_playerPropOperAdd, 10000.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Test_Init () {
    gt_Test = TriggerCreate("gt_Test_Func");
    TriggerAddEventChatMessage(gt_Test, c_playerAny, "test", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Food
//--------------------------------------------------------------------------------------------------
bool gt_Food_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ConsoleCommand("Bunker55AliveInside", true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Food_Init () {
    gt_Food = TriggerCreate("gt_Food_Func");
    TriggerAddEventChatMessage(gt_Food, c_playerAny, "-food", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Res
//--------------------------------------------------------------------------------------------------
bool gt_Res_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyFixed(gv_team1_teamInfo.lv_builder, c_playerPropMinerals, c_playerPropOperAdd, 10000.0);
    PlayerModifyPropertyFixed(gv_team1_teamInfo.lv_builder, c_playerPropVespene, c_playerPropOperAdd, 10000.0);
    PlayerModifyPropertyFixed(gv_team2_teamInfo.lv_builder, c_playerPropMinerals, c_playerPropOperAdd, 10000.0);
    PlayerModifyPropertyFixed(gv_team2_teamInfo.lv_builder, c_playerPropVespene, c_playerPropOperAdd, 10000.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Res_Init () {
    gt_Res = TriggerCreate("gt_Res_Func");
    TriggerAddEventChatMessage(gt_Res, c_playerAny, "-res", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fog
//--------------------------------------------------------------------------------------------------
bool gt_Fog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ConsoleCommand("TookTheRedPill", true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Fog_Init () {
    gt_Fog = TriggerCreate("gt_Fog_Func");
    TriggerAddEventChatMessage(gt_Fog, c_playerAny, "-fog", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fast
//--------------------------------------------------------------------------------------------------
bool gt_Fast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ConsoleCommand("CatFoodForPrawnGuns", true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Fast_Init () {
    gt_Fast = TriggerCreate("gt_Fast_Func");
    TriggerAddEventChatMessage(gt_Fast, c_playerAny, "-fast", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control
//--------------------------------------------------------------------------------------------------
bool gt_Control_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__triggeringPlayer;

    // Automatic Variable Declarations
    playergroup autoFEB30D9F_g;
    playergroup auto386C42D7_g;
    playergroup autoAF03FE53_g;
    playergroup auto32D137E8_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_debug == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__triggeringPlayer = EventPlayer();
    if ((gv_controlDebug == false)) {
        autoAF03FE53_g = PlayerGroupAlliance(c_playerGroupAlly, lv__triggeringPlayer);
        lv__player = -1;
        while (true) {
            lv__player = PlayerGroupNextPlayer(autoAF03FE53_g, lv__player);
            if (lv__player < 0) { break; }
            PlayerSetAlliance(lv__player, c_allianceIdControl, lv__triggeringPlayer, true);
        }
        auto32D137E8_g = PlayerGroupAlliance(c_playerGroupEnemy, lv__triggeringPlayer);
        lv__player = -1;
        while (true) {
            lv__player = PlayerGroupNextPlayer(auto32D137E8_g, lv__player);
            if (lv__player < 0) { break; }
            PlayerSetAlliance(lv__player, c_allianceIdControl, lv__triggeringPlayer, true);
            PlayerSetAlliance(lv__player, c_allianceIdVision, lv__triggeringPlayer, true);
            PlayerSetAlliance(lv__player, c_allianceIdSpend, lv__triggeringPlayer, true);
        }
        if ((PlayerGroupHasPlayer(gv_team1_playerGroup.lv_users, lv__triggeringPlayer) == true)) {
            PlayerSetAlliance(14, c_allianceIdControl, lv__triggeringPlayer, true);
        }
        else {
            PlayerSetAlliance(13, c_allianceIdControl, lv__triggeringPlayer, true);
        }
        gv_controlDebug = true;
    }
    else {
        autoFEB30D9F_g = PlayerGroupAlliance(c_playerGroupAlly, EventPlayer());
        lv__player = -1;
        while (true) {
            lv__player = PlayerGroupNextPlayer(autoFEB30D9F_g, lv__player);
            if (lv__player < 0) { break; }
            PlayerSetAlliance(lv__player, c_allianceIdControl, lv__triggeringPlayer, false);
        }
        auto386C42D7_g = PlayerGroupAlliance(c_playerGroupEnemy, EventPlayer());
        lv__player = -1;
        while (true) {
            lv__player = PlayerGroupNextPlayer(auto386C42D7_g, lv__player);
            if (lv__player < 0) { break; }
            PlayerSetAlliance(lv__player, c_allianceIdControl, lv__triggeringPlayer, false);
            PlayerSetAlliance(lv__player, c_allianceIdVision, lv__triggeringPlayer, false);
            PlayerSetAlliance(lv__player, c_allianceIdSpend, lv__triggeringPlayer, false);
        }
        if ((PlayerGroupHasPlayer(gv_team1_playerGroup.lv_users, lv__triggeringPlayer) == true)) {
            PlayerSetAlliance(14, c_allianceIdControl, lv__triggeringPlayer, false);
        }
        else {
            PlayerSetAlliance(13, c_allianceIdControl, lv__triggeringPlayer, false);
        }
        gv_controlDebug = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Control_Init () {
    gt_Control = TriggerCreate("gt_Control_Func");
    TriggerAddEventChatMessage(gt_Control, c_playerAny, ("-con"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GainControl
//--------------------------------------------------------------------------------------------------
bool gt_GainControl_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__unit;
    int lv__player;
    int lv__oldOwner;

    // Automatic Variable Declarations
    unitgroup auto8F238D2C_g;
    int auto8F238D2C_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_debug == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    auto8F238D2C_g = UnitGroupSelected(EventPlayer());
    auto8F238D2C_u = UnitGroupCount(auto8F238D2C_g, c_unitCountAll);
    for (;; auto8F238D2C_u -= 1) {
        lv__unit = UnitGroupUnitFromEnd(auto8F238D2C_g, auto8F238D2C_u);
        if (lv__unit == null) { break; }
        lv__oldOwner = UnitGetOwner(lv__unit);
        if ((PlayerGroupHasPlayer(gv_team1_playerGroup.lv_players, lv__player) == true) && (PlayerGroupHasPlayer(gv_team1_playerGroup.lv_players, lv__oldOwner) == true)) {
            gf_CloseSupplyShareTrigger(1);
            UnitSetOwner(lv__unit, lv__player, true);
            gf_MaintainSupplyUnchanged(lv__oldOwner, lv__player);
        }
        else if ((PlayerGroupHasPlayer(gv_team2_playerGroup.lv_players, lv__player) == true) && (PlayerGroupHasPlayer(gv_team2_playerGroup.lv_players, lv__oldOwner) == true)) {
            gf_CloseSupplyShareTrigger(2);
            UnitSetOwner(lv__unit, lv__player, true);
            gf_MaintainSupplyUnchanged(lv__oldOwner, lv__player);
        }
        else if ((PlayerGroupHasPlayer(gv_team1_playerGroup.lv_players, lv__player) == true) && (PlayerGroupHasPlayer(gv_team1_playerGroup.lv_players, lv__oldOwner) == false)) {
            UnitSetOwner(lv__unit, lv__player, true);
        }
        else if ((PlayerGroupHasPlayer(gv_team1_playerGroup.lv_players, lv__player) == false) && (PlayerGroupHasPlayer(gv_team1_playerGroup.lv_players, lv__oldOwner) == false)) {
            UnitSetOwner(lv__unit, lv__player, true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GainControl_Init () {
    gt_GainControl = TriggerCreate("gt_GainControl_Func");
    TriggerAddEventChatMessage(gt_GainControl, c_playerAny, ("-gain"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ChangeRaceForDebug
//--------------------------------------------------------------------------------------------------
bool gt_ChangeRaceForDebug_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__team;
    string lv__oldRace;
    string lv__newRace;
    unit lv__unit;
    point lv__startLoacation;
    int lv__builder;

    // Automatic Variable Declarations
    string auto72E22ADE_val;
    unitgroup auto91D6906F_g;
    int auto91D6906F_u;
    playergroup autoAD3A531F_g;
    playergroup auto8C17AAF4_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_debug == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    lv__team = gf_GetTeamOfPlayer(lv__player);
    lv__oldRace = PlayerRace(lv__player);
    lv__builder = gf_GetBuilderOfTeam(lv__team);
    auto72E22ADE_val = EventChatMessage(false);
    if (auto72E22ADE_val == "-r t2") {
        lv__newRace = "Terr";
    }
    else if (auto72E22ADE_val == "-r z2") {
        lv__newRace = "Zerg";
    }
    else if (auto72E22ADE_val == "-r p2") {
        lv__newRace = "Prot";
    }
    else if (auto72E22ADE_val == "-r t1") {
        lv__newRace = "BWTe";
    }
    else if (auto72E22ADE_val == "-r z1") {
        lv__newRace = "BWZe";
    }
    else if (auto72E22ADE_val == "-r p1") {
        lv__newRace = "BWPr";
    }
    else {
        lv__newRace = lv__oldRace;
    }
    if ((lv__oldRace != lv__newRace)) {
        lv__startLoacation = gf_GetStartLocationOfTeam(lv__team);
        auto91D6906F_g = UnitGroup(null, lv__builder, RegionPlayableMap(), UnitFilter(0, 0, 0, 0), 0);
        auto91D6906F_u = UnitGroupCount(auto91D6906F_g, c_unitCountAll);
        for (;; auto91D6906F_u -= 1) {
            lv__unit = UnitGroupUnitFromEnd(auto91D6906F_g, auto91D6906F_u);
            if (lv__unit == null) { break; }
            UnitRemove(lv__unit);
        }
        if (((lv__oldRace == "Zerg") || (lv__oldRace == "BWZe")) && (lv__newRace != "Zerg") && (lv__newRace != "BWZe")) {
            CreepModify(lv__startLoacation, 14.0, false, false);
        }
        else if ((lv__oldRace != "Zerg") && (lv__oldRace != "BWZe") && ((lv__newRace == "Zerg") || (lv__newRace == "BWZe"))) {
            CreepModify(lv__startLoacation, 13.0, true, false);
        }
        MeleeInitUnitsForPlayer(lv__builder, lv__newRace, lv__startLoacation);
        if ((lv__team == 1)) {
            gv_team1_teamInfo.lv_race = lv__newRace;
            auto8C17AAF4_g = gv_team1_playerGroup.lv_players;
            lv__player = -1;
            while (true) {
                lv__player = PlayerGroupNextPlayer(auto8C17AAF4_g, lv__player);
                if (lv__player < 0) { break; }
                PlayerSetRace(lv__player, lv__newRace);
            }
        }
        else {
            CreepModify(gv_team2_teamInfo.lv_startLocation, 14.0, false, false);
            gv_team2_teamInfo.lv_race = lv__newRace;
            autoAD3A531F_g = gv_team2_playerGroup.lv_players;
            lv__player = -1;
            while (true) {
                lv__player = PlayerGroupNextPlayer(autoAD3A531F_g, lv__player);
                if (lv__player < 0) { break; }
                PlayerSetRace(lv__player, lv__newRace);
            }
        }
        gf_UpdateRaceIcon(lv__team, lv__newRace);
        gf_UpdateButtonRace(lv__oldRace, lv__newRace, lv__team);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeRaceForDebug_Init () {
    gt_ChangeRaceForDebug = TriggerCreate("gt_ChangeRaceForDebug_Func");
    TriggerAddEventChatMessage(gt_ChangeRaceForDebug, c_playerAny, ("-r t2"), true);
    TriggerAddEventChatMessage(gt_ChangeRaceForDebug, c_playerAny, ("-r z2"), true);
    TriggerAddEventChatMessage(gt_ChangeRaceForDebug, c_playerAny, ("-r p2"), true);
    TriggerAddEventChatMessage(gt_ChangeRaceForDebug, c_playerAny, ("-r t1"), true);
    TriggerAddEventChatMessage(gt_ChangeRaceForDebug, c_playerAny, ("-r z1"), true);
    TriggerAddEventChatMessage(gt_ChangeRaceForDebug, c_playerAny, ("-r p1"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RemoveUnit
//--------------------------------------------------------------------------------------------------
bool gt_RemoveUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__unit;
    int lv__player;

    // Automatic Variable Declarations
    unitgroup autoB357E9E8_g;
    int autoB357E9E8_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_debug == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    autoB357E9E8_g = UnitGroupSelected(lv__player);
    autoB357E9E8_u = UnitGroupCount(autoB357E9E8_g, c_unitCountAll);
    for (;; autoB357E9E8_u -= 1) {
        lv__unit = UnitGroupUnitFromEnd(autoB357E9E8_g, autoB357E9E8_u);
        if (lv__unit == null) { break; }
        UnitRemove(lv__unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveUnit_Init () {
    gt_RemoveUnit = TriggerCreate("gt_RemoveUnit_Func");
    TriggerAddEventChatMessage(gt_RemoveUnit, c_playerAny, ("-rm"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker
//--------------------------------------------------------------------------------------------------
bool gt_Worker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(3, "SCV", 0, gv_team1_teamInfo.lv_builder, gv_team1_teamInfo.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Drone", 0, gv_team1_teamInfo.lv_builder, gv_team1_teamInfo.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Probe", 0, gv_team1_teamInfo.lv_builder, gv_team1_teamInfo.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "SCVSCBW", 0, gv_team1_teamInfo.lv_builder, gv_team1_teamInfo.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "DroneSCBW", 0, gv_team1_teamInfo.lv_builder, gv_team1_teamInfo.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "ProbeSCBW", 0, gv_team1_teamInfo.lv_builder, gv_team1_teamInfo.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "SCV", 0, gv_team2_teamInfo.lv_builder, gv_team2_teamInfo.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Drone", 0, gv_team2_teamInfo.lv_builder, gv_team2_teamInfo.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Probe", 0, gv_team2_teamInfo.lv_builder, gv_team2_teamInfo.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "SCVSCBW", 0, gv_team2_teamInfo.lv_builder, gv_team2_teamInfo.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "DroneSCBW", 0, gv_team2_teamInfo.lv_builder, gv_team2_teamInfo.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "ProbeSCBW", 0, gv_team2_teamInfo.lv_builder, gv_team2_teamInfo.lv_startLocation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Worker_Init () {
    gt_Worker = TriggerCreate("gt_Worker_Func");
    TriggerAddEventChatMessage(gt_Worker, c_playerAny, ("-wor"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Color
//--------------------------------------------------------------------------------------------------
bool gt_Color_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetColorIndex(1, 1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Color_Init () {
    gt_Color = TriggerCreate("gt_Color_Func");
    TriggerAddEventChatMessage(gt_Color, c_playerAny, ("-col"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BeBuilder
//--------------------------------------------------------------------------------------------------
bool gt_BeBuilder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__team;
    int lv__oldBuilder;
    int lv__newBuilder;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_debug == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__team = gf_GetTeamOfPlayer(EventPlayer());
    lv__newBuilder = EventPlayer();
    if ((lv__team == 1)) {
        lv__oldBuilder = gv_team1_teamInfo.lv_builder;
    }
    else {
        lv__oldBuilder = gv_team2_teamInfo.lv_builder;
    }
    if ((lv__newBuilder != lv__oldBuilder)) {
        gf_ChangeBuilder(lv__oldBuilder, lv__newBuilder, lv__team);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BeBuilder_Init () {
    gt_BeBuilder = TriggerCreate("gt_BeBuilder_Func");
    TriggerAddEventChatMessage(gt_BeBuilder, c_playerAny, ("-bui"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BeFighter
//--------------------------------------------------------------------------------------------------
bool gt_BeFighter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__team;
    int lv__oldBuilder;
    int lv__newBuilder;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_debug == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__oldBuilder = EventPlayer();
    if ((gf_GetRoleOfPlayer(lv__oldBuilder) == ge_Role_Builder)) {
        lv__team = gf_GetTeamOfPlayer(lv__oldBuilder);
        lv__newBuilder = gf_RandomFighterFromTeam(lv__team);
        gf_ChangeBuilder(lv__oldBuilder, lv__newBuilder, lv__team);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BeFighter_Init () {
    gt_BeFighter = TriggerCreate("gt_BeFighter_Func");
    TriggerAddEventChatMessage(gt_BeFighter, c_playerAny, ("-fig"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NF
//--------------------------------------------------------------------------------------------------
bool gt_NF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ChangeFighterMode(1, ge_FighterMode_NF1B);
    gf_ChangeFighterMode(2, ge_FighterMode_NF1B);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NF_Init () {
    gt_NF = TriggerCreate("gt_NF_Func");
    TriggerAddEventChatMessage(gt_NF, c_playerAny, ("-nf"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1F
//--------------------------------------------------------------------------------------------------
bool gt__1F_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ChangeFighterMode(1, ge_FighterMode__1F1B);
    gf_ChangeFighterMode(2, ge_FighterMode__1F1B);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1F_Init () {
    gt__1F = TriggerCreate("gt__1F_Func");
    TriggerAddEventChatMessage(gt__1F, c_playerAny, ("-1f"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GG
//--------------------------------------------------------------------------------------------------
bool gt_GG_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_ggFlag == true)) {
        gv_ggFlag = false;
    }
    else {
        gv_ggFlag = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GG_Init () {
    gt_GG = TriggerCreate("gt_GG_Func");
    TriggerAddEventChatMessage(gt_GG, c_playerAny, ("-ggflag"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show/HideUI
//--------------------------------------------------------------------------------------------------
bool gt_ShowHideUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    playergroup lv__playerGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__playerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_debug == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    lv__playerGroup = PlayerGroupSingle(lv__player);
    if ((gv_uiShowed == true)) {
        if ((gf_GetRoleOfPlayer(lv__player) == ge_Role_Builder)) {
            UISetResourceVisible(lv__playerGroup, c_resourceTypeMinerals, false);
            UISetResourceVisible(lv__playerGroup, c_resourceTypeVespene, false);
        }

        libNtve_gf_HideGameUI(false, lv__playerGroup);
        DialogSetVisible(gv_dButtonControlPanel, lv__playerGroup, false);
        DialogSetVisible(gv_controlPanel, lv__playerGroup, false);
        DialogSetVisible(gv_team1_resourcePanel, gv_team1_teamInfo.lv_fighterGroup, false);
        DialogSetVisible(gv_team2_resourcePanel, gv_team2_teamInfo.lv_fighterGroup, false);
        gv_uiShowed = false;
    }
    else {
        if ((gf_GetRoleOfPlayer(lv__player) == ge_Role_Builder)) {
            UISetResourceVisible(lv__playerGroup, c_resourceTypeMinerals, true);
            UISetResourceVisible(lv__playerGroup, c_resourceTypeVespene, true);
        }

        libNtve_gf_HideGameUI(true, lv__playerGroup);
        DialogSetVisible(gv_dButtonControlPanel, lv__playerGroup, true);
        DialogSetVisible(gv_controlPanel, lv__playerGroup, true);
        DialogSetVisible(gv_team1_resourcePanel, gv_team1_teamInfo.lv_fighterGroup, true);
        DialogSetVisible(gv_team2_resourcePanel, gv_team2_teamInfo.lv_fighterGroup, true);
        gv_uiShowed = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowHideUI_Init () {
    gt_ShowHideUI = TriggerCreate("gt_ShowHideUI_Func");
    TriggerAddEventChatMessage(gt_ShowHideUI, c_playerAny, ("-ui"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DisableExperimental
//--------------------------------------------------------------------------------------------------
bool gt_DisableExperimental_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableExperimental_Init () {
    gt_DisableExperimental = TriggerCreate("gt_DisableExperimental_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: EnableExperimental
//--------------------------------------------------------------------------------------------------
bool gt_EnableExperimental_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == true))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableExperimental_Init () {
    gt_EnableExperimental = TriggerCreate("gt_EnableExperimental_Func");
    TriggerAddEventChatMessage(gt_EnableExperimental, c_playerAny, ("-e"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: unlock_pv_releaseToChangeOwner
//--------------------------------------------------------------------------------------------------
bool gt_unlock_pv_releaseToChangeOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_unlock_pv_releaseToChangeOwner_Init () {
    gt_unlock_pv_releaseToChangeOwner = TriggerCreate("gt_unlock_pv_releaseToChangeOwner_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BeforeRoleSelection, true, true);
    TriggerExecute(gt_DuringRoleSelection, true, true);
    TriggerExecute(gt_AfterRoleSelection, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Race Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MapInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Automatic Variable Declarations
    playergroup auto9BFF64EA_g;
    string auto177FF3D0_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto9BFF64EA_g = PlayerGroupActive();
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(auto9BFF64EA_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        auto177FF3D0_val = GameAttributePlayerValue("[bnet:NF1B_SCEvoMulti/0.0/236353,file:Mods\\NF1B_SCEvoComplete\\NF1B_SCEvoMulti.SC2Mod]1", lv_playerIndex);
        if (auto177FF3D0_val == "0001") {
            gf_SetPlayerRaceToBW(lv_playerIndex);
        }
        else if (auto177FF3D0_val == "0002") {
            gf_SetPlayerRaceToSC2(lv_playerIndex);
        }
        else if (auto177FF3D0_val == "0003") {
            if ((RandomInt(0, 1) == 1)) {
                gf_SetPlayerRaceToBW(lv_playerIndex);
            }
            else {
                gf_SetPlayerRaceToSC2(lv_playerIndex);
            }
        }
        else {
            if ((RandomInt(0, 1) == 1)) {
                gf_SetPlayerRaceToBW(lv_playerIndex);
            }
            else {
                gf_SetPlayerRaceToSC2(lv_playerIndex);
            }
        }
    }
    libSCEV_gf_SCEvoActivateFeature(libSCEV_ge_SCEvoFeatures_FractionalArmor, true);
    libSCEV_gf_SCEvoActivateFeature(libSCEV_ge_SCEvoFeatures_MissChance, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInitialization_Init () {
    gt_MapInitialization = TriggerCreate("gt_MapInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BeforeRoleSelection
//--------------------------------------------------------------------------------------------------
bool gt_BeforeRoleSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetTimer();
    gf_SetGameRace();
    gf_SetSingleMultiPlayerMode();
    gf_SetPlayerGroup();
    gf_SetStartLocation();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BeforeRoleSelection_Init () {
    gt_BeforeRoleSelection = TriggerCreate("gt_BeforeRoleSelection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DuringRoleSelection
//--------------------------------------------------------------------------------------------------
bool gt_DuringRoleSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetRoleForTeam1();
    gf_SetRoleForTeam2();
    gf_SetStartingUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DuringRoleSelection_Init () {
    gt_DuringRoleSelection = TriggerCreate("gt_DuringRoleSelection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AfterRoleSelection
//--------------------------------------------------------------------------------------------------
bool gt_AfterRoleSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetChangeRaceFlag();
    gf_SetTechRestrictions(1);
    gf_SetUI();
    gf_SetFighterMode();
    gf_SetMeleeOptions();
    gf_SetPlayerProperty();
    gf_InitNexusGroup();
    gf_SetResource();
    gf_SetAlliance();
    gf_SetSupplyLimit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AfterRoleSelection_Init () {
    gt_AfterRoleSelection = TriggerCreate("gt_AfterRoleSelection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ClickDialogItem
//--------------------------------------------------------------------------------------------------
bool gt_ClickDialogItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__dialogItem;
    int lv__player;
    int lv__playerClicked;
    int lv__team;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__dialogItem = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__dialogItem = EventDialogControl();
    lv__player = EventPlayer();
    lv__team = gf_GetTeamOfPlayer(lv__player);
    if ((lv__dialogItem == gv_buttonControlPanel)) {
        gf_ClickButtonUserPanel();
    }
    else if (gf_IsButtonPlayerType(lv__dialogItem)) {
        lv__playerClicked = gf_GetPlayerOfButton(lv__dialogItem);
        gf_ClickButtonPlayer(lv__player, lv__playerClicked);
    }
    else if (gf_IsButtonMorphType(lv__dialogItem) && gf_ErrorIsBuilder(lv__player)) {
        gf_ClickButtonMorph(lv__dialogItem, lv__team);
    }
    else if (gf_ClickButtonRace(lv__player, lv__dialogItem)) {
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClickDialogItem_Init () {
    gt_ClickDialogItem = TriggerCreate("gt_ClickDialogItem_Func");
    TriggerAddEventDialogControl(gt_ClickDialogItem, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TipRole
//--------------------------------------------------------------------------------------------------
bool gt_TipRole_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv__tipBuilderText;
    text lv__tipFighterText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__tipBuilderText = StringExternal("Param/Value/EB75841A");
    lv__tipFighterText = StringExternal("Param/Value/7DDEAD17");

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(gv_team1_teamInfo.lv_builder), c_messageAreaSubtitle, lv__tipBuilderText);
    UIDisplayMessage(gv_team1_teamInfo.lv_fighterGroup, c_messageAreaSubtitle, lv__tipFighterText);
    UIDisplayMessage(PlayerGroupSingle(gv_team2_teamInfo.lv_builder), c_messageAreaSubtitle, lv__tipBuilderText);
    UIDisplayMessage(gv_team2_teamInfo.lv_fighterGroup, c_messageAreaSubtitle, lv__tipFighterText);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipRole_Init () {
    gt_TipRole = TriggerCreate("gt_TipRole_Func");
    TriggerAddEventTimeElapsed(gt_TipRole, 0.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TipCommands
//--------------------------------------------------------------------------------------------------
bool gt_TipCommands_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/5ED931F6"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/F4D1DCD3"), StringToText(""), "Assets\\Textures\\ui_btn_aicommand_commandcard_claim.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipCommands_Init () {
    gt_TipCommands = TriggerCreate("gt_TipCommands_Func");
    TriggerAddEventTimeElapsed(gt_TipCommands, 0.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TipDebugCommands
//--------------------------------------------------------------------------------------------------
bool gt_TipDebugCommands_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/DA162D42"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/56DB4C47"), StringToText(""), "Assets\\Textures\\ui_tipicon_campaign_space01-repair.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipDebugCommands_Init () {
    gt_TipDebugCommands = TriggerCreate("gt_TipDebugCommands_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TipGG
//--------------------------------------------------------------------------------------------------
bool gt_TipGG_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/CA3F7518"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipGG_Init () {
    gt_TipGG = TriggerCreate("gt_TipGG_Func");
    TriggerAddEventTimeElapsed(gt_TipGG, 120.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TipSensorTower
//--------------------------------------------------------------------------------------------------
bool gt_TipSensorTower_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv__tipText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__tipText = StringExternal("Param/Value/3E880340");

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "EngineeringBay"))) {
            return false;
        }

        if (!((((UnitGetOwner(EventUnitProgressUnit()) == gv_team1_teamInfo.lv_builder) && (gv_team1_tipSensorTowerFlag == false)) || ((UnitGetOwner(EventUnitProgressUnit()) == gv_team2_teamInfo.lv_builder) && (gv_team2_tipSensorTowerFlag == false))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnitProgressUnit()) == gv_team1_teamInfo.lv_builder) && (gv_team1_tipSensorTowerFlag == false)) {
        gv_team1_tipSensorTowerFlag = true;
        UIDisplayMessage(gv_team1_playerGroup.lv_users, c_messageAreaSubtitle, lv__tipText);
    }
    else {
        gv_team2_tipSensorTowerFlag = true;
        UIDisplayMessage(gv_team2_playerGroup.lv_users, c_messageAreaSubtitle, lv__tipText);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipSensorTower_Init () {
    gt_TipSensorTower = TriggerCreate("gt_TipSensorTower_Func");
    TriggerAddEventUnitConstructProgress(gt_TipSensorTower, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TipRace
//--------------------------------------------------------------------------------------------------
bool gt_TipRace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/AEE0382B"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipRace_Init () {
    gt_TipRace = TriggerCreate("gt_TipRace_Func");
    TriggerAddEventTimeElapsed(gt_TipRace, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TipHelp
//--------------------------------------------------------------------------------------------------
bool gt_TipHelp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/1AC85A47"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipHelp_Init () {
    gt_TipHelp = TriggerCreate("gt_TipHelp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TipZerg
//--------------------------------------------------------------------------------------------------
bool gt_TipZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv__tipZergText;
    text lv__tipZergSC2Text;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__tipZergText = StringExternal("Param/Value/2ECA9760");
    lv__tipZergSC2Text = StringExternal("Param/Value/47E2A1E9");

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_team1_teamInfo.lv_race == "Zerg") || (gv_team1_teamInfo.lv_race == "BWZe"))) {
        UIDisplayMessage(gv_team1_playerGroup.lv_users, c_messageAreaSubtitle, lv__tipZergText);
        Wait(10.0, c_timeReal);
        UIDisplayMessage(gv_team1_playerGroup.lv_users, c_messageAreaSubtitle, lv__tipZergSC2Text);
    }

    if (((gv_team2_teamInfo.lv_race == "Zerg") || (gv_team2_teamInfo.lv_race == "BWZe"))) {
        UIDisplayMessage(gv_team2_playerGroup.lv_users, c_messageAreaSubtitle, lv__tipZergText);
        Wait(10.0, c_timeReal);
        UIDisplayMessage(gv_team2_playerGroup.lv_users, c_messageAreaSubtitle, lv__tipZergSC2Text);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipZerg_Init () {
    gt_TipZerg = TriggerCreate("gt_TipZerg_Func");
    TriggerAddEventTimeElapsed(gt_TipZerg, 60.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GiveUpBuilderRole
//--------------------------------------------------------------------------------------------------
bool gt_GiveUpBuilderRole_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__team;
    int lv__oldBuilder;
    int lv__newBuilder;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TimerGetElapsed(gv_timer) <= 60.0))) {
            return false;
        }

        if (!(((EventPlayer() == gv_team1_teamInfo.lv_builder) || (EventPlayer() == gv_team2_teamInfo.lv_builder)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__oldBuilder = EventPlayer();
    lv__team = gf_GetTeamOfPlayer(lv__oldBuilder);
    lv__newBuilder = gf_RandomFighterExcludeHaveBeenFromTeam(lv__team);
    if ((lv__newBuilder != -1)) {
        gf_ChangeBuilder(lv__oldBuilder, lv__newBuilder, lv__team);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiveUpBuilderRole_Init () {
    gt_GiveUpBuilderRole = TriggerCreate("gt_GiveUpBuilderRole_Func");
    TriggerAddEventChatMessage(gt_GiveUpBuilderRole, c_playerAny, ("-b"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ChangeBuilder
//--------------------------------------------------------------------------------------------------
bool gt_ChangeBuilder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__team;
    int lv__oldBuilder;
    int lv__newBuilder;
    bool lv__valid;

    // Automatic Variable Declarations
    string auto60EB1B58_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TimerGetElapsed(gv_timer) <= 60.0))) {
            return false;
        }

        if (!(((EventPlayer() == gv_team1_teamInfo.lv_builder) || (EventPlayer() == gv_team2_teamInfo.lv_builder)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__oldBuilder = EventPlayer();
    auto60EB1B58_val = EventChatMessage(false);
    if (auto60EB1B58_val == "-b 1") {
        lv__newBuilder = 1;
    }
    else if (auto60EB1B58_val == "-b 2") {
        lv__newBuilder = 2;
    }
    else if (auto60EB1B58_val == "-b 3") {
        lv__newBuilder = 3;
    }
    else if (auto60EB1B58_val == "-b 4") {
        lv__newBuilder = 4;
    }
    else if (auto60EB1B58_val == "-b 5") {
        lv__newBuilder = 5;
    }
    else if (auto60EB1B58_val == "-b 6") {
        lv__newBuilder = 6;
    }
    else if (auto60EB1B58_val == "-b 7") {
        lv__newBuilder = 7;
    }
    else if (auto60EB1B58_val == "-b 8") {
        lv__newBuilder = 8;
    }
    else if (auto60EB1B58_val == "-b 9") {
        lv__newBuilder = 9;
    }
    else if (auto60EB1B58_val == "-b 10") {
        lv__newBuilder = 10;
    }
    else if (auto60EB1B58_val == "-b 11") {
        lv__newBuilder = 11;
    }
    else if (auto60EB1B58_val == "-b 12") {
        lv__newBuilder = 12;
    }
    else {
    }
    if ((lv__oldBuilder == gv_team1_teamInfo.lv_builder) && (PlayerGroupHasPlayer(gv_team1_teamInfo.lv_fighterGroup, lv__newBuilder) == true)) {
        lv__team = 1;
        lv__valid = true;
    }
    else if ((lv__oldBuilder == gv_team2_teamInfo.lv_builder) && (PlayerGroupHasPlayer(gv_team2_teamInfo.lv_fighterGroup, lv__newBuilder) == true)) {
        lv__team = 2;
        lv__valid = true;
    }
    if ((lv__valid == true)) {
        gf_ChangeBuilder(lv__oldBuilder, lv__newBuilder, lv__team);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeBuilder_Init () {
    gt_ChangeBuilder = TriggerCreate("gt_ChangeBuilder_Func");
    TriggerAddEventChatMessage(gt_ChangeBuilder, c_playerAny, ("-b 1"), true);
    TriggerAddEventChatMessage(gt_ChangeBuilder, c_playerAny, ("-b 2"), true);
    TriggerAddEventChatMessage(gt_ChangeBuilder, c_playerAny, ("-b 3"), true);
    TriggerAddEventChatMessage(gt_ChangeBuilder, c_playerAny, ("-b 4"), true);
    TriggerAddEventChatMessage(gt_ChangeBuilder, c_playerAny, ("-b 5"), true);
    TriggerAddEventChatMessage(gt_ChangeBuilder, c_playerAny, ("-b 6"), true);
    TriggerAddEventChatMessage(gt_ChangeBuilder, c_playerAny, ("-b 7"), true);
    TriggerAddEventChatMessage(gt_ChangeBuilder, c_playerAny, ("-b 8"), true);
    TriggerAddEventChatMessage(gt_ChangeBuilder, c_playerAny, ("-b 9"), true);
    TriggerAddEventChatMessage(gt_ChangeBuilder, c_playerAny, ("-b 10"), true);
    TriggerAddEventChatMessage(gt_ChangeBuilder, c_playerAny, ("-b 11"), true);
    TriggerAddEventChatMessage(gt_ChangeBuilder, c_playerAny, ("-b 12"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ChangeRace
//--------------------------------------------------------------------------------------------------
bool gt_ChangeRace_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__team;
    string lv__oldRace;
    string lv__newRace;
    unit lv__unit;
    point lv__startLoacation;

    // Automatic Variable Declarations
    string auto4C934AD9_val;
    unitgroup auto66A73243_g;
    int auto66A73243_u;
    playergroup auto67972DB5_g;
    playergroup autoB01EF66E_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_debug == false))) {
            return false;
        }

        if (!((gf_GetRoleOfPlayer(EventPlayer()) == ge_Role_Builder))) {
            return false;
        }

        if (!((TimerGetElapsed(gv_timer) <= 12.0))) {
            return false;
        }

        if (!((gv_changeRaceEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    lv__team = gf_GetTeamOfPlayer(lv__player);
    lv__oldRace = PlayerRace(lv__player);
    auto4C934AD9_val = EventChatMessage(false);
    if (auto4C934AD9_val == "-r t2") {
        lv__newRace = "Terr";
    }
    else if (auto4C934AD9_val == "-r z2") {
        lv__newRace = "Zerg";
    }
    else if (auto4C934AD9_val == "-r p2") {
        lv__newRace = "Prot";
    }
    else if (auto4C934AD9_val == "-r t1") {
        lv__newRace = "BWTe";
    }
    else if (auto4C934AD9_val == "-r z1") {
        lv__newRace = "BWZe";
    }
    else if (auto4C934AD9_val == "-r p1") {
        lv__newRace = "BWPr";
    }
    else {
        lv__newRace = lv__oldRace;
    }
    if ((lv__oldRace != lv__newRace)) {
        gv_changeRaceEnabled = false;
        lv__startLoacation = gf_GetStartLocationOfTeam(lv__team);
        auto66A73243_g = UnitGroup(null, lv__player, RegionPlayableMap(), UnitFilter(0, 0, 0, 0), 0);
        auto66A73243_u = UnitGroupCount(auto66A73243_g, c_unitCountAll);
        for (;; auto66A73243_u -= 1) {
            lv__unit = UnitGroupUnitFromEnd(auto66A73243_g, auto66A73243_u);
            if (lv__unit == null) { break; }
            UnitRemove(lv__unit);
        }
        if (((lv__oldRace == "Zerg") || (lv__oldRace == "BWZe")) && (lv__newRace != "Zerg") && (lv__newRace != "BWZe")) {
            CreepModify(lv__startLoacation, 14.0, false, false);
        }
        else if ((lv__oldRace != "Zerg") && (lv__oldRace != "BWZe") && ((lv__newRace == "Zerg") || (lv__newRace == "BWZe"))) {
            CreepModify(lv__startLoacation, 13.0, true, false);
        }
        MeleeInitUnitsForPlayer(lv__player, lv__newRace, lv__startLoacation);
        if ((lv__team == 1)) {
            gv_team1_teamInfo.lv_race = lv__newRace;
            autoB01EF66E_g = gv_team1_playerGroup.lv_players;
            lv__player = -1;
            while (true) {
                lv__player = PlayerGroupNextPlayer(autoB01EF66E_g, lv__player);
                if (lv__player < 0) { break; }
                PlayerSetRace(lv__player, lv__newRace);
            }
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, gv_textWarningRaceTeam1);
        }
        else {
            CreepModify(gv_team2_teamInfo.lv_startLocation, 14.0, false, false);
            gv_team2_teamInfo.lv_race = lv__newRace;
            auto67972DB5_g = gv_team2_playerGroup.lv_players;
            lv__player = -1;
            while (true) {
                lv__player = PlayerGroupNextPlayer(auto67972DB5_g, lv__player);
                if (lv__player < 0) { break; }
                PlayerSetRace(lv__player, lv__newRace);
            }
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, gv_textWarningRaceTeam2);
        }
        gf_UpdateRaceIcon(lv__team, lv__newRace);
        gf_UpdateButtonRace(lv__oldRace, lv__newRace, lv__team);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeRace_Init () {
    gt_ChangeRace = TriggerCreate("gt_ChangeRace_Func");
    TriggerAddEventChatMessage(gt_ChangeRace, c_playerAny, ("-race t2"), true);
    TriggerAddEventChatMessage(gt_ChangeRace, c_playerAny, ("-race z2"), true);
    TriggerAddEventChatMessage(gt_ChangeRace, c_playerAny, ("-race p2"), true);
    TriggerAddEventChatMessage(gt_ChangeRace, c_playerAny, ("-race t1"), true);
    TriggerAddEventChatMessage(gt_ChangeRace, c_playerAny, ("-race z1"), true);
    TriggerAddEventChatMessage(gt_ChangeRace, c_playerAny, ("-race p1"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FighterQuit
//--------------------------------------------------------------------------------------------------
bool gt_FighterQuit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_ggFlag == false))) {
            return false;
        }

        if (!((EventPlayer() != gv_team1_teamInfo.lv_builder))) {
            return false;
        }

        if (!((EventPlayer() != gv_team2_teamInfo.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    DialogControlSetVisible(gv_playerProperty[lv__player].lv_button, PlayerGroupAll(), false);
    if ((PlayerGroupHasPlayer(gv_team1_playerGroup.lv_users, lv__player) == true)) {
        PlayerGroupRemove(gv_team1_playerGroup.lv_users, lv__player);
        PlayerGroupRemove(gv_team1_playerGroup.lv_fightersWithNeutral, lv__player);
        PlayerGroupRemove(gv_team1_teamInfo.lv_fighterGroup, lv__player);
        gv_team1_teamInfo.lv_userNum -= 1;
        gv_team1_teamInfo.lv_fighterNum -= 1;
        if ((gv_team1_teamInfo.lv_fighterNum == 1)) {
            gf_ChangeFighterMode(1, ge_FighterMode__1F1B);
        }

        if ((gv_team1_teamInfo.lv_fighterNum == 0)) {
            gf_FighterDefeat(1);
        }

    }
    else {
        PlayerGroupRemove(gv_team2_playerGroup.lv_users, lv__player);
        PlayerGroupRemove(gv_team2_playerGroup.lv_fightersWithNeutral, lv__player);
        PlayerGroupRemove(gv_team2_teamInfo.lv_fighterGroup, lv__player);
        gv_team2_teamInfo.lv_userNum -= 1;
        gv_team2_teamInfo.lv_fighterNum -= 1;
        if ((gv_team2_teamInfo.lv_fighterNum == 1)) {
            gf_ChangeFighterMode(2, ge_FighterMode__1F1B);
        }

        if ((gv_team2_teamInfo.lv_fighterNum == 0)) {
            gf_FighterDefeat(2);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FighterQuit_Init () {
    gt_FighterQuit = TriggerCreate("gt_FighterQuit_Func");
    TriggerAddEventPlayerLeft(gt_FighterQuit, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team1_ResourceDisplay
//--------------------------------------------------------------------------------------------------
bool gt_Team1_ResourceDisplay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(300, 100, c_anchorTopRight, 220, 0, true);
    gv_team1_resourcePanel = DialogLastCreated();
    DialogSetImageVisible(gv_team1_resourcePanel, false);
    DialogSetVisible(gv_team1_resourcePanel, gv_team1_teamInfo.lv_fighterGroup, true);
    libNtve_gf_CreateDialogItemImage(gv_team1_resourcePanel, 30, 30, c_anchorTopLeft, 15, 15, StringToText(""), "Assets\\Textures\\ui_emoticons_minerals.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_team1_resourcePanel, 200, 50, c_anchorTopLeft, 50, 23, StringExternal("Param/Value/CEF41543"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_team1_teamInfo.lv_mineralText = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_team1_resourcePanel, 30, 30, c_anchorTopLeft, 150, 15, StringToText(""), "Assets\\Textures\\ui_emoticons_gas.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_team1_resourcePanel, 200, 50, c_anchorTopLeft, 185, 23, StringExternal("Param/Value/E33F8417"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_team1_teamInfo.lv_vespeneText = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team1_ResourceDisplay_Init () {
    gt_Team1_ResourceDisplay = TriggerCreate("gt_Team1_ResourceDisplay_Func");
    TriggerAddEventMapInit(gt_Team1_ResourceDisplay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team2_ResourceDisplay
//--------------------------------------------------------------------------------------------------
bool gt_Team2_ResourceDisplay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(300, 125, c_anchorTopRight, 220, 0, true);
    gv_team2_resourcePanel = DialogLastCreated();
    DialogSetImageVisible(gv_team2_resourcePanel, false);
    DialogSetVisible(gv_team2_resourcePanel, gv_team2_teamInfo.lv_fighterGroup, true);
    libNtve_gf_CreateDialogItemImage(gv_team2_resourcePanel, 30, 30, c_anchorTopLeft, 15, 15, StringToText(""), "Assets\\Textures\\ui_emoticons_minerals.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_team2_resourcePanel, 200, 50, c_anchorTopLeft, 50, 23, StringExternal("Param/Value/C0AF10B1"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_team2_teamInfo.lv_mineralText = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_team2_resourcePanel, 30, 30, c_anchorTopLeft, 150, 15, StringToText(""), "Assets\\Textures\\ui_emoticons_gas.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_team2_resourcePanel, 200, 50, c_anchorTopLeft, 185, 23, StringExternal("Param/Value/E539788E"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_team2_teamInfo.lv_vespeneText = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team2_ResourceDisplay_Init () {
    gt_Team2_ResourceDisplay = TriggerCreate("gt_Team2_ResourceDisplay_Func");
    TriggerAddEventMapInit(gt_Team2_ResourceDisplay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team1_BuilderMineralUpdate
//--------------------------------------------------------------------------------------------------
bool gt_Team1_BuilderMineralUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_team1_teamInfo.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_team1_teamInfo.lv_mineralText, IntToText(PlayerGetPropertyInt(gv_team1_teamInfo.lv_builder, c_playerPropMinerals)), gv_team1_teamInfo.lv_fighterGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team1_BuilderMineralUpdate_Init () {
    gt_Team1_BuilderMineralUpdate = TriggerCreate("gt_Team1_BuilderMineralUpdate_Func");
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMineralUpdate, 1, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMineralUpdate, 2, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMineralUpdate, 3, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMineralUpdate, 4, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMineralUpdate, 5, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMineralUpdate, 6, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMineralUpdate, 7, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMineralUpdate, 8, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMineralUpdate, 9, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMineralUpdate, 10, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMineralUpdate, 11, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMineralUpdate, 12, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMineralUpdate, 13, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMineralUpdate, 14, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team1_BuilderVespeneUpdate
//--------------------------------------------------------------------------------------------------
bool gt_Team1_BuilderVespeneUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_team1_teamInfo.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_team1_teamInfo.lv_vespeneText, IntToText(PlayerGetPropertyInt(gv_team1_teamInfo.lv_builder, c_playerPropVespene)), gv_team1_teamInfo.lv_fighterGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team1_BuilderVespeneUpdate_Init () {
    gt_Team1_BuilderVespeneUpdate = TriggerCreate("gt_Team1_BuilderVespeneUpdate_Func");
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderVespeneUpdate, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderVespeneUpdate, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderVespeneUpdate, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderVespeneUpdate, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderVespeneUpdate, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderVespeneUpdate, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderVespeneUpdate, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderVespeneUpdate, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderVespeneUpdate, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderVespeneUpdate, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderVespeneUpdate, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderVespeneUpdate, 12, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderVespeneUpdate, 13, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderVespeneUpdate, 14, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team1_FighterMineralUpdate
//--------------------------------------------------------------------------------------------------
bool gt_Team1_FighterMineralUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_team1_playerGroup.lv_fightersWithNeutral, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    PlayerModifyPropertyFixed(gv_team1_teamInfo.lv_builder, c_playerPropMinerals, c_playerPropOperAdd, PlayerGetPropertyFixed(lv__player, c_playerPropMinerals));
    TriggerEnable(TriggerGetCurrent(), false);
    PlayerModifyPropertyFixed(lv__player, c_playerPropMinerals, c_playerPropOperSetTo, 0.0);
    TriggerEnable(TriggerGetCurrent(), true);
    libNtve_gf_SetDialogItemText(gv_team1_teamInfo.lv_mineralText, IntToText(PlayerGetPropertyInt(gv_team1_teamInfo.lv_builder, c_playerPropMinerals)), gv_team1_teamInfo.lv_fighterGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team1_FighterMineralUpdate_Init () {
    gt_Team1_FighterMineralUpdate = TriggerCreate("gt_Team1_FighterMineralUpdate_Func");
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMineralUpdate, 1, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMineralUpdate, 2, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMineralUpdate, 3, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMineralUpdate, 4, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMineralUpdate, 5, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMineralUpdate, 6, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMineralUpdate, 7, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMineralUpdate, 8, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMineralUpdate, 9, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMineralUpdate, 10, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMineralUpdate, 11, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMineralUpdate, 12, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMineralUpdate, 13, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMineralUpdate, 14, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team1_FighterVespeneUpdate
//--------------------------------------------------------------------------------------------------
bool gt_Team1_FighterVespeneUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_team1_playerGroup.lv_fightersWithNeutral, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    PlayerModifyPropertyFixed(gv_team1_teamInfo.lv_builder, c_playerPropVespene, c_playerPropOperAdd, PlayerGetPropertyFixed(lv__player, c_playerPropVespene));
    TriggerEnable(TriggerGetCurrent(), false);
    PlayerModifyPropertyFixed(lv__player, c_playerPropVespene, c_playerPropOperSetTo, 0.0);
    TriggerEnable(TriggerGetCurrent(), true);
    libNtve_gf_SetDialogItemText(gv_team1_teamInfo.lv_vespeneText, IntToText(PlayerGetPropertyInt(gv_team1_teamInfo.lv_builder, c_playerPropVespene)), gv_team1_teamInfo.lv_fighterGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team1_FighterVespeneUpdate_Init () {
    gt_Team1_FighterVespeneUpdate = TriggerCreate("gt_Team1_FighterVespeneUpdate_Func");
    TriggerAddEventPlayerPropChange(gt_Team1_FighterVespeneUpdate, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterVespeneUpdate, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterVespeneUpdate, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterVespeneUpdate, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterVespeneUpdate, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterVespeneUpdate, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterVespeneUpdate, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterVespeneUpdate, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterVespeneUpdate, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterVespeneUpdate, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterVespeneUpdate, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterVespeneUpdate, 12, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterVespeneUpdate, 13, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterVespeneUpdate, 14, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team2_BuilderMineralUpdate
//--------------------------------------------------------------------------------------------------
bool gt_Team2_BuilderMineralUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_team2_teamInfo.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_team2_teamInfo.lv_mineralText, IntToText(PlayerGetPropertyInt(gv_team2_teamInfo.lv_builder, c_playerPropMinerals)), gv_team2_teamInfo.lv_fighterGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team2_BuilderMineralUpdate_Init () {
    gt_Team2_BuilderMineralUpdate = TriggerCreate("gt_Team2_BuilderMineralUpdate_Func");
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMineralUpdate, 1, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMineralUpdate, 2, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMineralUpdate, 3, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMineralUpdate, 4, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMineralUpdate, 5, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMineralUpdate, 6, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMineralUpdate, 7, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMineralUpdate, 8, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMineralUpdate, 9, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMineralUpdate, 10, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMineralUpdate, 11, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMineralUpdate, 12, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMineralUpdate, 13, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMineralUpdate, 14, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team2_BuilderVespeneUpdate
//--------------------------------------------------------------------------------------------------
bool gt_Team2_BuilderVespeneUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_team2_teamInfo.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_team2_teamInfo.lv_vespeneText, IntToText(PlayerGetPropertyInt(gv_team2_teamInfo.lv_builder, c_playerPropVespene)), gv_team2_teamInfo.lv_fighterGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team2_BuilderVespeneUpdate_Init () {
    gt_Team2_BuilderVespeneUpdate = TriggerCreate("gt_Team2_BuilderVespeneUpdate_Func");
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderVespeneUpdate, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderVespeneUpdate, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderVespeneUpdate, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderVespeneUpdate, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderVespeneUpdate, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderVespeneUpdate, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderVespeneUpdate, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderVespeneUpdate, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderVespeneUpdate, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderVespeneUpdate, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderVespeneUpdate, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderVespeneUpdate, 12, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderVespeneUpdate, 13, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderVespeneUpdate, 14, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team2_FighterMineralUpdate
//--------------------------------------------------------------------------------------------------
bool gt_Team2_FighterMineralUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_team2_playerGroup.lv_fightersWithNeutral, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    PlayerModifyPropertyFixed(gv_team2_teamInfo.lv_builder, c_playerPropMinerals, c_playerPropOperAdd, PlayerGetPropertyFixed(lv__player, c_playerPropMinerals));
    TriggerEnable(TriggerGetCurrent(), false);
    PlayerModifyPropertyFixed(lv__player, c_playerPropMinerals, c_playerPropOperSetTo, 0.0);
    TriggerEnable(TriggerGetCurrent(), true);
    libNtve_gf_SetDialogItemText(gv_team2_teamInfo.lv_mineralText, IntToText(PlayerGetPropertyInt(gv_team2_teamInfo.lv_builder, c_playerPropMinerals)), gv_team2_teamInfo.lv_fighterGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team2_FighterMineralUpdate_Init () {
    gt_Team2_FighterMineralUpdate = TriggerCreate("gt_Team2_FighterMineralUpdate_Func");
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMineralUpdate, 1, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMineralUpdate, 2, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMineralUpdate, 3, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMineralUpdate, 4, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMineralUpdate, 5, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMineralUpdate, 6, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMineralUpdate, 7, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMineralUpdate, 8, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMineralUpdate, 9, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMineralUpdate, 10, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMineralUpdate, 11, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMineralUpdate, 12, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMineralUpdate, 13, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMineralUpdate, 14, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team2_FighterVespeneUpdate
//--------------------------------------------------------------------------------------------------
bool gt_Team2_FighterVespeneUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_team2_playerGroup.lv_fightersWithNeutral, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    PlayerModifyPropertyFixed(gv_team2_teamInfo.lv_builder, c_playerPropVespene, c_playerPropOperAdd, PlayerGetPropertyFixed(lv__player, c_playerPropVespene));
    TriggerEnable(TriggerGetCurrent(), false);
    PlayerModifyPropertyFixed(lv__player, c_playerPropVespene, c_playerPropOperSetTo, 0.0);
    TriggerEnable(TriggerGetCurrent(), true);
    libNtve_gf_SetDialogItemText(gv_team2_teamInfo.lv_vespeneText, IntToText(PlayerGetPropertyInt(gv_team2_teamInfo.lv_builder, c_playerPropVespene)), gv_team2_teamInfo.lv_fighterGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team2_FighterVespeneUpdate_Init () {
    gt_Team2_FighterVespeneUpdate = TriggerCreate("gt_Team2_FighterVespeneUpdate_Func");
    TriggerAddEventPlayerPropChange(gt_Team2_FighterVespeneUpdate, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterVespeneUpdate, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterVespeneUpdate, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterVespeneUpdate, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterVespeneUpdate, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterVespeneUpdate, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterVespeneUpdate, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterVespeneUpdate, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterVespeneUpdate, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterVespeneUpdate, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterVespeneUpdate, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterVespeneUpdate, 12, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterVespeneUpdate, 13, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterVespeneUpdate, 14, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team1_BuilderMadeChange
//--------------------------------------------------------------------------------------------------
bool gt_Team1_BuilderMadeChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto087069CC_g;
    int auto087069CC_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_team1_teamInfo.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_team1_teamInfo.lv_supplyMade = PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesMade);
    TriggerEnable(gt_Team1_FighterMadeChange, false);
    auto087069CC_g = gv_team1_playerGroup.lv_fightersWithNeutral;
    auto087069CC_var = -1;
    while (true) {
        auto087069CC_var = PlayerGroupNextPlayer(auto087069CC_g, auto087069CC_var);
        if (auto087069CC_var < 0) { break; }
        PlayerModifyPropertyFixed(auto087069CC_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, gv_team1_teamInfo.lv_supplyMade);
    }
    TriggerEnable(gt_Team1_FighterMadeChange, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team1_BuilderMadeChange_Init () {
    gt_Team1_BuilderMadeChange = TriggerCreate("gt_Team1_BuilderMadeChange_Func");
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMadeChange, 1, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMadeChange, 2, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMadeChange, 3, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMadeChange, 4, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMadeChange, 5, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMadeChange, 6, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMadeChange, 7, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMadeChange, 8, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMadeChange, 9, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMadeChange, 10, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMadeChange, 11, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMadeChange, 12, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMadeChange, 13, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderMadeChange, 14, c_playerPropSuppliesMade);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team1_BuilderUsedChange
//--------------------------------------------------------------------------------------------------
bool gt_Team1_BuilderUsedChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9A2DBAF3_g;
    int auto9A2DBAF3_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_team1_teamInfo.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_team1_teamInfo.lv_supplyUsed = PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed);
    TriggerEnable(gt_Team1_FighterUsedChange, false);
    auto9A2DBAF3_g = gv_team1_playerGroup.lv_fightersWithNeutral;
    auto9A2DBAF3_var = -1;
    while (true) {
        auto9A2DBAF3_var = PlayerGroupNextPlayer(auto9A2DBAF3_g, auto9A2DBAF3_var);
        if (auto9A2DBAF3_var < 0) { break; }
        PlayerModifyPropertyFixed(auto9A2DBAF3_var, c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_team1_teamInfo.lv_supplyUsed);
    }
    TriggerEnable(gt_Team1_FighterUsedChange, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team1_BuilderUsedChange_Init () {
    gt_Team1_BuilderUsedChange = TriggerCreate("gt_Team1_BuilderUsedChange_Func");
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderUsedChange, 1, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderUsedChange, 2, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderUsedChange, 3, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderUsedChange, 4, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderUsedChange, 5, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderUsedChange, 6, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderUsedChange, 7, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderUsedChange, 8, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderUsedChange, 9, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderUsedChange, 10, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderUsedChange, 11, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderUsedChange, 12, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderUsedChange, 13, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_BuilderUsedChange, 14, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team1_FighterMadeChange
//--------------------------------------------------------------------------------------------------
bool gt_Team1_FighterMadeChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto47B6A1A0_g;
    int auto47B6A1A0_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_team1_playerGroup.lv_fightersWithNeutral, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_team1_teamInfo.lv_supplyMade = PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesMade);
    TriggerEnable(gt_Team1_BuilderMadeChange, false);
    TriggerEnable(gt_Team1_FighterMadeChange, false);
    auto47B6A1A0_g = gv_team1_playerGroup.lv_players;
    auto47B6A1A0_var = -1;
    while (true) {
        auto47B6A1A0_var = PlayerGroupNextPlayer(auto47B6A1A0_g, auto47B6A1A0_var);
        if (auto47B6A1A0_var < 0) { break; }
        PlayerModifyPropertyFixed(auto47B6A1A0_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, gv_team1_teamInfo.lv_supplyMade);
    }
    TriggerEnable(gt_Team1_BuilderMadeChange, true);
    TriggerEnable(gt_Team1_FighterMadeChange, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team1_FighterMadeChange_Init () {
    gt_Team1_FighterMadeChange = TriggerCreate("gt_Team1_FighterMadeChange_Func");
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMadeChange, 1, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMadeChange, 2, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMadeChange, 3, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMadeChange, 4, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMadeChange, 5, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMadeChange, 6, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMadeChange, 7, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMadeChange, 8, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMadeChange, 9, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMadeChange, 10, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMadeChange, 11, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMadeChange, 12, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMadeChange, 13, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterMadeChange, 14, c_playerPropSuppliesMade);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team1_FighterUsedChange
//--------------------------------------------------------------------------------------------------
bool gt_Team1_FighterUsedChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3A62394B_g;
    int auto3A62394B_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_team1_playerGroup.lv_fightersWithNeutral, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_team1_teamInfo.lv_supplyUsed = PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed);
    TriggerEnable(gt_Team1_BuilderUsedChange, false);
    TriggerEnable(gt_Team1_FighterUsedChange, false);
    auto3A62394B_g = gv_team1_playerGroup.lv_players;
    auto3A62394B_var = -1;
    while (true) {
        auto3A62394B_var = PlayerGroupNextPlayer(auto3A62394B_g, auto3A62394B_var);
        if (auto3A62394B_var < 0) { break; }
        PlayerModifyPropertyFixed(auto3A62394B_var, c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_team1_teamInfo.lv_supplyUsed);
    }
    TriggerEnable(gt_Team1_BuilderUsedChange, true);
    TriggerEnable(gt_Team1_FighterUsedChange, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team1_FighterUsedChange_Init () {
    gt_Team1_FighterUsedChange = TriggerCreate("gt_Team1_FighterUsedChange_Func");
    TriggerAddEventPlayerPropChange(gt_Team1_FighterUsedChange, 1, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterUsedChange, 2, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterUsedChange, 3, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterUsedChange, 4, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterUsedChange, 5, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterUsedChange, 6, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterUsedChange, 7, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterUsedChange, 8, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterUsedChange, 9, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterUsedChange, 10, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterUsedChange, 11, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterUsedChange, 12, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterUsedChange, 13, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team1_FighterUsedChange, 14, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team2_BuilderMadeChange
//--------------------------------------------------------------------------------------------------
bool gt_Team2_BuilderMadeChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto6FF94E53_g;
    int auto6FF94E53_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_team2_teamInfo.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_team2_teamInfo.lv_supplyMade = PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesMade);
    TriggerEnable(gt_Team2_FighterMadeChange, false);
    auto6FF94E53_g = gv_team2_playerGroup.lv_fightersWithNeutral;
    auto6FF94E53_var = -1;
    while (true) {
        auto6FF94E53_var = PlayerGroupNextPlayer(auto6FF94E53_g, auto6FF94E53_var);
        if (auto6FF94E53_var < 0) { break; }
        PlayerModifyPropertyFixed(auto6FF94E53_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, gv_team2_teamInfo.lv_supplyMade);
    }
    TriggerEnable(gt_Team2_FighterMadeChange, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team2_BuilderMadeChange_Init () {
    gt_Team2_BuilderMadeChange = TriggerCreate("gt_Team2_BuilderMadeChange_Func");
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMadeChange, 1, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMadeChange, 2, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMadeChange, 3, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMadeChange, 4, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMadeChange, 5, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMadeChange, 6, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMadeChange, 7, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMadeChange, 8, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMadeChange, 9, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMadeChange, 10, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMadeChange, 11, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMadeChange, 12, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMadeChange, 13, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderMadeChange, 14, c_playerPropSuppliesMade);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team2_BuilderUsedChange
//--------------------------------------------------------------------------------------------------
bool gt_Team2_BuilderUsedChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF93ECF3B_g;
    int autoF93ECF3B_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_team2_teamInfo.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_team2_teamInfo.lv_supplyUsed = PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed);
    TriggerEnable(gt_Team2_FighterUsedChange, false);
    autoF93ECF3B_g = gv_team2_playerGroup.lv_fightersWithNeutral;
    autoF93ECF3B_var = -1;
    while (true) {
        autoF93ECF3B_var = PlayerGroupNextPlayer(autoF93ECF3B_g, autoF93ECF3B_var);
        if (autoF93ECF3B_var < 0) { break; }
        PlayerModifyPropertyFixed(autoF93ECF3B_var, c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_team2_teamInfo.lv_supplyUsed);
    }
    TriggerEnable(gt_Team2_FighterUsedChange, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team2_BuilderUsedChange_Init () {
    gt_Team2_BuilderUsedChange = TriggerCreate("gt_Team2_BuilderUsedChange_Func");
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderUsedChange, 1, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderUsedChange, 2, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderUsedChange, 3, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderUsedChange, 4, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderUsedChange, 5, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderUsedChange, 6, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderUsedChange, 7, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderUsedChange, 8, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderUsedChange, 9, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderUsedChange, 10, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderUsedChange, 11, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderUsedChange, 12, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderUsedChange, 13, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_BuilderUsedChange, 14, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team2_FighterMadeChange
//--------------------------------------------------------------------------------------------------
bool gt_Team2_FighterMadeChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2CE8C1AD_g;
    int auto2CE8C1AD_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_team2_playerGroup.lv_fightersWithNeutral, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_team2_teamInfo.lv_supplyMade = PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesMade);
    TriggerEnable(gt_Team2_BuilderMadeChange, false);
    TriggerEnable(gt_Team2_FighterMadeChange, false);
    auto2CE8C1AD_g = gv_team2_playerGroup.lv_players;
    auto2CE8C1AD_var = -1;
    while (true) {
        auto2CE8C1AD_var = PlayerGroupNextPlayer(auto2CE8C1AD_g, auto2CE8C1AD_var);
        if (auto2CE8C1AD_var < 0) { break; }
        PlayerModifyPropertyFixed(auto2CE8C1AD_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, gv_team2_teamInfo.lv_supplyMade);
    }
    TriggerEnable(gt_Team2_BuilderMadeChange, true);
    TriggerEnable(gt_Team2_FighterMadeChange, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team2_FighterMadeChange_Init () {
    gt_Team2_FighterMadeChange = TriggerCreate("gt_Team2_FighterMadeChange_Func");
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMadeChange, 1, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMadeChange, 2, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMadeChange, 3, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMadeChange, 4, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMadeChange, 5, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMadeChange, 6, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMadeChange, 7, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMadeChange, 8, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMadeChange, 9, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMadeChange, 10, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMadeChange, 11, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMadeChange, 12, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMadeChange, 13, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterMadeChange, 14, c_playerPropSuppliesMade);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team2_FighterUsedChange
//--------------------------------------------------------------------------------------------------
bool gt_Team2_FighterUsedChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto95859B04_g;
    int auto95859B04_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_team2_playerGroup.lv_fightersWithNeutral, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_team2_teamInfo.lv_supplyUsed = PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed);
    TriggerEnable(gt_Team2_BuilderUsedChange, false);
    TriggerEnable(gt_Team2_FighterUsedChange, false);
    auto95859B04_g = gv_team2_playerGroup.lv_players;
    auto95859B04_var = -1;
    while (true) {
        auto95859B04_var = PlayerGroupNextPlayer(auto95859B04_g, auto95859B04_var);
        if (auto95859B04_var < 0) { break; }
        PlayerModifyPropertyFixed(auto95859B04_var, c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_team2_teamInfo.lv_supplyUsed);
    }
    TriggerEnable(gt_Team2_BuilderUsedChange, true);
    TriggerEnable(gt_Team2_FighterUsedChange, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team2_FighterUsedChange_Init () {
    gt_Team2_FighterUsedChange = TriggerCreate("gt_Team2_FighterUsedChange_Func");
    TriggerAddEventPlayerPropChange(gt_Team2_FighterUsedChange, 1, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterUsedChange, 2, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterUsedChange, 3, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterUsedChange, 4, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterUsedChange, 5, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterUsedChange, 6, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterUsedChange, 7, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterUsedChange, 8, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterUsedChange, 9, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterUsedChange, 10, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterUsedChange, 11, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterUsedChange, 12, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterUsedChange, 13, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_Team2_FighterUsedChange, 14, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ChangeMorphEnabledByBuilder
//--------------------------------------------------------------------------------------------------
bool gt_ChangeMorphEnabledByBuilder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__team;
    int lv__fighter;

    // Automatic Variable Declarations
    int autoB8A9F704_val;
    playergroup auto01E20BB5_g;
    playergroup auto3F23AED1_g;
    playergroup autoED992C42_g;
    playergroup auto98E383A0_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gf_GetRoleOfPlayer(EventPlayer()) == ge_Role_Builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    lv__team = gf_GetTeamOfPlayer(lv__player);
    autoB8A9F704_val = lv__team;
    if (autoB8A9F704_val == 1) {
        if ((gv_team1_teamMode.lv_morphEnabled == false)) {
            auto3F23AED1_g = gv_team1_playerGroup.lv_fightersWithNeutral;
            lv__fighter = -1;
            while (true) {
                lv__fighter = PlayerGroupNextPlayer(auto3F23AED1_g, lv__fighter);
                if (lv__fighter < 0) { break; }
                gf_AllowZergMorph(lv__fighter);
            }
            gv_team1_teamMode.lv_morphEnabled = true;
            UIDisplayMessage(gv_team1_playerGroup.lv_users, c_messageAreaSubtitle, gv_textMorphOn);
        }
        else {
            auto01E20BB5_g = gv_team1_playerGroup.lv_fightersWithNeutral;
            lv__fighter = -1;
            while (true) {
                lv__fighter = PlayerGroupNextPlayer(auto01E20BB5_g, lv__fighter);
                if (lv__fighter < 0) { break; }
                gf_DisallowZergMorph(lv__fighter);
            }
            gv_team1_teamMode.lv_morphEnabled = false;
            UIDisplayMessage(gv_team1_playerGroup.lv_users, c_messageAreaSubtitle, gv_textMorphOff);
        }
    }
    else if (autoB8A9F704_val == 2) {
        if ((gv_team2_teamMode.lv_morphEnabled == false)) {
            auto98E383A0_g = gv_team2_playerGroup.lv_fightersWithNeutral;
            lv__fighter = -1;
            while (true) {
                lv__fighter = PlayerGroupNextPlayer(auto98E383A0_g, lv__fighter);
                if (lv__fighter < 0) { break; }
                gf_AllowZergMorph(lv__fighter);
            }
            gv_team2_teamMode.lv_morphEnabled = true;
            UIDisplayMessage(gv_team2_playerGroup.lv_users, c_messageAreaSubtitle, gv_textMorphOn);
        }
        else {
            autoED992C42_g = gv_team2_playerGroup.lv_fightersWithNeutral;
            lv__fighter = -1;
            while (true) {
                lv__fighter = PlayerGroupNextPlayer(autoED992C42_g, lv__fighter);
                if (lv__fighter < 0) { break; }
                gf_DisallowZergMorph(lv__fighter);
            }
            gv_team2_teamMode.lv_morphEnabled = false;
            UIDisplayMessage(gv_team2_playerGroup.lv_users, c_messageAreaSubtitle, gv_textMorphOff);
        }
    }
    else {
    }
    gf_UpdateButtonMorphForTeam(lv__team);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeMorphEnabledByBuilder_Init () {
    gt_ChangeMorphEnabledByBuilder = TriggerCreate("gt_ChangeMorphEnabledByBuilder_Func");
    TriggerAddEventChatMessage(gt_ChangeMorphEnabledByBuilder, c_playerAny, ("-m"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShareStructure
//--------------------------------------------------------------------------------------------------
bool gt_ShareStructure_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__structure;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUnitType() == "SensorTower") || (libNtve_gf_TriggeringProgressUnitType() == "CreepTumorQueen")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__structure = EventUnitProgressUnit();
    if ((UnitGetOwner(lv__structure) == gv_team1_teamInfo.lv_builder)) {
        UnitSetOwner(lv__structure, 13, false);
    }
    else {
        UnitSetOwner(lv__structure, 14, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShareStructure_Init () {
    gt_ShareStructure = TriggerCreate("gt_ShareStructure_Func");
    TriggerAddEventUnitConstructProgress(gt_ShareStructure, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShareUpgrade
//--------------------------------------------------------------------------------------------------
bool gt_ShareUpgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv__upgrade;

    // Automatic Variable Declarations
    playergroup autoC320A639_g;
    int autoC320A639_var;
    playergroup autoE1216329_g;
    int autoE1216329_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv__upgrade = libNtve_gf_TriggeringProgressUpgrade();
    if ((UnitGetOwner(EventUnit()) == gv_team1_teamInfo.lv_builder)) {
        autoE1216329_g = gv_team1_playerGroup.lv_fightersWithNeutral;
        autoE1216329_var = -1;
        while (true) {
            autoE1216329_var = PlayerGroupNextPlayer(autoE1216329_g, autoE1216329_var);
            if (autoE1216329_var < 0) { break; }
            TechTreeUpgradeAddLevel(autoE1216329_var, lv__upgrade, 1);
        }
    }
    else {
        autoC320A639_g = gv_team2_playerGroup.lv_fightersWithNeutral;
        autoC320A639_var = -1;
        while (true) {
            autoC320A639_var = PlayerGroupNextPlayer(autoC320A639_g, autoC320A639_var);
            if (autoC320A639_var < 0) { break; }
            TechTreeUpgradeAddLevel(autoC320A639_var, lv__upgrade, 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShareUpgrade_Init () {
    gt_ShareUpgrade = TriggerCreate("gt_ShareUpgrade_Func");
    TriggerAddEventUnitResearchProgress(gt_ShareUpgrade, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddArmory
//--------------------------------------------------------------------------------------------------
bool gt_AddArmory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3BCB44A7_g;
    int auto3BCB44A7_var;
    playergroup autoDC167583_g;
    int autoDC167583_var;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "Armory"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnitProgressUnit()) == gv_team1_teamInfo.lv_builder)) {
        gv_team1_sharedUnit.lv_armory += 1;
        if ((gv_team1_sharedUnit.lv_armory == 1)) {
            autoDC167583_g = gv_team1_playerGroup.lv_fightersWithNeutral;
            autoDC167583_var = -1;
            while (true) {
                autoDC167583_var = PlayerGroupNextPlayer(autoDC167583_g, autoDC167583_var);
                if (autoDC167583_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoDC167583_var, "HaveArmory", false);
            }
        }

    }
    else {
        gv_team2_sharedUnit.lv_armory += 1;
        if ((gv_team2_sharedUnit.lv_armory == 1)) {
            auto3BCB44A7_g = gv_team2_playerGroup.lv_fightersWithNeutral;
            auto3BCB44A7_var = -1;
            while (true) {
                auto3BCB44A7_var = PlayerGroupNextPlayer(auto3BCB44A7_g, auto3BCB44A7_var);
                if (auto3BCB44A7_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto3BCB44A7_var, "HaveArmory", false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddArmory_Init () {
    gt_AddArmory = TriggerCreate("gt_AddArmory_Func");
    TriggerAddEventUnitConstructProgress(gt_AddArmory, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DecArmory
//--------------------------------------------------------------------------------------------------
bool gt_DecArmory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto82FB00A8_g;
    int auto82FB00A8_var;
    playergroup autoA46B3BBE_g;
    int autoA46B3BBE_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Armory"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_team1_teamInfo.lv_builder)) {
        gv_team1_sharedUnit.lv_armory -= 1;
        if ((gv_team1_sharedUnit.lv_armory == 0)) {
            autoA46B3BBE_g = gv_team1_playerGroup.lv_fightersWithNeutral;
            autoA46B3BBE_var = -1;
            while (true) {
                autoA46B3BBE_var = PlayerGroupNextPlayer(autoA46B3BBE_g, autoA46B3BBE_var);
                if (autoA46B3BBE_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoA46B3BBE_var, "HaveArmory", true);
            }
        }

    }
    else {
        gv_team2_sharedUnit.lv_armory -= 1;
        if ((gv_team2_sharedUnit.lv_armory == 0)) {
            auto82FB00A8_g = gv_team2_playerGroup.lv_fightersWithNeutral;
            auto82FB00A8_var = -1;
            while (true) {
                auto82FB00A8_var = PlayerGroupNextPlayer(auto82FB00A8_g, auto82FB00A8_var);
                if (auto82FB00A8_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto82FB00A8_var, "HaveArmory", true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecArmory_Init () {
    gt_DecArmory = TriggerCreate("gt_DecArmory_Func");
    TriggerAddEventUnitDied(gt_DecArmory, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddBanelingNest
//--------------------------------------------------------------------------------------------------
bool gt_AddBanelingNest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoFB0C25C7_g;
    int autoFB0C25C7_var;
    playergroup auto1634872C_g;
    int auto1634872C_var;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "BanelingNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnitProgressUnit()) == gv_team1_teamInfo.lv_builder)) {
        gv_team1_sharedUnit.lv_banelingNest += 1;
        if ((gv_team1_sharedUnit.lv_banelingNest == 1)) {
            auto1634872C_g = gv_team1_playerGroup.lv_fightersWithNeutral;
            auto1634872C_var = -1;
            while (true) {
                auto1634872C_var = PlayerGroupNextPlayer(auto1634872C_g, auto1634872C_var);
                if (auto1634872C_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto1634872C_var, "HaveBanelingNest", false);
            }
        }

    }
    else {
        gv_team2_sharedUnit.lv_banelingNest += 1;
        if ((gv_team2_sharedUnit.lv_banelingNest == 1)) {
            autoFB0C25C7_g = gv_team2_playerGroup.lv_fightersWithNeutral;
            autoFB0C25C7_var = -1;
            while (true) {
                autoFB0C25C7_var = PlayerGroupNextPlayer(autoFB0C25C7_g, autoFB0C25C7_var);
                if (autoFB0C25C7_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoFB0C25C7_var, "HaveBanelingNest", false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddBanelingNest_Init () {
    gt_AddBanelingNest = TriggerCreate("gt_AddBanelingNest_Func");
    TriggerAddEventUnitConstructProgress(gt_AddBanelingNest, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DecBanelingNest
//--------------------------------------------------------------------------------------------------
bool gt_DecBanelingNest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9501C1FA_g;
    int auto9501C1FA_var;
    playergroup autoBC7342D0_g;
    int autoBC7342D0_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "BanelingNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_team1_teamInfo.lv_builder)) {
        gv_team1_sharedUnit.lv_banelingNest -= 1;
        if ((gv_team1_sharedUnit.lv_banelingNest == 0)) {
            autoBC7342D0_g = gv_team1_playerGroup.lv_fightersWithNeutral;
            autoBC7342D0_var = -1;
            while (true) {
                autoBC7342D0_var = PlayerGroupNextPlayer(autoBC7342D0_g, autoBC7342D0_var);
                if (autoBC7342D0_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoBC7342D0_var, "HaveBanelingNest", true);
            }
        }

    }
    else {
        gv_team2_sharedUnit.lv_banelingNest -= 1;
        if ((gv_team2_sharedUnit.lv_banelingNest == 0)) {
            auto9501C1FA_g = gv_team2_playerGroup.lv_fightersWithNeutral;
            auto9501C1FA_var = -1;
            while (true) {
                auto9501C1FA_var = PlayerGroupNextPlayer(auto9501C1FA_g, auto9501C1FA_var);
                if (auto9501C1FA_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto9501C1FA_var, "HaveBanelingNest", true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecBanelingNest_Init () {
    gt_DecBanelingNest = TriggerCreate("gt_DecBanelingNest_Func");
    TriggerAddEventUnitDied(gt_DecBanelingNest, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddRoachWarren
//--------------------------------------------------------------------------------------------------
bool gt_AddRoachWarren_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB5C902AE_g;
    int autoB5C902AE_var;
    playergroup autoBD20EAB9_g;
    int autoBD20EAB9_var;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "RoachWarren"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnitProgressUnit()) == gv_team1_teamInfo.lv_builder)) {
        gv_team1_sharedUnit.lv_roachWarren += 1;
        if ((gv_team1_sharedUnit.lv_roachWarren == 1)) {
            autoBD20EAB9_g = gv_team1_playerGroup.lv_fightersWithNeutral;
            autoBD20EAB9_var = -1;
            while (true) {
                autoBD20EAB9_var = PlayerGroupNextPlayer(autoBD20EAB9_g, autoBD20EAB9_var);
                if (autoBD20EAB9_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoBD20EAB9_var, "HaveBanelingNest2", false);
            }
        }

    }
    else {
        gv_team2_sharedUnit.lv_roachWarren += 1;
        if ((gv_team2_sharedUnit.lv_roachWarren == 1)) {
            autoB5C902AE_g = gv_team2_playerGroup.lv_fightersWithNeutral;
            autoB5C902AE_var = -1;
            while (true) {
                autoB5C902AE_var = PlayerGroupNextPlayer(autoB5C902AE_g, autoB5C902AE_var);
                if (autoB5C902AE_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoB5C902AE_var, "HaveBanelingNest2", false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddRoachWarren_Init () {
    gt_AddRoachWarren = TriggerCreate("gt_AddRoachWarren_Func");
    TriggerAddEventUnitConstructProgress(gt_AddRoachWarren, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DecRoachWarren
//--------------------------------------------------------------------------------------------------
bool gt_DecRoachWarren_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB01CAE77_g;
    int autoB01CAE77_var;
    playergroup auto722A23D8_g;
    int auto722A23D8_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "RoachWarren"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_team1_teamInfo.lv_builder)) {
        gv_team1_sharedUnit.lv_roachWarren -= 1;
        if ((gv_team1_sharedUnit.lv_roachWarren == 0)) {
            auto722A23D8_g = gv_team1_playerGroup.lv_fightersWithNeutral;
            auto722A23D8_var = -1;
            while (true) {
                auto722A23D8_var = PlayerGroupNextPlayer(auto722A23D8_g, auto722A23D8_var);
                if (auto722A23D8_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto722A23D8_var, "HaveBanelingNest2", true);
            }
        }

    }
    else {
        gv_team2_sharedUnit.lv_roachWarren -= 1;
        if ((gv_team2_sharedUnit.lv_roachWarren == 0)) {
            autoB01CAE77_g = gv_team2_playerGroup.lv_fightersWithNeutral;
            autoB01CAE77_var = -1;
            while (true) {
                autoB01CAE77_var = PlayerGroupNextPlayer(autoB01CAE77_g, autoB01CAE77_var);
                if (autoB01CAE77_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoB01CAE77_var, "HaveBanelingNest2", true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecRoachWarren_Init () {
    gt_DecRoachWarren = TriggerCreate("gt_DecRoachWarren_Func");
    TriggerAddEventUnitDied(gt_DecRoachWarren, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddLair
//--------------------------------------------------------------------------------------------------
bool gt_AddLair_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto1F2FB09E_g;
    int auto1F2FB09E_var;
    playergroup autoBFA4625E_g;
    int autoBFA4625E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_team1_teamInfo.lv_builder)) {
        gv_team1_sharedUnit.lv_lair += 1;
        if ((gv_team1_sharedUnit.lv_lair == 1)) {
            autoBFA4625E_g = gv_team1_playerGroup.lv_fightersWithNeutral;
            autoBFA4625E_var = -1;
            while (true) {
                autoBFA4625E_var = PlayerGroupNextPlayer(autoBFA4625E_g, autoBFA4625E_var);
                if (autoBFA4625E_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoBFA4625E_var, "HaveLair", false);
                TechTreeSpecificRequirementEnable(autoBFA4625E_var, "UseOverseerMorph", false);
            }
        }

    }
    else {
        gv_team2_sharedUnit.lv_lair += 1;
        if ((gv_team2_sharedUnit.lv_lair == 1)) {
            auto1F2FB09E_g = gv_team2_playerGroup.lv_fightersWithNeutral;
            auto1F2FB09E_var = -1;
            while (true) {
                auto1F2FB09E_var = PlayerGroupNextPlayer(auto1F2FB09E_g, auto1F2FB09E_var);
                if (auto1F2FB09E_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto1F2FB09E_var, "HaveLair", false);
                TechTreeSpecificRequirementEnable(auto1F2FB09E_var, "UseOverseerMorph", false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddLair_Init () {
    gt_AddLair = TriggerCreate("gt_AddLair_Func");
    TriggerAddEventUnitAbility(gt_AddLair, null, AbilityCommand("UpgradeToLair", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DecLair
//--------------------------------------------------------------------------------------------------
bool gt_DecLair_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto101D1A53_g;
    int auto101D1A53_var;
    playergroup autoD5B0E244_g;
    int autoD5B0E244_var;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Lair") || (UnitGetType(EventUnit()) == "Hive")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_team1_teamInfo.lv_builder)) {
        gv_team1_sharedUnit.lv_lair -= 1;
        if ((gv_team1_sharedUnit.lv_lair == 0)) {
            autoD5B0E244_g = gv_team1_playerGroup.lv_fightersWithNeutral;
            autoD5B0E244_var = -1;
            while (true) {
                autoD5B0E244_var = PlayerGroupNextPlayer(autoD5B0E244_g, autoD5B0E244_var);
                if (autoD5B0E244_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoD5B0E244_var, "HaveLair", true);
                TechTreeSpecificRequirementEnable(autoD5B0E244_var, "UseOverseerMorph", true);
            }
        }

    }
    else {
        gv_team2_sharedUnit.lv_lair -= 1;
        if ((gv_team2_sharedUnit.lv_lair == 0)) {
            auto101D1A53_g = gv_team2_playerGroup.lv_fightersWithNeutral;
            auto101D1A53_var = -1;
            while (true) {
                auto101D1A53_var = PlayerGroupNextPlayer(auto101D1A53_g, auto101D1A53_var);
                if (auto101D1A53_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto101D1A53_var, "HaveLair", true);
                TechTreeSpecificRequirementEnable(auto101D1A53_var, "UseOverseerMorph", true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecLair_Init () {
    gt_DecLair = TriggerCreate("gt_DecLair_Func");
    TriggerAddEventUnitDied(gt_DecLair, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddLurkerDen
//--------------------------------------------------------------------------------------------------
bool gt_AddLurkerDen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoDD8AC918_g;
    int autoDD8AC918_var;
    playergroup auto0B57E2EA_g;
    int auto0B57E2EA_var;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "LurkerDenMP"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnitProgressUnit()) == gv_team1_teamInfo.lv_builder)) {
        gv_team1_sharedUnit.lv_lurkerDen += 1;
        if ((gv_team1_sharedUnit.lv_lurkerDen == 1)) {
            auto0B57E2EA_g = gv_team1_playerGroup.lv_fightersWithNeutral;
            auto0B57E2EA_var = -1;
            while (true) {
                auto0B57E2EA_var = PlayerGroupNextPlayer(auto0B57E2EA_g, auto0B57E2EA_var);
                if (auto0B57E2EA_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto0B57E2EA_var, "HaveLurkerDen", false);
            }
        }

    }
    else {
        gv_team2_sharedUnit.lv_lurkerDen += 1;
        if ((gv_team2_sharedUnit.lv_lurkerDen == 1)) {
            autoDD8AC918_g = gv_team2_playerGroup.lv_fightersWithNeutral;
            autoDD8AC918_var = -1;
            while (true) {
                autoDD8AC918_var = PlayerGroupNextPlayer(autoDD8AC918_g, autoDD8AC918_var);
                if (autoDD8AC918_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoDD8AC918_var, "HaveLurkerDen", false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddLurkerDen_Init () {
    gt_AddLurkerDen = TriggerCreate("gt_AddLurkerDen_Func");
    TriggerAddEventUnitConstructProgress(gt_AddLurkerDen, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DecLurkerDen
//--------------------------------------------------------------------------------------------------
bool gt_DecLurkerDen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto839F5BA6_g;
    int auto839F5BA6_var;
    playergroup autoB0BB9A99_g;
    int autoB0BB9A99_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "LurkerDenMP"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_team1_teamInfo.lv_builder)) {
        gv_team1_sharedUnit.lv_lurkerDen -= 1;
        if ((gv_team1_sharedUnit.lv_lurkerDen == 0)) {
            autoB0BB9A99_g = gv_team1_playerGroup.lv_fightersWithNeutral;
            autoB0BB9A99_var = -1;
            while (true) {
                autoB0BB9A99_var = PlayerGroupNextPlayer(autoB0BB9A99_g, autoB0BB9A99_var);
                if (autoB0BB9A99_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoB0BB9A99_var, "HaveLurkerDen", true);
            }
        }

    }
    else {
        gv_team2_sharedUnit.lv_lurkerDen -= 1;
        if ((gv_team2_sharedUnit.lv_lurkerDen == 0)) {
            auto839F5BA6_g = gv_team2_playerGroup.lv_fightersWithNeutral;
            auto839F5BA6_var = -1;
            while (true) {
                auto839F5BA6_var = PlayerGroupNextPlayer(auto839F5BA6_g, auto839F5BA6_var);
                if (auto839F5BA6_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto839F5BA6_var, "HaveLurkerDen", true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecLurkerDen_Init () {
    gt_DecLurkerDen = TriggerCreate("gt_DecLurkerDen_Func");
    TriggerAddEventUnitDied(gt_DecLurkerDen, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddGreaterSpire
//--------------------------------------------------------------------------------------------------
bool gt_AddGreaterSpire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7480F6B9_g;
    int auto7480F6B9_var;
    playergroup autoCD758636_g;
    int autoCD758636_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_team1_teamInfo.lv_builder)) {
        gv_team1_sharedUnit.lv_greaterSpire += 1;
        if ((gv_team1_sharedUnit.lv_greaterSpire == 1)) {
            autoCD758636_g = gv_team1_playerGroup.lv_fightersWithNeutral;
            autoCD758636_var = -1;
            while (true) {
                autoCD758636_var = PlayerGroupNextPlayer(autoCD758636_g, autoCD758636_var);
                if (autoCD758636_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoCD758636_var, "HaveGreaterSpire", false);
            }
        }

    }
    else {
        gv_team2_sharedUnit.lv_greaterSpire += 1;
        if ((gv_team2_sharedUnit.lv_greaterSpire == 1)) {
            auto7480F6B9_g = gv_team2_playerGroup.lv_fightersWithNeutral;
            auto7480F6B9_var = -1;
            while (true) {
                auto7480F6B9_var = PlayerGroupNextPlayer(auto7480F6B9_g, auto7480F6B9_var);
                if (auto7480F6B9_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto7480F6B9_var, "HaveGreaterSpire", false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddGreaterSpire_Init () {
    gt_AddGreaterSpire = TriggerCreate("gt_AddGreaterSpire_Func");
    TriggerAddEventUnitAbility(gt_AddGreaterSpire, null, AbilityCommand("UpgradeToGreaterSpire", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DecGreaterSpire
//--------------------------------------------------------------------------------------------------
bool gt_DecGreaterSpire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoCD17B6FB_g;
    int autoCD17B6FB_var;
    playergroup autoFB0C9109_g;
    int autoFB0C9109_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GreaterSpire"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_team1_teamInfo.lv_builder)) {
        gv_team1_sharedUnit.lv_greaterSpire -= 1;
        if ((gv_team1_sharedUnit.lv_greaterSpire == 0)) {
            autoFB0C9109_g = gv_team1_playerGroup.lv_fightersWithNeutral;
            autoFB0C9109_var = -1;
            while (true) {
                autoFB0C9109_var = PlayerGroupNextPlayer(autoFB0C9109_g, autoFB0C9109_var);
                if (autoFB0C9109_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoFB0C9109_var, "HaveGreaterSpire", true);
            }
        }

    }
    else {
        gv_team2_sharedUnit.lv_greaterSpire -= 1;
        if ((gv_team2_sharedUnit.lv_greaterSpire == 0)) {
            autoCD17B6FB_g = gv_team2_playerGroup.lv_fightersWithNeutral;
            autoCD17B6FB_var = -1;
            while (true) {
                autoCD17B6FB_var = PlayerGroupNextPlayer(autoCD17B6FB_g, autoCD17B6FB_var);
                if (autoCD17B6FB_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoCD17B6FB_var, "HaveGreaterSpire", true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecGreaterSpire_Init () {
    gt_DecGreaterSpire = TriggerCreate("gt_DecGreaterSpire_Func");
    TriggerAddEventUnitDied(gt_DecGreaterSpire, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddGreaterSpireBW
//--------------------------------------------------------------------------------------------------
bool gt_AddGreaterSpireBW_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7277E04E_g;
    int auto7277E04E_var;
    playergroup auto34FEF6C7_g;
    int auto34FEF6C7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_team1_teamInfo.lv_builder)) {
        gv_team1_sharedUnit.lv_greaterSpireBW += 1;
        if ((gv_team1_sharedUnit.lv_greaterSpireBW == 1)) {
            auto34FEF6C7_g = gv_team1_playerGroup.lv_fightersWithNeutral;
            auto34FEF6C7_var = -1;
            while (true) {
                auto34FEF6C7_var = PlayerGroupNextPlayer(auto34FEF6C7_g, auto34FEF6C7_var);
                if (auto34FEF6C7_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto34FEF6C7_var, "DevourerSCBW", false);
                TechTreeSpecificRequirementEnable(auto34FEF6C7_var, "GuardianSCBW", false);
            }
        }

    }
    else {
        gv_team2_sharedUnit.lv_greaterSpireBW += 1;
        if ((gv_team2_sharedUnit.lv_greaterSpireBW == 1)) {
            auto7277E04E_g = gv_team2_playerGroup.lv_fightersWithNeutral;
            auto7277E04E_var = -1;
            while (true) {
                auto7277E04E_var = PlayerGroupNextPlayer(auto7277E04E_g, auto7277E04E_var);
                if (auto7277E04E_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto7277E04E_var, "DevourerSCBW", false);
                TechTreeSpecificRequirementEnable(auto7277E04E_var, "GuardianSCBW", false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddGreaterSpireBW_Init () {
    gt_AddGreaterSpireBW = TriggerCreate("gt_AddGreaterSpireBW_Func");
    TriggerAddEventUnitAbility(gt_AddGreaterSpireBW, null, AbilityCommand("GreaterSpireSCBW@Morph", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DecGreaterSpireBW
//--------------------------------------------------------------------------------------------------
bool gt_DecGreaterSpireBW_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoCF020829_g;
    int autoCF020829_var;
    playergroup auto04EC120C_g;
    int auto04EC120C_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GreaterSpireSCBW"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_team1_teamInfo.lv_builder)) {
        gv_team1_sharedUnit.lv_greaterSpireBW -= 1;
        if ((gv_team1_sharedUnit.lv_greaterSpireBW == 0)) {
            auto04EC120C_g = gv_team1_playerGroup.lv_fightersWithNeutral;
            auto04EC120C_var = -1;
            while (true) {
                auto04EC120C_var = PlayerGroupNextPlayer(auto04EC120C_g, auto04EC120C_var);
                if (auto04EC120C_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto04EC120C_var, "DevourerSCBW", true);
                TechTreeSpecificRequirementEnable(auto04EC120C_var, "GuardianSCBW", true);
            }
        }

    }
    else {
        gv_team2_sharedUnit.lv_greaterSpireBW -= 1;
        if ((gv_team2_sharedUnit.lv_greaterSpireBW == 0)) {
            autoCF020829_g = gv_team2_playerGroup.lv_fightersWithNeutral;
            autoCF020829_var = -1;
            while (true) {
                autoCF020829_var = PlayerGroupNextPlayer(autoCF020829_g, autoCF020829_var);
                if (autoCF020829_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoCF020829_var, "DevourerSCBW", true);
                TechTreeSpecificRequirementEnable(autoCF020829_var, "GuardianSCBW", true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecGreaterSpireBW_Init () {
    gt_DecGreaterSpireBW = TriggerCreate("gt_DecGreaterSpireBW_Func");
    TriggerAddEventUnitDied(gt_DecGreaterSpireBW, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TrainGhostComplete
//--------------------------------------------------------------------------------------------------
bool gt_TrainGhostComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__chargeCount;
    unit lv__ghost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUnitType() == "Ghost") || (libNtve_gf_TriggeringProgressUnitType() == "GhostAlternate") || (libNtve_gf_TriggeringProgressUnitType() == "GhostNova")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__ghost = EventUnitProgressUnit();
    if ((UnitGetOwner(EventUnit()) == gv_team1_teamInfo.lv_builder)) {
        UnitGroupAdd(gv_team1_unitGroup.lv_ghostGroup, lv__ghost);
        if ((gv_team1_sharedUnit.lv_nuke >= 1)) {
            lv__chargeCount -= gv_team1_sharedUnit.lv_nuke;
            UnitAbilityAddChargeUsed(lv__ghost, "TacNukeStrike", "Abil/TacNukeStrike", lv__chargeCount);
        }

    }
    else {
        UnitGroupAdd(gv_team2_unitGroup.lv_ghostGroup, lv__ghost);
        if ((gv_team2_sharedUnit.lv_nuke >= 1)) {
            lv__chargeCount -= gv_team2_sharedUnit.lv_nuke;
            UnitAbilityAddChargeUsed(lv__ghost, "TacNukeStrike", "Abil/TacNukeStrike", lv__chargeCount);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainGhostComplete_Init () {
    gt_TrainGhostComplete = TriggerCreate("gt_TrainGhostComplete_Func");
    TriggerAddEventUnitTrainProgress(gt_TrainGhostComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddNuke
//--------------------------------------------------------------------------------------------------
bool gt_AddNuke_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    unit lv__unit;

    // Automatic Variable Declarations
    unitgroup autoDC8435F9_g;
    int autoDC8435F9_u;
    unitgroup auto9D32BF0A_g;
    int auto9D32BF0A_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "Nuke"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_team1_teamInfo.lv_builder)) {
        gv_team1_sharedUnit.lv_nuke += 1;
        auto9D32BF0A_g = gv_team1_unitGroup.lv_ghostGroup;
        auto9D32BF0A_u = UnitGroupCount(auto9D32BF0A_g, c_unitCountAll);
        for (;; auto9D32BF0A_u -= 1) {
            lv__unit = UnitGroupUnitFromEnd(auto9D32BF0A_g, auto9D32BF0A_u);
            if (lv__unit == null) { break; }
            UnitAbilityAddChargeUsed(lv__unit, "TacNukeStrike", "Abil/TacNukeStrike", -1.0);
        }
    }
    else {
        gv_team2_sharedUnit.lv_nuke += 1;
        autoDC8435F9_g = gv_team2_unitGroup.lv_ghostGroup;
        autoDC8435F9_u = UnitGroupCount(autoDC8435F9_g, c_unitCountAll);
        for (;; autoDC8435F9_u -= 1) {
            lv__unit = UnitGroupUnitFromEnd(autoDC8435F9_g, autoDC8435F9_u);
            if (lv__unit == null) { break; }
            UnitAbilityAddChargeUsed(lv__unit, "TacNukeStrike", "Abil/TacNukeStrike", -1.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddNuke_Init () {
    gt_AddNuke = TriggerCreate("gt_AddNuke_Func");
    TriggerAddEventUnitArmMagazineProgress(gt_AddNuke, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UseNuke
//--------------------------------------------------------------------------------------------------
bool gt_UseNuke_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__unit;
    int lv__triggeringPlayer;
    int lv__player;

    // Automatic Variable Declarations
    unitgroup autoB73DD721_g;
    int autoB73DD721_u;
    unitgroup autoA880A39A_g;
    int autoA880A39A_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv__unit = EventUnit();
    lv__triggeringPlayer = UnitGetOwner(EventUnit());
    if (((PlayerGroupHasPlayer(gv_team1_playerGroup.lv_fightersWithNeutral, lv__triggeringPlayer) == true))) {
        gv_team1_sharedUnit.lv_nuke -= 1;
        PlayerCreateEffectPoint(gv_team1_teamInfo.lv_builder, "NukeNF1B", Point(0.0, 0.0));
        autoA880A39A_g = gv_team1_unitGroup.lv_ghostGroup;
        autoA880A39A_u = UnitGroupCount(autoA880A39A_g, c_unitCountAll);
        for (;; autoA880A39A_u -= 1) {
            lv__unit = UnitGroupUnitFromEnd(autoA880A39A_g, autoA880A39A_u);
            if (lv__unit == null) { break; }
            if ((lv__unit != EventUnit())) {
                UnitAbilityAddChargeUsed(lv__unit, "TacNukeStrike", "Abil/TacNukeStrike", 1.0);
            }

        }
    }
    else {
        gv_team2_sharedUnit.lv_nuke -= 1;
        PlayerCreateEffectPoint(gv_team2_teamInfo.lv_builder, "NukeNF1B", Point(0.0, 0.0));
        autoB73DD721_g = gv_team2_unitGroup.lv_ghostGroup;
        autoB73DD721_u = UnitGroupCount(autoB73DD721_g, c_unitCountAll);
        for (;; autoB73DD721_u -= 1) {
            lv__unit = UnitGroupUnitFromEnd(autoB73DD721_g, autoB73DD721_u);
            if (lv__unit == null) { break; }
            if ((lv__unit != EventUnit())) {
                UnitAbilityAddChargeUsed(lv__unit, "TacNukeStrike", "Abil/TacNukeStrike", 1.0);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UseNuke_Init () {
    gt_UseNuke = TriggerCreate("gt_UseNuke_Func");
    TriggerAddEventUnitAbility(gt_UseNuke, null, AbilityCommand("TacNukeStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TrainGhostBWComplete
//--------------------------------------------------------------------------------------------------
bool gt_TrainGhostBWComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__chargeCount;
    unit lv__ghost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "GhostSCBW"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__ghost = EventUnitProgressUnit();
    if ((UnitGetOwner(EventUnit()) == gv_team1_teamInfo.lv_builder)) {
        UnitGroupAdd(gv_team1_unitGroup.lv_ghostGroup, lv__ghost);
        if ((gv_team1_sharedUnit.lv_nuke >= 1)) {
            lv__chargeCount -= gv_team1_sharedUnit.lv_nuke;
            UnitAbilityAddChargeUsed(lv__ghost, "GhostSCBWNuclearStrike", "Abil/GhostSCBWNuclearStrike", lv__chargeCount);
        }

    }
    else {
        UnitGroupAdd(gv_team2_unitGroup.lv_ghostGroup, lv__ghost);
        if ((gv_team2_sharedUnit.lv_nuke >= 1)) {
            lv__chargeCount -= gv_team2_sharedUnit.lv_nuke;
            UnitAbilityAddChargeUsed(lv__ghost, "GhostSCBWNuclearStrike", "Abil/GhostSCBWNuclearStrike", lv__chargeCount);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainGhostBWComplete_Init () {
    gt_TrainGhostBWComplete = TriggerCreate("gt_TrainGhostBWComplete_Func");
    TriggerAddEventUnitTrainProgress(gt_TrainGhostBWComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddNukeBW
//--------------------------------------------------------------------------------------------------
bool gt_AddNukeBW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    unit lv__unit;

    // Automatic Variable Declarations
    unitgroup autoC2BB5654_g;
    int autoC2BB5654_u;
    unitgroup auto20B3AADA_g;
    int auto20B3AADA_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "NukeSCBW"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_team1_teamInfo.lv_builder)) {
        gv_team1_sharedUnit.lv_nuke += 1;
        auto20B3AADA_g = gv_team1_unitGroup.lv_ghostGroup;
        auto20B3AADA_u = UnitGroupCount(auto20B3AADA_g, c_unitCountAll);
        for (;; auto20B3AADA_u -= 1) {
            lv__unit = UnitGroupUnitFromEnd(auto20B3AADA_g, auto20B3AADA_u);
            if (lv__unit == null) { break; }
            UnitAbilityAddChargeUsed(lv__unit, "GhostSCBWNuclearStrike", "Abil/GhostSCBWNuclearStrike", -1.0);
        }
    }
    else {
        gv_team2_sharedUnit.lv_nuke += 1;
        autoC2BB5654_g = gv_team2_unitGroup.lv_ghostGroup;
        autoC2BB5654_u = UnitGroupCount(autoC2BB5654_g, c_unitCountAll);
        for (;; autoC2BB5654_u -= 1) {
            lv__unit = UnitGroupUnitFromEnd(autoC2BB5654_g, autoC2BB5654_u);
            if (lv__unit == null) { break; }
            UnitAbilityAddChargeUsed(lv__unit, "GhostSCBWNuclearStrike", "Abil/GhostSCBWNuclearStrike", -1.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddNukeBW_Init () {
    gt_AddNukeBW = TriggerCreate("gt_AddNukeBW_Func");
    TriggerAddEventUnitArmMagazineProgress(gt_AddNukeBW, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UseNukeBW
//--------------------------------------------------------------------------------------------------
bool gt_UseNukeBW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__unit;
    int lv__triggeringPlayer;
    int lv__player;

    // Automatic Variable Declarations
    unitgroup autoD1A42AF3_g;
    int autoD1A42AF3_u;
    unitgroup auto26360F9A_g;
    int auto26360F9A_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv__unit = EventUnit();
    lv__triggeringPlayer = UnitGetOwner(EventUnit());
    if (((PlayerGroupHasPlayer(gv_team1_playerGroup.lv_fightersWithNeutral, lv__triggeringPlayer) == true))) {
        gv_team1_sharedUnit.lv_nuke -= 1;
        PlayerCreateEffectPoint(gv_team1_teamInfo.lv_builder, "GhostSCBWNuclearStrike@CalldownDummyNF1B", Point(0.0, 0.0));
        auto26360F9A_g = gv_team1_unitGroup.lv_ghostGroup;
        auto26360F9A_u = UnitGroupCount(auto26360F9A_g, c_unitCountAll);
        for (;; auto26360F9A_u -= 1) {
            lv__unit = UnitGroupUnitFromEnd(auto26360F9A_g, auto26360F9A_u);
            if (lv__unit == null) { break; }
            if ((lv__unit != EventUnit())) {
                UnitAbilityAddChargeUsed(lv__unit, "GhostSCBWNuclearStrike", "Abil/GhostSCBWNuclearStrike", 1.0);
            }

        }
    }
    else {
        gv_team2_sharedUnit.lv_nuke -= 1;
        PlayerCreateEffectPoint(gv_team2_teamInfo.lv_builder, "GhostSCBWNuclearStrike@CalldownDummyNF1B", Point(0.0, 0.0));
        autoD1A42AF3_g = gv_team2_unitGroup.lv_ghostGroup;
        autoD1A42AF3_u = UnitGroupCount(autoD1A42AF3_g, c_unitCountAll);
        for (;; autoD1A42AF3_u -= 1) {
            lv__unit = UnitGroupUnitFromEnd(autoD1A42AF3_g, autoD1A42AF3_u);
            if (lv__unit == null) { break; }
            if ((lv__unit != EventUnit())) {
                UnitAbilityAddChargeUsed(lv__unit, "GhostSCBWNuclearStrike", "Abil/GhostSCBWNuclearStrike", 1.0);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UseNukeBW_Init () {
    gt_UseNukeBW = TriggerCreate("gt_UseNukeBW_Func");
    TriggerAddEventUnitAbility(gt_UseNukeBW, null, AbilityCommand("GhostSCBWNuclearStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BuildNexusComplete
//--------------------------------------------------------------------------------------------------
bool gt_BuildNexusComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__nexus;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "Nexus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__nexus = EventUnitProgressUnit();
    if ((UnitGetOwner(lv__nexus) == gv_team1_teamInfo.lv_builder)) {
        UnitGroupAdd(gv_team1_unitGroup.lv_nexusGroup, lv__nexus);
        if ((gv_team1_sharedUnit.lv_motherShip == true)) {
            UnitAbilityEnable(lv__nexus, "NexusTrainMothership", false);
        }

    }

    if ((UnitGetOwner(lv__nexus) == gv_team2_teamInfo.lv_builder)) {
        UnitGroupAdd(gv_team2_unitGroup.lv_nexusGroup, lv__nexus);
        if ((gv_team2_sharedUnit.lv_motherShip == true)) {
            UnitAbilityEnable(lv__nexus, "NexusTrainMothership", false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildNexusComplete_Init () {
    gt_BuildNexusComplete = TriggerCreate("gt_BuildNexusComplete_Func");
    TriggerAddEventUnitConstructProgress(gt_BuildNexusComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AddMothership
//--------------------------------------------------------------------------------------------------
bool gt_AddMothership_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD130C590_g;
    int autoD130C590_u;
    unit autoD130C590_var;
    unitgroup autoECCBBFF2_g;
    int autoECCBBFF2_u;
    unit autoECCBBFF2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_team1_teamInfo.lv_builder)) {
        gv_team1_sharedUnit.lv_motherShip = true;
        autoECCBBFF2_g = gv_team1_unitGroup.lv_nexusGroup;
        autoECCBBFF2_u = UnitGroupCount(autoECCBBFF2_g, c_unitCountAll);
        for (;; autoECCBBFF2_u -= 1) {
            autoECCBBFF2_var = UnitGroupUnitFromEnd(autoECCBBFF2_g, autoECCBBFF2_u);
            if (autoECCBBFF2_var == null) { break; }
            UnitAbilityEnable(autoECCBBFF2_var, "NexusTrainMothership", false);
        }
    }
    else {
        gv_team2_sharedUnit.lv_motherShip = true;
        autoD130C590_g = gv_team2_unitGroup.lv_nexusGroup;
        autoD130C590_u = UnitGroupCount(autoD130C590_g, c_unitCountAll);
        for (;; autoD130C590_u -= 1) {
            autoD130C590_var = UnitGroupUnitFromEnd(autoD130C590_g, autoD130C590_u);
            if (autoD130C590_var == null) { break; }
            UnitAbilityEnable(autoD130C590_var, "NexusTrainMothership", false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddMothership_Init () {
    gt_AddMothership = TriggerCreate("gt_AddMothership_Func");
    TriggerAddEventUnitAbility(gt_AddMothership, null, AbilityCommand("NexusTrainMothership", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DecMothership
//--------------------------------------------------------------------------------------------------
bool gt_DecMothership_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5E3AEF13_g;
    int auto5E3AEF13_u;
    unit auto5E3AEF13_var;
    unitgroup autoAFB89D52_g;
    int autoAFB89D52_u;
    unit autoAFB89D52_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Mothership"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_team1_playerGroup.lv_players, UnitGetOwner(EventUnit())) == true)) {
        gv_team1_sharedUnit.lv_motherShip = false;
        autoAFB89D52_g = gv_team1_unitGroup.lv_nexusGroup;
        autoAFB89D52_u = UnitGroupCount(autoAFB89D52_g, c_unitCountAll);
        for (;; autoAFB89D52_u -= 1) {
            autoAFB89D52_var = UnitGroupUnitFromEnd(autoAFB89D52_g, autoAFB89D52_u);
            if (autoAFB89D52_var == null) { break; }
            UnitAbilityEnable(autoAFB89D52_var, "NexusTrainMothership", true);
        }
    }
    else {
        gv_team2_sharedUnit.lv_motherShip = false;
        auto5E3AEF13_g = gv_team2_unitGroup.lv_nexusGroup;
        auto5E3AEF13_u = UnitGroupCount(auto5E3AEF13_g, c_unitCountAll);
        for (;; auto5E3AEF13_u -= 1) {
            auto5E3AEF13_var = UnitGroupUnitFromEnd(auto5E3AEF13_g, auto5E3AEF13_u);
            if (auto5E3AEF13_var == null) { break; }
            UnitAbilityEnable(auto5E3AEF13_var, "NexusTrainMothership", true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecMothership_Init () {
    gt_DecMothership = TriggerCreate("gt_DecMothership_Func");
    TriggerAddEventUnitDied(gt_DecMothership, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReleaseByBuilder
//--------------------------------------------------------------------------------------------------
bool gt_ReleaseByBuilder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    unit lv__unit;
    int lv__team;
    int lv__newOwner;
    int lv__newColor;

    // Automatic Variable Declarations
    unitgroup auto38DC9000_g;
    int auto38DC9000_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gf_GetRoleOfPlayer(EventPlayer()) == ge_Role_Builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    lv__team = gf_GetTeamOfPlayer(lv__player);
    lv__newOwner = gf_GetOwnerForRelease(lv__team);
    lv__newColor = gf_GetColorForRelease(lv__team);
    gf_CloseSupplyShareTrigger(lv__team);
    auto38DC9000_g = UnitGroupSelected(lv__player);
    auto38DC9000_u = UnitGroupCount(auto38DC9000_g, c_unitCountAll);
    for (;; auto38DC9000_u -= 1) {
        lv__unit = UnitGroupUnitFromEnd(auto38DC9000_g, auto38DC9000_u);
        if (lv__unit == null) { break; }
        if ((UnitGetOwner(lv__unit) == lv__player) && gf_IsCanReleaseByBuilderUnitType(lv__unit)) {
            if (gf_IsSharedGroupedUnitType(lv__unit)) {
                UnitSetOwner(lv__unit, lv__newOwner, false);
                gf_DisableAbilityForReleasedMainBase(lv__unit);
            }
            else {
                UnitSetOwner(lv__unit, lv__newOwner, true);
                UnitSetTeamColorIndex(lv__unit, lv__newColor);
            }
        }

    }
    gf_MaintainSupplyUnchanged(lv__player, lv__newOwner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReleaseByBuilder_Init () {
    gt_ReleaseByBuilder = TriggerCreate("gt_ReleaseByBuilder_Func");
    TriggerAddEventKeyPressed(gt_ReleaseByBuilder, c_playerAny, c_keyR, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventChatMessage(gt_ReleaseByBuilder, c_playerAny, ("-r"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReleaseByFighter
//--------------------------------------------------------------------------------------------------
bool gt_ReleaseByFighter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    unit lv__unit;
    int lv__team;
    int lv__newOwner;
    int lv__newColor;

    // Automatic Variable Declarations
    unitgroup autoC85D29BB_g;
    int autoC85D29BB_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gf_GetRoleOfPlayer(EventPlayer()) == ge_Role_Fighter))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    lv__team = gf_GetTeamOfPlayer(lv__player);
    lv__newOwner = gf_GetOwnerForRelease(lv__team);
    lv__newColor = gf_GetColorForRelease(lv__team);
    gf_CloseSupplyShareTrigger(lv__team);
    autoC85D29BB_g = UnitGroupSelected(lv__player);
    autoC85D29BB_u = UnitGroupCount(autoC85D29BB_g, c_unitCountAll);
    for (;; autoC85D29BB_u -= 1) {
        lv__unit = UnitGroupUnitFromEnd(autoC85D29BB_g, autoC85D29BB_u);
        if (lv__unit == null) { break; }
        if ((UnitGetOwner(lv__unit) == lv__player)) {
            UnitSetOwner(lv__unit, lv__newOwner, true);
            UnitSetTeamColorIndex(lv__unit, lv__newColor);
        }

    }
    gf_MaintainSupplyUnchanged(lv__player, lv__newOwner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReleaseByFighter_Init () {
    gt_ReleaseByFighter = TriggerCreate("gt_ReleaseByFighter_Func");
    TriggerAddEventKeyPressed(gt_ReleaseByFighter, c_playerAny, c_keyR, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventChatMessage(gt_ReleaseByFighter, c_playerAny, ("-r"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReleaseAfterTrain
//--------------------------------------------------------------------------------------------------
bool gt_ReleaseAfterTrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_team1_teamInfo.lv_builder) || (UnitGetOwner(EventUnit()) == gv_team2_teamInfo.lv_builder)))) {
            return false;
        }

        if (!((gf_IsEconomicUnitType(EventUnitProgressUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__unit = EventUnitProgressUnit();
    gf_ChangeOwnershipAfterRelease(lv__unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReleaseAfterTrain_Init () {
    gt_ReleaseAfterTrain = TriggerCreate("gt_ReleaseAfterTrain_Func");
    TriggerAddEventUnitTrainProgress(gt_ReleaseAfterTrain, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReleaseAfterMorph
//--------------------------------------------------------------------------------------------------
bool gt_ReleaseAfterMorph_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_team1_teamInfo.lv_builder) || (UnitGetOwner(EventUnit()) == gv_team2_teamInfo.lv_builder)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__unit = EventUnit();
    gf_ChangeOwnershipAfterRelease(lv__unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReleaseAfterMorph_Init () {
    gt_ReleaseAfterMorph = TriggerCreate("gt_ReleaseAfterMorph_Func");
    TriggerAddEventUnitAbility(gt_ReleaseAfterMorph, null, AbilityCommand("MorphToOverseer", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ReleaseAfterMorph, null, AbilityCommand("MorphToTransportOverlord", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReleaseAfterWarp
//--------------------------------------------------------------------------------------------------
bool gt_ReleaseAfterWarp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnitProgressUnit()) == gv_team1_teamInfo.lv_builder) || (UnitGetOwner(EventUnitProgressUnit()) == gv_team2_teamInfo.lv_builder) || (UnitGetOwner(EventUnitProgressUnit()) == 13) || (UnitGetOwner(EventUnitProgressUnit()) == 14)))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(libNtve_gf_TriggeringProgressUnitType(), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__unit = EventUnitProgressUnit();
    gf_ChangeOwnershipAfterRelease(lv__unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReleaseAfterWarp_Init () {
    gt_ReleaseAfterWarp = TriggerCreate("gt_ReleaseAfterWarp_Func");
    TriggerAddEventUnitConstructProgress(gt_ReleaseAfterWarp, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GetByBuillder
//--------------------------------------------------------------------------------------------------
bool gt_GetByBuillder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__unit;
    int lv__builder;
    int lv__team;
    int lv__neutral;

    // Automatic Variable Declarations
    unitgroup auto7DCA46F6_g;
    int auto7DCA46F6_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gf_GetRoleOfPlayer(EventPlayer()) == ge_Role_Builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__builder = EventPlayer();
    lv__team = gf_GetTeamOfPlayer(lv__builder);
    lv__neutral = gf_GetNeutralOfTeam(lv__team);
    gf_CloseSupplyShareTrigger(lv__team);
    auto7DCA46F6_g = UnitGroupSelected(lv__builder);
    auto7DCA46F6_u = UnitGroupCount(auto7DCA46F6_g, c_unitCountAll);
    for (;; auto7DCA46F6_u -= 1) {
        lv__unit = UnitGroupUnitFromEnd(auto7DCA46F6_g, auto7DCA46F6_u);
        if (lv__unit == null) { break; }
        if ((UnitGetOwner(lv__unit) == lv__neutral) && gf_IsCanReleaseByBuilderUnitType(lv__unit)) {
            UnitSetOwner(lv__unit, lv__builder, true);
            gf_EnableAbilityForReleasedMainBase(lv__unit);
        }

    }
    gf_MaintainSupplyUnchanged(lv__neutral, lv__builder);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GetByBuillder_Init () {
    gt_GetByBuillder = TriggerCreate("gt_GetByBuillder_Func");
    TriggerAddEventKeyPressed(gt_GetByBuillder, c_playerAny, c_keyG, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventChatMessage(gt_GetByBuillder, c_playerAny, ("-o"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GetByFighterSelect
//--------------------------------------------------------------------------------------------------
bool gt_GetByFighterSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__unit;
    int lv__fighter;
    int lv__team;
    int lv__neutral;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gf_GetRoleOfPlayer(EventPlayer()) == ge_Role_Fighter))) {
            return false;
        }

        if (!((gf_IsSharedGroupedUnitType(EventUnit()) == false))) {
            return false;
        }

        if (!((gf_IsWorkerUnitType(EventUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__unit = EventUnit();
    lv__fighter = EventPlayer();
    lv__team = gf_GetTeamOfPlayer(lv__fighter);
    lv__neutral = gf_GetNeutralOfTeam(lv__team);
    if ((UnitGetOwner(lv__unit) == lv__neutral)) {
        gf_ChangeOwnershipAfterSelect(lv__unit, lv__fighter);
        gf_MaintainSupplyUnchanged(lv__neutral, lv__fighter);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GetByFighterSelect_Init () {
    gt_GetByFighterSelect = TriggerCreate("gt_GetByFighterSelect_Func");
    TriggerAddEventUnitSelected(gt_GetByFighterSelect, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BuilderDefeat
//--------------------------------------------------------------------------------------------------
bool gt_BuilderDefeat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;

    // Automatic Variable Declarations
    playergroup autoF6B95237_g;
    int autoF6B95237_var;
    playergroup autoD9F94AB0_g;
    int autoD9F94AB0_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_ggFlag == false))) {
            return false;
        }

        if (!(((EventPlayer() == gv_team1_teamInfo.lv_builder) || (EventPlayer() == gv_team2_teamInfo.lv_builder)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    gv_ggFlag = true;
    if ((lv__player == gv_team1_teamInfo.lv_builder)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7C2BA5DC"));
        Wait(2.0, c_timeGame);
        autoD9F94AB0_g = gv_team1_playerGroup.lv_users;
        autoD9F94AB0_var = -1;
        while (true) {
            autoD9F94AB0_var = PlayerGroupNextPlayer(autoD9F94AB0_g, autoD9F94AB0_var);
            if (autoD9F94AB0_var < 0) { break; }
            GameOver(autoD9F94AB0_var, c_gameOverDefeat, true, true);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A283F7C2"));
        Wait(2.0, c_timeGame);
        autoF6B95237_g = gv_team2_playerGroup.lv_users;
        autoF6B95237_var = -1;
        while (true) {
            autoF6B95237_var = PlayerGroupNextPlayer(autoF6B95237_g, autoF6B95237_var);
            if (autoF6B95237_var < 0) { break; }
            GameOver(autoF6B95237_var, c_gameOverDefeat, true, true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderDefeat_Init () {
    gt_BuilderDefeat = TriggerCreate("gt_BuilderDefeat_Func");
    TriggerAddEventPlayerLeft(gt_BuilderDefeat, c_playerAny, c_gameResultUndecided);
    TriggerAddEventChatMessage(gt_BuilderDefeat, c_playerAny, ("-gg"), true);
    TriggerAddEventChatMessage(gt_BuilderDefeat, c_playerAny, ("-GG"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_temp_Init();
    gt_Debug_Init();
    gt_Test_Init();
    gt_Food_Init();
    gt_Res_Init();
    gt_Fog_Init();
    gt_Fast_Init();
    gt_Control_Init();
    gt_GainControl_Init();
    gt_ChangeRaceForDebug_Init();
    gt_RemoveUnit_Init();
    gt_Worker_Init();
    gt_Color_Init();
    gt_BeBuilder_Init();
    gt_BeFighter_Init();
    gt_NF_Init();
    gt__1F_Init();
    gt_GG_Init();
    gt_ShowHideUI_Init();
    gt_DisableExperimental_Init();
    gt_EnableExperimental_Init();
    gt_unlock_pv_releaseToChangeOwner_Init();
    gt_Initialization_Init();
    gt_MapInitialization_Init();
    gt_BeforeRoleSelection_Init();
    gt_DuringRoleSelection_Init();
    gt_AfterRoleSelection_Init();
    gt_ClickDialogItem_Init();
    gt_TipRole_Init();
    gt_TipCommands_Init();
    gt_TipDebugCommands_Init();
    gt_TipGG_Init();
    gt_TipSensorTower_Init();
    gt_TipRace_Init();
    gt_TipHelp_Init();
    gt_TipZerg_Init();
    gt_GiveUpBuilderRole_Init();
    gt_ChangeBuilder_Init();
    gt_ChangeRace_Init();
    gt_FighterQuit_Init();
    gt_Team1_ResourceDisplay_Init();
    gt_Team2_ResourceDisplay_Init();
    gt_Team1_BuilderMineralUpdate_Init();
    gt_Team1_BuilderVespeneUpdate_Init();
    gt_Team1_FighterMineralUpdate_Init();
    gt_Team1_FighterVespeneUpdate_Init();
    gt_Team2_BuilderMineralUpdate_Init();
    gt_Team2_BuilderVespeneUpdate_Init();
    gt_Team2_FighterMineralUpdate_Init();
    gt_Team2_FighterVespeneUpdate_Init();
    gt_Team1_BuilderMadeChange_Init();
    gt_Team1_BuilderUsedChange_Init();
    gt_Team1_FighterMadeChange_Init();
    gt_Team1_FighterUsedChange_Init();
    gt_Team2_BuilderMadeChange_Init();
    gt_Team2_BuilderUsedChange_Init();
    gt_Team2_FighterMadeChange_Init();
    gt_Team2_FighterUsedChange_Init();
    gt_ChangeMorphEnabledByBuilder_Init();
    gt_ShareStructure_Init();
    gt_ShareUpgrade_Init();
    gt_AddArmory_Init();
    gt_DecArmory_Init();
    gt_AddBanelingNest_Init();
    gt_DecBanelingNest_Init();
    gt_AddRoachWarren_Init();
    gt_DecRoachWarren_Init();
    gt_AddLair_Init();
    gt_DecLair_Init();
    gt_AddLurkerDen_Init();
    gt_DecLurkerDen_Init();
    gt_AddGreaterSpire_Init();
    gt_DecGreaterSpire_Init();
    gt_AddGreaterSpireBW_Init();
    gt_DecGreaterSpireBW_Init();
    gt_TrainGhostComplete_Init();
    gt_AddNuke_Init();
    gt_UseNuke_Init();
    gt_TrainGhostBWComplete_Init();
    gt_AddNukeBW_Init();
    gt_UseNukeBW_Init();
    gt_BuildNexusComplete_Init();
    gt_AddMothership_Init();
    gt_DecMothership_Init();
    gt_ReleaseByBuilder_Init();
    gt_ReleaseByFighter_Init();
    gt_ReleaseAfterTrain_Init();
    gt_ReleaseAfterMorph_Init();
    gt_ReleaseAfterWarp_Init();
    gt_GetByBuillder_Init();
    gt_GetByFighterSelect_Init();
    gt_BuilderDefeat_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
