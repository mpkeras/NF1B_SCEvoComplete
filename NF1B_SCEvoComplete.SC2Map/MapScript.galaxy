//==================================================================================================
// 
// Generated Map Script
// 
// Name:   N Fight 1 Builds (SC: Evo Complete)
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibSCEV"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libSCEV_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_UI {
    int lv_builderIcon;
    int lv_builderName;
};

struct gs_teamMode {
    int lv_fighterMode;
    int lv_ownerForRelease;
    int lv_colorForRelease;
};

struct gs_sharedUnit {
    int lv_armory;
    int lv_banelingNest;
    int lv_roachWarren;
    int lv_lair;
    int lv_lurkerDen;
    int lv_greaterSpire;
    bool lv_motherShip;
    int lv_nuke;
};

struct gs_teamInfo {
    int lv_userNum;
    int lv_fighterNum;
    int lv_builder;
    playergroup lv_fighterGroup;
    string lv_race;
    int lv_playerColor;
    color lv_color;
    point lv_startLocation;
    fixed lv_supplyMade;
    fixed lv_supplyUsed;
    int lv_mineralText;
    int lv_vespeneText;
    unitgroup lv_ghostGroup;
    unitgroup lv_nexusGroup;
};

struct gs_playerGroupInfo {
    playergroup lv_users;
    playergroup lv_players;
    playergroup lv_fightersWithNeutral;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_fighterMode_NF1B = 0;
const int ge_fighterMode__1F1B = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_debug;
int gv_userInfoPanel;
gs_UI gv_team1_UI;
gs_UI gv_team2_UI;
timer gv_timer;
bool gv_ggFlag;
bool gv_tipSensorTowerFlag1;
bool gv_tipSensorTowerFlag2;
gs_teamMode gv_teamMode1;
gs_teamMode gv_teamMode2;
gs_sharedUnit gv_sharedUnit1;
gs_sharedUnit gv_sharedUnit2;
gs_teamInfo gv_teamInfo1;
gs_teamInfo gv_teamInfo2;
gs_playerGroupInfo gv_playerGroupInfo1;
gs_playerGroupInfo gv_playerGroupInfo2;
int gv_racePanel;
int gv_resourcePanel1;
int gv_resourcePanel2;
int gv_pv_releaseToChangeOwner;

void InitGlobals () {
    gv_userInfoPanel = c_invalidDialogId;
    gv_team1_UI.lv_builderIcon = c_invalidDialogControlId;
    gv_team1_UI.lv_builderName = c_invalidDialogControlId;
    gv_team2_UI.lv_builderIcon = c_invalidDialogControlId;
    gv_team2_UI.lv_builderName = c_invalidDialogControlId;
    gv_timer = TimerCreate();
    gv_teamMode1.lv_fighterMode = ge_fighterMode_NF1B;
    gv_teamMode2.lv_fighterMode = ge_fighterMode_NF1B;
    gv_teamInfo1.lv_fighterGroup = PlayerGroupEmpty();
    gv_teamInfo1.lv_color = Color(100,100,100);
    gv_teamInfo1.lv_mineralText = c_invalidDialogControlId;
    gv_teamInfo1.lv_vespeneText = c_invalidDialogControlId;
    gv_teamInfo1.lv_ghostGroup = UnitGroupEmpty();
    gv_teamInfo1.lv_nexusGroup = UnitGroupEmpty();
    gv_teamInfo2.lv_fighterGroup = PlayerGroupEmpty();
    gv_teamInfo2.lv_color = Color(100,100,100);
    gv_teamInfo2.lv_mineralText = c_invalidDialogControlId;
    gv_teamInfo2.lv_vespeneText = c_invalidDialogControlId;
    gv_teamInfo2.lv_ghostGroup = UnitGroupEmpty();
    gv_teamInfo2.lv_nexusGroup = UnitGroupEmpty();
    gv_playerGroupInfo1.lv_users = PlayerGroupEmpty();
    gv_playerGroupInfo1.lv_players = PlayerGroupEmpty();
    gv_playerGroupInfo1.lv_fightersWithNeutral = PlayerGroupEmpty();
    gv_playerGroupInfo2.lv_users = PlayerGroupEmpty();
    gv_playerGroupInfo2.lv_players = PlayerGroupEmpty();
    gv_playerGroupInfo2.lv_fightersWithNeutral = PlayerGroupEmpty();
    gv_racePanel = c_invalidDialogId;
    gv_resourcePanel1 = c_invalidDialogId;
    gv_resourcePanel2 = c_invalidDialogId;
    gv_pv_releaseToChangeOwner = 1;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_isEconomicUnitType (unit lp_unit);
bool gf_isWorkerUnitType (unit lp_unit);
bool gf_isMainBaseUnitType (unit lp_unit);
bool gf_isSharedGroupedType (unit lp_unit);
void gf_wait (int lp_s);
void gf_signal (int lp_s);
int gf_getTeamOfPlayer (int lp_player);
void gf_returnCargo (unit lp_unit);
int gf_randomFighterFromTeam (int lp_team);
void gf_SetPlayerRaceToBW (int lp_player);
void gf_SetPlayerRaceToSC2 (int lp_player);
unit gf_ReturnTownBuildingUnitType (int lp_player);
void gf_updateBuilderInfoPanel (int lp_newBuilder, int lp_team);
void gf_updateBuilderIcon (int lp_newBuilder, int lp_team);
void gf_updateBuilderName (int lp_newBuilder, int lp_team);
void gf_ownershipForChangeBuilder (int lp_team, int lp_oldBuilder, int lp_newBuilder);
void gf_updateRole (int lp_team, int lp_oldBuilder, int lp_newBuilder);
void gf_transferResource (int lp_team, int lp_player_1, int lp_player_2);
void gf_updateResource (int lp_team, int lp_oldBuilder, int lp_newBuilder);
void gf_closeResourceUpdateTrigger (int lp_team);
void gf_openResourceUpdateTrigger (int lp_team);
void gf_openSupplyShareTrigger (int lp_team);
void gf_closeSupplyShareTrigger (int lp_team);
void gf_MaintainSupplyUnchanged (int lp_team, int lp_oldOwner, int lp_newOwner);
void gf_changeFighterMode (int lp_team, int lp_mode);
void gf_updateFighterMode (int lp_team);
void gf_fighterGG (int lp_team);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_temp;
trigger gt_debug;
trigger gt_controlon;
trigger gt_controloff;
trigger gt_test;
trigger gt_res;
trigger gt_fog;
trigger gt_food;
trigger gt_fast;
trigger gt_gaincontrol;
trigger gt_hideUI;
trigger gt_showUI;
trigger gt_nf;
trigger gt__1f;
trigger gt_worker;
trigger gt_gg;
trigger gt_race;
trigger gt_disableExperimental;
trigger gt_enableExperimental;
trigger gt_unlock_pv_releaseToChangeOwner;
trigger gt_initialization;
trigger gt_MapInitialization;
trigger gt_beforeRoleSelection;
trigger gt_timer;
trigger gt_singleMode;
trigger gt_playerGroup;
trigger gt_startLocation;
trigger gt_roleSelection;
trigger gt_roleSelection1;
trigger gt_roleSelection2;
trigger gt_figherGroup;
trigger gt_startingSettings1;
trigger gt_startingSettings2;
trigger gt_afterRoleSelection;
trigger gt_UI;
trigger gt_gameModeSettings;
trigger gt_meleeOptions;
trigger gt_nexusGroupInit;
trigger gt_resourceSettings;
trigger gt_allianceSettings;
trigger gt_supplyLimit;
trigger gt_builderInfoDisplay;
trigger gt_showPanel;
trigger gt_hidePanel;
trigger gt_userPanel;
trigger gt_tipRole;
trigger gt_tipCommands;
trigger gt_tipHotkeys;
trigger gt_tipDebugCommands;
trigger gt_tipGG;
trigger gt_tipSensorTower;
trigger gt_tipRace;
trigger gt_tipHelp;
trigger gt_tipZerg;
trigger gt_changeBuilder;
trigger gt_giveupBuilderRole;
trigger gt_fighterQuit;
trigger gt_resourceDisplay1;
trigger gt_resourceDisplay2;
trigger gt_builderMineralUpdate1;
trigger gt_builderVespeneUpdate1;
trigger gt_fighterMineralUpdate1;
trigger gt_fighterVespeneUpdate1;
trigger gt_builderMineralUpdate2;
trigger gt_builderVespeneUpdate2;
trigger gt_fighterMineralUpdate2;
trigger gt_fighterVespeneUpdate2;
trigger gt_builderMadeChange1;
trigger gt_builderUsedChange1;
trigger gt_fighterMadeChange1;
trigger gt_fighterUsedChange1;
trigger gt_builderMadeChange2;
trigger gt_builderUsedChange2;
trigger gt_fighterMadeChange2;
trigger gt_fighterUsedChange2;
trigger gt_structureShare;
trigger gt_upgrade;
trigger gt_armoryAdd;
trigger gt_armoryDec;
trigger gt_banelingNestAdd;
trigger gt_banelingNestDec;
trigger gt_roachWarrenAdd;
trigger gt_roachWarrenDec;
trigger gt_lairAdd;
trigger gt_lairDec;
trigger gt_lurkerDenAdd;
trigger gt_lurkerDenDec;
trigger gt_greaterSpireAdd;
trigger gt_greaterSpireDec;
trigger gt_bwGreaterSpireAdd;
trigger gt_bwGreaterSpireDec;
trigger gt_nukeAdd;
trigger gt_nukeUse;
trigger gt_ghostTrainComplete;
trigger gt_bwNukeAdd;
trigger gt_bwNukeUse;
trigger gt_bwGhostTrainComplete;
trigger gt_mothershipAdd;
trigger gt_mothershipDec;
trigger gt_nexusBuildComplete;
trigger gt_releaseByFighterCommand1;
trigger gt_releaseByFighterCommand2;
trigger gt_releaseByBuilderCommand1;
trigger gt_releaseByBuilderCommand2;
trigger gt_releaseAfterMorph1;
trigger gt_releaseAfterMorph2;
trigger gt_releaseAfterTrain1;
trigger gt_releaseAfterTrain2;
trigger gt_releaseAfterWarp1;
trigger gt_releaseAfterWarp2;
trigger gt_fighterSelect1;
trigger gt_fighterSelect2;
trigger gt_builderGG;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_isEconomicUnitType (unit lp_unit) {
    // Variable Declarations
    string lv__unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv__unitType = UnitGetType(lp_unit);
    if (((lv__unitType == "SCV") || (lv__unitType == "SCVSCBW") || (lv__unitType == "Drone") || (lv__unitType == "DroneSCBW") || (lv__unitType == "Probe") || (lv__unitType == "ProbeSCBW") || (lv__unitType == "Queen") || (lv__unitType == "Overlord") || (lv__unitType == "OverlordSCBW") || (lv__unitType == "MULE"))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_isWorkerUnitType (unit lp_unit) {
    // Variable Declarations
    string lv__unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv__unitType = UnitGetType(lp_unit);
    if (((lv__unitType == "SCV") || (lv__unitType == "MULE") || (lv__unitType == "Drone") || (lv__unitType == "Probe") || (lv__unitType == "SCVSCBW") || (lv__unitType == "DroneSCBW") || (lv__unitType == "ProbeSCBW"))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_isMainBaseUnitType (unit lp_unit) {
    // Variable Declarations
    string lv__unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv__unitType = UnitGetType(lp_unit);
    if (((lv__unitType == "CommandCenter") || (lv__unitType == "CommandCenterFlying") || (lv__unitType == "OrbitalCommand") || (lv__unitType == "OrbitalCommandFlying") || (lv__unitType == "PlanetaryFortress") || (lv__unitType == "Hatchery") || (lv__unitType == "Lair") || (lv__unitType == "Hive") || (lv__unitType == "Nexus") || (lv__unitType == "CommandCenterSCBW") || (lv__unitType == "CommandCenterSCBW@Flying") || (lv__unitType == "HatcherySCBW") || (lv__unitType == "LairSCBW") || (lv__unitType == "HiveSCBW") || (lv__unitType == "NexusSCBW"))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_isSharedGroupedType (unit lp_unit) {
    // Variable Declarations
    string lv__unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv__unitType = UnitGetType(lp_unit);
    if (((lv__unitType == "SensorTower") || (lv__unitType == "CreepTumorQueen") || (lv__unitType == "CreepTumorBurrowed") || (lv__unitType == "CreepTumor"))) {
        return true;
    }
    else {
        return false;
    }
}

void gf_wait (int lp_s) {
    // Automatic Variable Declarations
    // Implementation
    gv_pv_releaseToChangeOwner -= 1;
}

void gf_signal (int lp_s) {
    // Automatic Variable Declarations
    // Implementation
    gv_pv_releaseToChangeOwner += 1;
    if ((lp_s >= 1)) {
        TriggerExecute(gt_unlock_pv_releaseToChangeOwner, true, false);
    }

}

int gf_getTeamOfPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(gv_playerGroupInfo1.lv_players, lp_player) == true)) {
        return 1;
    }
    else {
        return 2;
    }
}

void gf_returnCargo (unit lp_unit) {
    // Automatic Variable Declarations
    string autoB9B079BB_val;

    // Implementation
    autoB9B079BB_val = UnitGetType(lp_unit);
    if (autoB9B079BB_val == "SCV") {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("SCVHarvest", 1)), c_orderQueueReplace);
    }
    else if (autoB9B079BB_val == "MULE") {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("MULEGather", 1)), c_orderQueueReplace);
    }
    else if (autoB9B079BB_val == "Drone") {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("DroneHarvest", 1)), c_orderQueueReplace);
    }
    else if (autoB9B079BB_val == "Probe") {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("ProbeHarvest", 1)), c_orderQueueReplace);
    }
    else if (autoB9B079BB_val == "SCVSCBW") {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("SCVSCBW@Harvest", 1)), c_orderQueueReplace);
    }
    else if (autoB9B079BB_val == "DroneSCBW") {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("DroneSCBW@Harvest", 1)), c_orderQueueReplace);
    }
    else if (autoB9B079BB_val == "ProbeSCBW") {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("ProbeSCBW@Harvest", 1)), c_orderQueueReplace);
    }
    else {
    }
}

int gf_randomFighterFromTeam (int lp_team) {
    // Variable Declarations
    int lv__fighterNum;
    int lv__random;
    int lv__fighter;

    // Automatic Variable Declarations
    int auto28F3F02F_val;

    // Variable Initialization

    // Implementation
    auto28F3F02F_val = lp_team;
    if (auto28F3F02F_val == 1) {
        lv__fighterNum = PlayerGroupCount(gv_teamInfo1.lv_fighterGroup);
        lv__random = RandomInt(1, lv__fighterNum);
        lv__fighter = PlayerGroupPlayer(gv_teamInfo1.lv_fighterGroup, lv__random);
    }
    else if (auto28F3F02F_val == 2) {
        lv__fighterNum = PlayerGroupCount(gv_teamInfo2.lv_fighterGroup);
        lv__random = RandomInt(1, lv__fighterNum);
        lv__fighter = PlayerGroupPlayer(gv_teamInfo2.lv_fighterGroup, lv__random);
    }
    else {
    }
    return lv__fighter;
}

void gf_SetPlayerRaceToBW (int lp_player) {
    // Automatic Variable Declarations
    string autoD75E6D6D_val;

    // Implementation
    autoD75E6D6D_val = PlayerRace(lp_player);
    if (autoD75E6D6D_val == ("Terr")) {
        PlayerSetRace(lp_player, "BWTe");
    }
    else if (autoD75E6D6D_val == ("Prot")) {
        PlayerSetRace(lp_player, "BWPr");
    }
    else if (autoD75E6D6D_val == ("Zerg")) {
        PlayerSetRace(lp_player, "BWZe");
    }
    else {
    }
}

void gf_SetPlayerRaceToSC2 (int lp_player) {
    // Automatic Variable Declarations
    string auto57EF8C76_val;

    // Implementation
    auto57EF8C76_val = PlayerRace(lp_player);
    if (auto57EF8C76_val == ("BWTe")) {
        PlayerSetRace(lp_player, "Terr");
    }
    else if (auto57EF8C76_val == ("BWPr")) {
        PlayerSetRace(lp_player, "Prot");
    }
    else if (auto57EF8C76_val == ("BWZe")) {
        PlayerSetRace(lp_player, "Zerg");
    }
    else {
    }
}

unit gf_ReturnTownBuildingUnitType (int lp_player) {
    // Variable Declarations
    string lv_townBuildingType;
    unit lv_townUnit;

    // Automatic Variable Declarations
    string auto26A44178_val;
    unitgroup auto9AD84FEF_g;
    int auto9AD84FEF_u;
    unit auto9AD84FEF_var;

    // Variable Initialization

    // Implementation
    Wait(0.005, c_timeGame);
    auto26A44178_val = PlayerRace(lp_player);
    if (auto26A44178_val == "Prot") {
        lv_townBuildingType = "Nexus";
    }
    else if (auto26A44178_val == "Terr") {
        lv_townBuildingType = "CommandCenter";
    }
    else if (auto26A44178_val == "Zerg") {
        lv_townBuildingType = "Hatchery";
    }
    else if (auto26A44178_val == "BWPr") {
        lv_townBuildingType = "NexusSCBW";
    }
    else if (auto26A44178_val == "BWTe") {
        lv_townBuildingType = "CommandCenterSCBW";
    }
    else if (auto26A44178_val == "BWZe") {
        lv_townBuildingType = "HatcherySCBW";
    }
    else {
        return null;
    }
    auto9AD84FEF_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto9AD84FEF_u = UnitGroupCount(auto9AD84FEF_g, c_unitCountAll);
    for (;; auto9AD84FEF_u -= 1) {
        auto9AD84FEF_var = UnitGroupUnitFromEnd(auto9AD84FEF_g, auto9AD84FEF_u);
        if (auto9AD84FEF_var == null) { break; }
        lv_townUnit = auto9AD84FEF_var;
    }
    return lv_townUnit;
}

void gf_updateBuilderInfoPanel (int lp_newBuilder, int lp_team) {
    // Automatic Variable Declarations
}

void gf_updateBuilderIcon (int lp_newBuilder, int lp_team) {
    // Automatic Variable Declarations
    string auto2AE6ADA5_val;
    string autoE686B32B_val;

    // Implementation
    if ((lp_team == 1)) {
        auto2AE6ADA5_val = gv_teamInfo1.lv_race;
        if (auto2AE6ADA5_val == "Terr") {
            libNtve_gf_SetDialogItemImage(gv_team1_UI.lv_builderIcon, "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_terran.dds", PlayerGroupAll());
        }
        else if (auto2AE6ADA5_val == "Zerg") {
            libNtve_gf_SetDialogItemImage(gv_team1_UI.lv_builderIcon, "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_zerg.dds", PlayerGroupAll());
        }
        else if (auto2AE6ADA5_val == "Prot") {
            libNtve_gf_SetDialogItemImage(gv_team1_UI.lv_builderIcon, "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_protoss.dds", PlayerGroupAll());
        }
        else if (auto2AE6ADA5_val == "BWTe") {
            libNtve_gf_SetDialogItemImage(gv_team1_UI.lv_builderIcon, "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWterran.dds", PlayerGroupAll());
        }
        else if (auto2AE6ADA5_val == "BWZe") {
            libNtve_gf_SetDialogItemImage(gv_team1_UI.lv_builderIcon, "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWzerg.dds", PlayerGroupAll());
        }
        else if (auto2AE6ADA5_val == "BWPr") {
            libNtve_gf_SetDialogItemImage(gv_team1_UI.lv_builderIcon, "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWprotoss.dds", PlayerGroupAll());
        }
        else {
        }
    }
    else if ((lp_team == 2)) {
        autoE686B32B_val = gv_teamInfo2.lv_race;
        if (autoE686B32B_val == "Terr") {
            libNtve_gf_SetDialogItemImage(gv_team2_UI.lv_builderIcon, "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_terran.dds", PlayerGroupAll());
        }
        else if (autoE686B32B_val == "Zerg") {
            libNtve_gf_SetDialogItemImage(gv_team2_UI.lv_builderIcon, "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_zerg.dds", PlayerGroupAll());
        }
        else if (autoE686B32B_val == "Prot") {
            libNtve_gf_SetDialogItemImage(gv_team2_UI.lv_builderIcon, "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_protoss.dds", PlayerGroupAll());
        }
        else if (autoE686B32B_val == "BWTe") {
            libNtve_gf_SetDialogItemImage(gv_team2_UI.lv_builderIcon, "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWterran.dds", PlayerGroupAll());
        }
        else if (autoE686B32B_val == "BWZe") {
            libNtve_gf_SetDialogItemImage(gv_team2_UI.lv_builderIcon, "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWzerg.dds", PlayerGroupAll());
        }
        else if (autoE686B32B_val == "BWPr") {
            libNtve_gf_SetDialogItemImage(gv_team2_UI.lv_builderIcon, "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWprotoss.dds", PlayerGroupAll());
        }
        else {
        }
    }
}

void gf_updateBuilderName (int lp_newBuilder, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_team == 1)) {
        libNtve_gf_SetDialogItemText(gv_team1_UI.lv_builderName, PlayerName(lp_newBuilder), PlayerGroupAll());
    }
    else if ((lp_team == 2)) {
        libNtve_gf_SetDialogItemText(gv_team2_UI.lv_builderName, PlayerName(lp_newBuilder), PlayerGroupAll());
    }
}

void gf_ownershipForChangeBuilder (int lp_team, int lp_oldBuilder, int lp_newBuilder) {
    // Variable Declarations
    order lv__order;
    unit lv__unit;
    unitgroup lv__workerGroup;
    unitgroup lv__otherGroup;
    int lv__ownerForRelease;
    int lv__colorForRelease;

    // Automatic Variable Declarations
    unitgroup auto8D0E9D38_g;
    int auto8D0E9D38_u;
    unitgroup auto5CE33954_g;
    int auto5CE33954_u;
    unitgroup auto69821EDD_g;
    int auto69821EDD_u;
    unitgroup auto890FDEC2_g;
    int auto890FDEC2_u;

    // Variable Initialization
    lv__workerGroup = UnitGroupEmpty();
    lv__otherGroup = UnitGroupEmpty();

    // Implementation
    if ((PlayerGroupHasPlayer(gv_playerGroupInfo1.lv_players, lp_newBuilder) == true)) {
        lv__ownerForRelease = gv_teamMode1.lv_ownerForRelease;
        lv__colorForRelease = gv_teamMode1.lv_colorForRelease;
    }
    else {
        lv__ownerForRelease = gv_teamMode2.lv_ownerForRelease;
        lv__colorForRelease = gv_teamMode2.lv_colorForRelease;
    }
    gf_closeSupplyShareTrigger(lp_team);
    auto8D0E9D38_g = UnitGroup(null, lp_oldBuilder, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto8D0E9D38_u = UnitGroupCount(auto8D0E9D38_g, c_unitCountAll);
    for (;; auto8D0E9D38_u -= 1) {
        lv__unit = UnitGroupUnitFromEnd(auto8D0E9D38_g, auto8D0E9D38_u);
        if (lv__unit == null) { break; }
        if (gf_isWorkerUnitType(lv__unit)) {
            UnitGroupAdd(lv__workerGroup, lv__unit);
        }
        else {
            UnitGroupAdd(lv__otherGroup, lv__unit);
        }
    }
    auto5CE33954_g = UnitGroup(null, lp_newBuilder, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5CE33954_u = UnitGroupCount(auto5CE33954_g, c_unitCountAll);
    for (;; auto5CE33954_u -= 1) {
        lv__unit = UnitGroupUnitFromEnd(auto5CE33954_g, auto5CE33954_u);
        if (lv__unit == null) { break; }
        UnitSetOwner(lv__unit, gv_teamMode1.lv_ownerForRelease, true);
        UnitSetTeamColorIndex(lv__unit, gv_teamMode1.lv_colorForRelease);
    }
    auto69821EDD_g = lv__otherGroup;
    auto69821EDD_u = UnitGroupCount(auto69821EDD_g, c_unitCountAll);
    for (;; auto69821EDD_u -= 1) {
        lv__unit = UnitGroupUnitFromEnd(auto69821EDD_g, auto69821EDD_u);
        if (lv__unit == null) { break; }
        UnitSetOwner(lv__unit, lp_newBuilder, true);
    }
    auto890FDEC2_g = lv__workerGroup;
    auto890FDEC2_u = UnitGroupCount(auto890FDEC2_g, c_unitCountAll);
    for (;; auto890FDEC2_u -= 1) {
        lv__unit = UnitGroupUnitFromEnd(auto890FDEC2_g, auto890FDEC2_u);
        if (lv__unit == null) { break; }
        lv__order = UnitOrder(lv__unit, 0);
        UnitSetOwner(lv__unit, lp_newBuilder, true);
        if ((PlayerGetAlliance(lp_newBuilder, c_allianceIdControl, lp_oldBuilder) == true)) {
            if (gf_isMainBaseUnitType(OrderGetTargetUnit(lv__order))) {
                gf_returnCargo(lv__unit);
            }
            else {
                UnitIssueOrder(lv__unit, lv__order, c_orderQueueReplace);
            }
        }
        else {
            PlayerSetAlliance(lp_newBuilder, c_allianceIdControl, lp_oldBuilder, true);
            if (gf_isMainBaseUnitType(OrderGetTargetUnit(lv__order))) {
                gf_returnCargo(lv__unit);
            }
            else {
                UnitIssueOrder(lv__unit, lv__order, c_orderQueueReplace);
            }
            PlayerSetAlliance(lp_newBuilder, c_allianceIdControl, lp_oldBuilder, false);
        }
    }
}

void gf_updateRole (int lp_team, int lp_oldBuilder, int lp_newBuilder) {
    // Automatic Variable Declarations
    int auto4FBB1AC2_val;

    // Implementation
    auto4FBB1AC2_val = lp_team;
    if (auto4FBB1AC2_val == 1) {
        PlayerGroupAdd(gv_teamInfo1.lv_fighterGroup, lp_oldBuilder);
        PlayerGroupAdd(gv_playerGroupInfo1.lv_fightersWithNeutral, lp_oldBuilder);
        gv_teamInfo1.lv_builder = lp_newBuilder;
        PlayerGroupRemove(gv_teamInfo1.lv_fighterGroup, lp_newBuilder);
        PlayerGroupRemove(gv_playerGroupInfo1.lv_fightersWithNeutral, lp_newBuilder);
    }
    else if (auto4FBB1AC2_val == 2) {
        PlayerGroupAdd(gv_teamInfo2.lv_fighterGroup, lp_oldBuilder);
        PlayerGroupAdd(gv_playerGroupInfo2.lv_fightersWithNeutral, lp_oldBuilder);
        gv_teamInfo2.lv_builder = lp_newBuilder;
        PlayerGroupRemove(gv_teamInfo2.lv_fighterGroup, lp_newBuilder);
        PlayerGroupRemove(gv_playerGroupInfo2.lv_fightersWithNeutral, lp_newBuilder);
    }
    else {
    }
}

void gf_transferResource (int lp_team, int lp_player_1, int lp_player_2) {
    // Automatic Variable Declarations
    // Implementation
    gf_closeResourceUpdateTrigger(lp_team);
    PlayerModifyPropertyFixed(lp_player_2, c_playerPropMinerals, c_playerPropOperSetTo, PlayerGetPropertyFixed(lp_player_1, c_playerPropMinerals));
    PlayerModifyPropertyFixed(lp_player_2, c_playerPropVespene, c_playerPropOperSetTo, PlayerGetPropertyFixed(lp_player_1, c_playerPropVespene));
    PlayerModifyPropertyFixed(lp_player_1, c_playerPropMinerals, c_playerPropOperSetTo, 0.0);
    PlayerModifyPropertyFixed(lp_player_1, c_playerPropVespene, c_playerPropOperSetTo, 0.0);
    gf_openResourceUpdateTrigger(lp_team);
}

void gf_updateResource (int lp_team, int lp_oldBuilder, int lp_newBuilder) {
    // Automatic Variable Declarations
    int auto47E72597_val;

    // Implementation
    gf_transferResource(lp_team, lp_oldBuilder, lp_newBuilder);
    UISetResourceVisible(PlayerGroupSingle(lp_newBuilder), c_resourceTypeMinerals, true);
    UISetResourceVisible(PlayerGroupSingle(lp_newBuilder), c_resourceTypeVespene, true);
    UISetResourceVisible(PlayerGroupSingle(lp_oldBuilder), c_resourceTypeMinerals, false);
    UISetResourceVisible(PlayerGroupSingle(lp_oldBuilder), c_resourceTypeVespene, false);
    auto47E72597_val = lp_team;
    if (auto47E72597_val == 1) {
        DialogSetVisible(gv_resourcePanel1, PlayerGroupSingle(lp_oldBuilder), true);
        DialogSetVisible(gv_resourcePanel1, PlayerGroupSingle(lp_newBuilder), false);
    }
    else if (auto47E72597_val == 2) {
        DialogSetVisible(gv_resourcePanel2, PlayerGroupSingle(lp_oldBuilder), true);
        DialogSetVisible(gv_resourcePanel2, PlayerGroupSingle(lp_newBuilder), false);
    }
    else {
    }
}

void gf_closeResourceUpdateTrigger (int lp_team) {
    // Automatic Variable Declarations
    int autoE85027B3_val;

    // Implementation
    autoE85027B3_val = lp_team;
    if (autoE85027B3_val == 1) {
        TriggerEnable(gt_builderMineralUpdate1, false);
        TriggerEnable(gt_builderVespeneUpdate1, false);
        TriggerEnable(gt_fighterMineralUpdate1, false);
        TriggerEnable(gt_fighterVespeneUpdate1, false);
    }
    else if (autoE85027B3_val == 2) {
        TriggerEnable(gt_builderMineralUpdate2, false);
        TriggerEnable(gt_builderVespeneUpdate2, false);
        TriggerEnable(gt_fighterMineralUpdate2, false);
        TriggerEnable(gt_fighterVespeneUpdate2, false);
    }
    else {
    }
}

void gf_openResourceUpdateTrigger (int lp_team) {
    // Automatic Variable Declarations
    int autoFA4C0FAB_val;

    // Implementation
    autoFA4C0FAB_val = lp_team;
    if (autoFA4C0FAB_val == 1) {
        TriggerEnable(gt_builderMineralUpdate1, true);
        TriggerEnable(gt_builderVespeneUpdate1, true);
        TriggerEnable(gt_fighterMineralUpdate1, true);
        TriggerEnable(gt_fighterVespeneUpdate1, true);
    }
    else if (autoFA4C0FAB_val == 2) {
        TriggerEnable(gt_builderMineralUpdate2, true);
        TriggerEnable(gt_builderVespeneUpdate2, true);
        TriggerEnable(gt_fighterMineralUpdate2, true);
        TriggerEnable(gt_fighterVespeneUpdate2, true);
    }
    else {
    }
}

void gf_openSupplyShareTrigger (int lp_team) {
    // Automatic Variable Declarations
    int auto7384AA08_val;

    // Implementation
    auto7384AA08_val = lp_team;
    if (auto7384AA08_val == 1) {
        TriggerEnable(gt_builderUsedChange1, true);
        TriggerEnable(gt_builderMadeChange1, true);
        TriggerEnable(gt_fighterUsedChange1, true);
        TriggerEnable(gt_fighterMadeChange1, true);
    }
    else if (auto7384AA08_val == 2) {
        TriggerEnable(gt_builderUsedChange2, true);
        TriggerEnable(gt_builderMadeChange2, true);
        TriggerEnable(gt_fighterUsedChange2, true);
        TriggerEnable(gt_fighterMadeChange2, true);
    }
    else {
    }
}

void gf_closeSupplyShareTrigger (int lp_team) {
    // Automatic Variable Declarations
    int auto806A96BC_val;

    // Implementation
    auto806A96BC_val = lp_team;
    if (auto806A96BC_val == 1) {
        TriggerEnable(gt_builderUsedChange1, false);
        TriggerEnable(gt_builderMadeChange1, false);
        TriggerEnable(gt_fighterUsedChange1, false);
        TriggerEnable(gt_fighterMadeChange1, false);
    }
    else if (auto806A96BC_val == 2) {
        TriggerEnable(gt_builderUsedChange2, false);
        TriggerEnable(gt_builderMadeChange2, false);
        TriggerEnable(gt_fighterUsedChange2, false);
        TriggerEnable(gt_fighterMadeChange2, false);
    }
    else {
    }
}

void gf_MaintainSupplyUnchanged (int lp_team, int lp_oldOwner, int lp_newOwner) {
    // Automatic Variable Declarations
    int autoB6480F46_val;

    // Implementation
    autoB6480F46_val = lp_team;
    if (autoB6480F46_val == 1) {
        PlayerModifyPropertyFixed(lp_oldOwner, c_playerPropSuppliesMade, c_playerPropOperSetTo, gv_teamInfo1.lv_supplyMade);
        PlayerModifyPropertyFixed(lp_oldOwner, c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_teamInfo1.lv_supplyUsed);
        PlayerModifyPropertyFixed(lp_newOwner, c_playerPropSuppliesMade, c_playerPropOperSetTo, gv_teamInfo1.lv_supplyMade);
        PlayerModifyPropertyFixed(lp_newOwner, c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_teamInfo1.lv_supplyUsed);
    }
    else if (autoB6480F46_val == 2) {
        PlayerModifyPropertyFixed(lp_oldOwner, c_playerPropSuppliesMade, c_playerPropOperSetTo, gv_teamInfo2.lv_supplyMade);
        PlayerModifyPropertyFixed(lp_oldOwner, c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_teamInfo2.lv_supplyUsed);
        PlayerModifyPropertyFixed(lp_newOwner, c_playerPropSuppliesMade, c_playerPropOperSetTo, gv_teamInfo2.lv_supplyMade);
        PlayerModifyPropertyFixed(lp_newOwner, c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_teamInfo2.lv_supplyUsed);
    }
    else {
    }
    gf_openSupplyShareTrigger(lp_team);
}

void gf_changeFighterMode (int lp_team, int lp_mode) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_team == 1) && (lp_mode == ge_fighterMode_NF1B)) {
        gv_teamMode1.lv_fighterMode = ge_fighterMode_NF1B;
        gv_teamMode1.lv_ownerForRelease = 13;
        gv_teamMode1.lv_colorForRelease = 0;
    }
    else if ((lp_team == 1) && (lp_mode == ge_fighterMode__1F1B)) {
        gv_teamMode1.lv_fighterMode = ge_fighterMode__1F1B;
        gv_teamMode1.lv_ownerForRelease = PlayerGroupPlayer(gv_teamInfo1.lv_fighterGroup, 1);
        gv_teamMode1.lv_colorForRelease = gv_teamInfo1.lv_playerColor;
    }
    else if ((lp_team == 2) && (lp_mode == ge_fighterMode_NF1B)) {
        gv_teamMode2.lv_fighterMode = ge_fighterMode_NF1B;
        gv_teamMode2.lv_ownerForRelease = 14;
        gv_teamMode2.lv_colorForRelease = 0;
    }
    else if ((lp_team == 2) && (lp_mode == ge_fighterMode__1F1B)) {
        gv_teamMode2.lv_fighterMode = ge_fighterMode__1F1B;
        gv_teamMode2.lv_ownerForRelease = PlayerGroupPlayer(gv_teamInfo2.lv_fighterGroup, 1);
        gv_teamMode2.lv_colorForRelease = gv_teamInfo2.lv_playerColor;
    }
}

void gf_updateFighterMode (int lp_team) {
    // Variable Declarations
    int lv__mode;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_team == 1)) {
        gf_changeFighterMode(1, gv_teamMode1.lv_fighterMode);
    }
    else if ((lp_team == 2)) {
        gf_changeFighterMode(2, gv_teamMode2.lv_fighterMode);
    }
}

void gf_fighterGG (int lp_team) {
    // Automatic Variable Declarations
    int autoF0861C2A_val;
    playergroup auto3FB7E512_g;
    int auto3FB7E512_var;
    playergroup auto8948B628_g;
    int auto8948B628_var;

    // Implementation
    autoF0861C2A_val = lp_team;
    if (autoF0861C2A_val == 1) {
        gv_ggFlag = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6FD47613"));
        Wait(2.0, c_timeGame);
        auto3FB7E512_g = gv_playerGroupInfo1.lv_users;
        auto3FB7E512_var = -1;
        while (true) {
            auto3FB7E512_var = PlayerGroupNextPlayer(auto3FB7E512_g, auto3FB7E512_var);
            if (auto3FB7E512_var < 0) { break; }
            GameOver(auto3FB7E512_var, c_gameOverDefeat, true, true);
        }
    }
    else if (autoF0861C2A_val == 2) {
        gv_ggFlag = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/738A54F4"));
        Wait(2.0, c_timeGame);
        auto8948B628_g = gv_playerGroupInfo2.lv_users;
        auto8948B628_var = -1;
        while (true) {
            auto8948B628_var = PlayerGroupNextPlayer(auto8948B628_g, auto8948B628_var);
            if (auto8948B628_var < 0) { break; }
            GameOver(auto8948B628_var, c_gameOverDefeat, true, true);
        }
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: temp
//--------------------------------------------------------------------------------------------------
bool gt_temp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_untitledVariable001;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_untitledVariable001 = UnitGroupEmpty();

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_temp_Init () {
    gt_temp = TriggerCreate("gt_temp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: debug
//--------------------------------------------------------------------------------------------------
bool gt_debug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(libSCEV_gf_HumanPlayers()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debug == 1)) {
        gv_debug = 0;
    }
    else {
        gv_debug = 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_debug_Init () {
    gt_debug = TriggerCreate("gt_debug_Func");
    TriggerAddEventChatMessage(gt_debug, c_playerAny, ("-d"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: control on
//--------------------------------------------------------------------------------------------------
bool gt_controlon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__triggeringPlayer;

    // Automatic Variable Declarations
    playergroup autoAF03FE53_g;
    playergroup auto32D137E8_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_debug == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__triggeringPlayer = EventPlayer();
    autoAF03FE53_g = PlayerGroupAlliance(c_playerGroupAlly, lv__triggeringPlayer);
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(autoAF03FE53_g, lv__player);
        if (lv__player < 0) { break; }
        PlayerSetAlliance(lv__player, c_allianceIdControl, lv__triggeringPlayer, true);
    }
    auto32D137E8_g = PlayerGroupAlliance(c_playerGroupEnemy, lv__triggeringPlayer);
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(auto32D137E8_g, lv__player);
        if (lv__player < 0) { break; }
        PlayerSetAlliance(lv__player, c_allianceIdControl, lv__triggeringPlayer, true);
        PlayerSetAlliance(lv__player, c_allianceIdVision, lv__triggeringPlayer, true);
        PlayerSetAlliance(lv__player, c_allianceIdSpend, lv__triggeringPlayer, true);
    }
    if ((PlayerGroupHasPlayer(gv_playerGroupInfo1.lv_users, lv__triggeringPlayer) == true)) {
        PlayerSetAlliance(14, c_allianceIdControl, lv__triggeringPlayer, true);
    }
    else {
        PlayerSetAlliance(13, c_allianceIdControl, lv__triggeringPlayer, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_controlon_Init () {
    gt_controlon = TriggerCreate("gt_controlon_Func");
    TriggerAddEventChatMessage(gt_controlon, c_playerAny, ("-con"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: control off
//--------------------------------------------------------------------------------------------------
bool gt_controloff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__triggeringPlayer;

    // Automatic Variable Declarations
    playergroup autoB49BEA11_g;
    playergroup autoD2D52C9B_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_debug == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__triggeringPlayer = EventPlayer();
    autoB49BEA11_g = PlayerGroupAlliance(c_playerGroupAlly, EventPlayer());
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(autoB49BEA11_g, lv__player);
        if (lv__player < 0) { break; }
        PlayerSetAlliance(lv__player, c_allianceIdControl, lv__triggeringPlayer, false);
    }
    autoD2D52C9B_g = PlayerGroupAlliance(c_playerGroupEnemy, EventPlayer());
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(autoD2D52C9B_g, lv__player);
        if (lv__player < 0) { break; }
        PlayerSetAlliance(lv__player, c_allianceIdControl, lv__triggeringPlayer, false);
        PlayerSetAlliance(lv__player, c_allianceIdVision, lv__triggeringPlayer, false);
        PlayerSetAlliance(lv__player, c_allianceIdSpend, lv__triggeringPlayer, false);
    }
    if ((PlayerGroupHasPlayer(gv_playerGroupInfo1.lv_users, lv__triggeringPlayer) == true)) {
        PlayerSetAlliance(14, c_allianceIdControl, lv__triggeringPlayer, false);
    }
    else {
        PlayerSetAlliance(13, c_allianceIdControl, lv__triggeringPlayer, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_controloff_Init () {
    gt_controloff = TriggerCreate("gt_controloff_Func");
    TriggerAddEventChatMessage(gt_controloff, c_playerAny, ("-coff"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: test
//--------------------------------------------------------------------------------------------------
bool gt_test_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ConsoleCommand("CatFoodForPrawnGuns", true, true);
    ConsoleCommand("Bunker55AliveInside", true, true);
    ConsoleCommand("TookTheRedPill", true, true);
    PlayerModifyPropertyFixed(gv_teamInfo1.lv_builder, c_playerPropMinerals, c_playerPropOperAdd, 10000.0);
    PlayerModifyPropertyFixed(gv_teamInfo1.lv_builder, c_playerPropVespene, c_playerPropOperAdd, 10000.0);
    PlayerModifyPropertyFixed(gv_teamInfo2.lv_builder, c_playerPropMinerals, c_playerPropOperAdd, 10000.0);
    PlayerModifyPropertyFixed(gv_teamInfo2.lv_builder, c_playerPropVespene, c_playerPropOperAdd, 10000.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_test_Init () {
    gt_test = TriggerCreate("gt_test_Func");
    TriggerAddEventChatMessage(gt_test, c_playerAny, "test", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: res
//--------------------------------------------------------------------------------------------------
bool gt_res_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyFixed(gv_teamInfo1.lv_builder, c_playerPropMinerals, c_playerPropOperAdd, 10000.0);
    PlayerModifyPropertyFixed(gv_teamInfo1.lv_builder, c_playerPropVespene, c_playerPropOperAdd, 10000.0);
    PlayerModifyPropertyFixed(gv_teamInfo2.lv_builder, c_playerPropMinerals, c_playerPropOperAdd, 10000.0);
    PlayerModifyPropertyFixed(gv_teamInfo2.lv_builder, c_playerPropVespene, c_playerPropOperAdd, 10000.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_res_Init () {
    gt_res = TriggerCreate("gt_res_Func");
    TriggerAddEventChatMessage(gt_res, c_playerAny, "-res", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: fog
//--------------------------------------------------------------------------------------------------
bool gt_fog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ConsoleCommand("TookTheRedPill", true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_fog_Init () {
    gt_fog = TriggerCreate("gt_fog_Func");
    TriggerAddEventChatMessage(gt_fog, c_playerAny, "-fog", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: food
//--------------------------------------------------------------------------------------------------
bool gt_food_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ConsoleCommand("Bunker55AliveInside", true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_food_Init () {
    gt_food = TriggerCreate("gt_food_Func");
    TriggerAddEventChatMessage(gt_food, c_playerAny, "-food", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: fast
//--------------------------------------------------------------------------------------------------
bool gt_fast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ConsoleCommand("CatFoodForPrawnGuns", true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_fast_Init () {
    gt_fast = TriggerCreate("gt_fast_Func");
    TriggerAddEventChatMessage(gt_fast, c_playerAny, "-fast", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: gain control
//--------------------------------------------------------------------------------------------------
bool gt_gaincontrol_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__unit;

    // Automatic Variable Declarations
    unitgroup auto8F238D2C_g;
    int auto8F238D2C_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_debug == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8F238D2C_g = UnitGroupSelected(EventPlayer());
    auto8F238D2C_u = UnitGroupCount(auto8F238D2C_g, c_unitCountAll);
    for (;; auto8F238D2C_u -= 1) {
        lv__unit = UnitGroupUnitFromEnd(auto8F238D2C_g, auto8F238D2C_u);
        if (lv__unit == null) { break; }
        if ((PlayerGroupHasPlayer(gv_playerGroupInfo1.lv_players, EventPlayer()) == true) && (PlayerGroupHasPlayer(gv_playerGroupInfo1.lv_players, UnitGetOwner(lv__unit)) == true)) {
            gf_closeSupplyShareTrigger(1);
        }
        else if ((PlayerGroupHasPlayer(gv_playerGroupInfo2.lv_players, EventPlayer()) == true) && (PlayerGroupHasPlayer(gv_playerGroupInfo2.lv_players, UnitGetOwner(lv__unit)) == true)) {
            gf_closeSupplyShareTrigger(2);
        }
        UnitSetOwner(lv__unit, EventPlayer(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_gaincontrol_Init () {
    gt_gaincontrol = TriggerCreate("gt_gaincontrol_Func");
    TriggerAddEventChatMessage(gt_gaincontrol, c_playerAny, ("-o"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: hide UI
//--------------------------------------------------------------------------------------------------
bool gt_hideUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideGameUI(false, PlayerGroupActive());
    UISetResourceVisible(PlayerGroupActive(), c_resourceTypeMinerals, false);
    UISetResourceVisible(PlayerGroupActive(), c_resourceTypeVespene, false);
    UISetResourceVisible(PlayerGroupActive(), c_resourceTypeVespene, false);
    DialogSetVisible(gv_racePanel, PlayerGroupActive(), false);
    DialogSetVisible(gv_resourcePanel1, PlayerGroupActive(), false);
    DialogSetVisible(gv_resourcePanel2, PlayerGroupActive(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_hideUI_Init () {
    gt_hideUI = TriggerCreate("gt_hideUI_Func");
    TriggerAddEventChatMessage(gt_hideUI, c_playerAny, ("-ui off"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: show UI
//--------------------------------------------------------------------------------------------------
bool gt_showUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideGameUI(true, PlayerGroupActive());
    UISetResourceVisible(PlayerGroupActive(), c_resourceTypeMinerals, true);
    UISetResourceVisible(PlayerGroupActive(), c_resourceTypeVespene, true);
    UISetResourceVisible(PlayerGroupActive(), c_resourceTypeVespene, true);
    DialogSetVisible(gv_racePanel, PlayerGroupActive(), true);
    DialogSetVisible(gv_resourcePanel1, PlayerGroupActive(), true);
    DialogSetVisible(gv_resourcePanel2, PlayerGroupActive(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_showUI_Init () {
    gt_showUI = TriggerCreate("gt_showUI_Func");
    TriggerAddEventChatMessage(gt_showUI, c_playerAny, ("-ui on"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: nf
//--------------------------------------------------------------------------------------------------
bool gt_nf_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_changeFighterMode(1, ge_fighterMode_NF1B);
    gf_changeFighterMode(2, ge_fighterMode_NF1B);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_nf_Init () {
    gt_nf = TriggerCreate("gt_nf_Func");
    TriggerAddEventChatMessage(gt_nf, c_playerAny, ("-nf"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1f
//--------------------------------------------------------------------------------------------------
bool gt__1f_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_changeFighterMode(1, ge_fighterMode__1F1B);
    gf_changeFighterMode(2, ge_fighterMode__1F1B);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1f_Init () {
    gt__1f = TriggerCreate("gt__1f_Func");
    TriggerAddEventChatMessage(gt__1f, c_playerAny, ("-1f"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: worker
//--------------------------------------------------------------------------------------------------
bool gt_worker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(3, "SCV", 0, gv_teamInfo1.lv_builder, gv_teamInfo1.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Drone", 0, gv_teamInfo1.lv_builder, gv_teamInfo1.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Probe", 0, gv_teamInfo1.lv_builder, gv_teamInfo1.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "SCVSCBW", 0, gv_teamInfo1.lv_builder, gv_teamInfo1.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "DroneSCBW", 0, gv_teamInfo1.lv_builder, gv_teamInfo1.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "ProbeSCBW", 0, gv_teamInfo1.lv_builder, gv_teamInfo1.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "SCV", 0, gv_teamInfo2.lv_builder, gv_teamInfo2.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Drone", 0, gv_teamInfo2.lv_builder, gv_teamInfo2.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "Probe", 0, gv_teamInfo2.lv_builder, gv_teamInfo2.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "SCVSCBW", 0, gv_teamInfo2.lv_builder, gv_teamInfo2.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "DroneSCBW", 0, gv_teamInfo2.lv_builder, gv_teamInfo2.lv_startLocation);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "ProbeSCBW", 0, gv_teamInfo2.lv_builder, gv_teamInfo2.lv_startLocation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_worker_Init () {
    gt_worker = TriggerCreate("gt_worker_Func");
    TriggerAddEventChatMessage(gt_worker, c_playerAny, ("-w"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: gg
//--------------------------------------------------------------------------------------------------
bool gt_gg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_ggFlag == true)) {
        gv_ggFlag = false;
    }
    else {
        gv_ggFlag = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_gg_Init () {
    gt_gg = TriggerCreate("gt_gg_Func");
    TriggerAddEventChatMessage(gt_gg, c_playerAny, ("-gf"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: race
//--------------------------------------------------------------------------------------------------
bool gt_race_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    string lv__race;

    // Automatic Variable Declarations
    string auto415B64FC_val;
    playergroup autoACDC1C99_g;
    playergroup autoC9899372_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_debug == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto415B64FC_val = EventChatMessage(false);
    if (auto415B64FC_val == "-r t") {
        lv__race = "Terr";
    }
    else if (auto415B64FC_val == "-r z") {
        lv__race = "Zerg";
    }
    else if (auto415B64FC_val == "-r p") {
        lv__race = "Prot";
    }
    else if (auto415B64FC_val == "-r t1") {
        lv__race = "BWTe";
    }
    else if (auto415B64FC_val == "-r z1") {
        lv__race = "BWZe";
    }
    else if (auto415B64FC_val == "-r p1") {
        lv__race = "BWPr";
    }
    else {
    }
    autoACDC1C99_g = gv_playerGroupInfo1.lv_players;
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(autoACDC1C99_g, lv__player);
        if (lv__player < 0) { break; }
        PlayerSetRace(lv__player, lv__race);
    }
    autoC9899372_g = gv_playerGroupInfo2.lv_players;
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(autoC9899372_g, lv__player);
        if (lv__player < 0) { break; }
        PlayerSetRace(lv__player, lv__race);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_race_Init () {
    gt_race = TriggerCreate("gt_race_Func");
    TriggerAddEventChatMessage(gt_race, c_playerAny, ("-r t"), true);
    TriggerAddEventChatMessage(gt_race, c_playerAny, ("-r z"), true);
    TriggerAddEventChatMessage(gt_race, c_playerAny, ("-r p"), true);
    TriggerAddEventChatMessage(gt_race, c_playerAny, ("-r t1"), true);
    TriggerAddEventChatMessage(gt_race, c_playerAny, ("-r z1"), true);
    TriggerAddEventChatMessage(gt_race, c_playerAny, ("-r p1"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: disableExperimental
//--------------------------------------------------------------------------------------------------
bool gt_disableExperimental_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_disableExperimental_Init () {
    gt_disableExperimental = TriggerCreate("gt_disableExperimental_Func");
    TriggerAddEventMapInit(gt_disableExperimental);
}

//--------------------------------------------------------------------------------------------------
// Trigger: enableExperimental
//--------------------------------------------------------------------------------------------------
bool gt_enableExperimental_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_debug == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_showPanel, true);
    TriggerEnable(gt_hidePanel, true);
    TriggerExecute(gt_userPanel, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_enableExperimental_Init () {
    gt_enableExperimental = TriggerCreate("gt_enableExperimental_Func");
    TriggerAddEventChatMessage(gt_enableExperimental, c_playerAny, ("-e"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: unlock_pv_releaseToChangeOwner
//--------------------------------------------------------------------------------------------------
bool gt_unlock_pv_releaseToChangeOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_unlock_pv_releaseToChangeOwner_Init () {
    gt_unlock_pv_releaseToChangeOwner = TriggerCreate("gt_unlock_pv_releaseToChangeOwner_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: initialization
//--------------------------------------------------------------------------------------------------
bool gt_initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_beforeRoleSelection, true, true);
    TriggerExecute(gt_roleSelection, true, true);
    TriggerExecute(gt_afterRoleSelection, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_initialization_Init () {
    gt_initialization = TriggerCreate("gt_initialization_Func");
    TriggerAddEventMapInit(gt_initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Race Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MapInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Automatic Variable Declarations
    playergroup auto9BFF64EA_g;
    string auto177FF3D0_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto9BFF64EA_g = PlayerGroupActive();
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(auto9BFF64EA_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        auto177FF3D0_val = GameAttributePlayerValue("[bnet:NF1B_SCEvoMulti/0.0/236353,file:Mods\\NF1B_SCEvoMulti.SC2Mod]1", lv_playerIndex);
        if (auto177FF3D0_val == "0001") {
            gf_SetPlayerRaceToBW(lv_playerIndex);
        }
        else if (auto177FF3D0_val == "0002") {
            gf_SetPlayerRaceToSC2(lv_playerIndex);
        }
        else if (auto177FF3D0_val == "0003") {
            if ((RandomInt(0, 1) == 1)) {
                gf_SetPlayerRaceToBW(lv_playerIndex);
            }
            else {
                gf_SetPlayerRaceToSC2(lv_playerIndex);
            }
        }
        else {
            if ((RandomInt(0, 1) == 1)) {
                gf_SetPlayerRaceToBW(lv_playerIndex);
            }
            else {
                gf_SetPlayerRaceToSC2(lv_playerIndex);
            }
        }
    }
    libSCEV_gf_SCEvoActivateFeature(libSCEV_ge_SCEvoFeatures_FractionalArmor, true);
    libSCEV_gf_SCEvoActivateFeature(libSCEV_ge_SCEvoFeatures_MissChance, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInitialization_Init () {
    gt_MapInitialization = TriggerCreate("gt_MapInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: beforeRoleSelection
//--------------------------------------------------------------------------------------------------
bool gt_beforeRoleSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_timer, true, false);
    TriggerExecute(gt_MapInitialization, true, true);
    TriggerExecute(gt_singleMode, true, true);
    TriggerExecute(gt_playerGroup, true, true);
    TriggerExecute(gt_startLocation, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_beforeRoleSelection_Init () {
    gt_beforeRoleSelection = TriggerCreate("gt_beforeRoleSelection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: timer
//--------------------------------------------------------------------------------------------------
bool gt_timer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_timer, 60.0, false, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_timer_Init () {
    gt_timer = TriggerCreate("gt_timer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: singleMode
//--------------------------------------------------------------------------------------------------
bool gt_singleMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupCount(libSCEV_gf_HumanPlayers()) == 1)) {
        gv_debug = 1;
        gv_ggFlag = true;
        UIDisplayMessage(libSCEV_gf_HumanPlayers(), c_messageAreaSubtitle, StringExternal("Param/Value/C2B87501"));
        TriggerExecute(gt_tipDebugCommands, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_singleMode_Init () {
    gt_singleMode = TriggerCreate("gt_singleMode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: playerGroup
//--------------------------------------------------------------------------------------------------
bool gt_playerGroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debug == 1)) {
        PlayerGroupAdd(gv_playerGroupInfo1.lv_users, 1);
        PlayerGroupAdd(gv_playerGroupInfo1.lv_users, 2);
        PlayerGroupAdd(gv_playerGroupInfo1.lv_users, 3);
        PlayerGroupAdd(gv_playerGroupInfo2.lv_users, 4);
        PlayerGroupAdd(gv_playerGroupInfo2.lv_users, 5);
        PlayerGroupAdd(gv_playerGroupInfo2.lv_users, 6);
    }
    else {
        libNtve_gf_AddPlayerGroupToPlayerGroup(GameAttributePlayersForTeam(1), gv_playerGroupInfo1.lv_users);
        libNtve_gf_AddPlayerGroupToPlayerGroup(GameAttributePlayersForTeam(2), gv_playerGroupInfo2.lv_users);
    }
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_playerGroupInfo1.lv_users, gv_playerGroupInfo1.lv_players);
    PlayerGroupAdd(gv_playerGroupInfo1.lv_players, 13);
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_playerGroupInfo2.lv_users, gv_playerGroupInfo2.lv_players);
    PlayerGroupAdd(gv_playerGroupInfo2.lv_players, 14);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_playerGroup_Init () {
    gt_playerGroup = TriggerCreate("gt_playerGroup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: startLocation
//--------------------------------------------------------------------------------------------------
bool gt_startLocation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__random;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv__random = RandomInt(1, 2);
    if ((lv__random == 1)) {
        gv_teamInfo1.lv_startLocation = PointFromId(2007263747);
        gv_teamInfo2.lv_startLocation = PointFromId(760164555);
    }
    else {
        gv_teamInfo1.lv_startLocation = PointFromId(760164555);
        gv_teamInfo2.lv_startLocation = PointFromId(2007263747);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_startLocation_Init () {
    gt_startLocation = TriggerCreate("gt_startLocation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: roleSelection
//--------------------------------------------------------------------------------------------------
bool gt_roleSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_roleSelection1, true, true);
    TriggerExecute(gt_roleSelection2, true, true);
    TriggerExecute(gt_figherGroup, true, true);
    TriggerExecute(gt_startingSettings1, true, false);
    TriggerExecute(gt_startingSettings2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_roleSelection_Init () {
    gt_roleSelection = TriggerCreate("gt_roleSelection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: roleSelection1
//--------------------------------------------------------------------------------------------------
bool gt_roleSelection1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__i;
    int lv__random;
    int lv__builderNum;
    playergroup lv__builderGroup;

    // Automatic Variable Declarations
    playergroup auto61B413DA_g;
    playergroup auto2DEF6397_g;
    playergroup auto71D331E5_g;
    int auto71D331E5_var;
    playergroup autoED047531_g;
    int autoED047531_var;

    // Variable Initialization
    lv__i = 1;
    lv__builderGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_teamInfo1.lv_userNum = PlayerGroupCount(gv_playerGroupInfo1.lv_users);
    gv_teamInfo1.lv_fighterNum = gv_teamInfo1.lv_userNum;
    gv_teamInfo1.lv_fighterNum -= 1;
    auto61B413DA_g = gv_playerGroupInfo1.lv_users;
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(auto61B413DA_g, lv__player);
        if (lv__player < 0) { break; }
        if ((GameAttributePlayerValue("[bnet:NF1B_SCEvoMulti/0.0/236353,file:Mods\\NF1B_SCEvoComplete\\NF1B_SCEvoMulti.SC2Mod]2", lv__player) == "0001")) {
            PlayerGroupAdd(lv__builderGroup, lv__player);
            lv__builderNum += 1;
        }
        else {
            PlayerGroupAdd(gv_teamInfo1.lv_fighterGroup, lv__player);
        }
    }
    if ((lv__builderNum == 0)) {
        lv__random = RandomInt(1, gv_teamInfo1.lv_userNum);
        auto2DEF6397_g = gv_playerGroupInfo1.lv_users;
        lv__player = -1;
        while (true) {
            lv__player = PlayerGroupNextPlayer(auto2DEF6397_g, lv__player);
            if (lv__player < 0) { break; }
            if ((lv__random == lv__i)) {
                gv_teamInfo1.lv_builder = lv__player;
                PlayerGroupRemove(gv_teamInfo1.lv_fighterGroup, lv__player);
                break;
            }

            lv__i += 1;
        }
    }
    else if ((lv__builderNum == 1)) {
        auto71D331E5_g = lv__builderGroup;
        auto71D331E5_var = -1;
        while (true) {
            auto71D331E5_var = PlayerGroupNextPlayer(auto71D331E5_g, auto71D331E5_var);
            if (auto71D331E5_var < 0) { break; }
            gv_teamInfo1.lv_builder = auto71D331E5_var;
        }
    }
    else if ((lv__builderNum > 1)) {
        lv__random = RandomInt(1, lv__builderNum);
        autoED047531_g = lv__builderGroup;
        autoED047531_var = -1;
        while (true) {
            autoED047531_var = PlayerGroupNextPlayer(autoED047531_g, autoED047531_var);
            if (autoED047531_var < 0) { break; }
            if ((lv__random == lv__i)) {
                gv_teamInfo1.lv_builder = autoED047531_var;
            }
            else {
                PlayerGroupAdd(gv_teamInfo1.lv_fighterGroup, autoED047531_var);
            }
            lv__i += 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_roleSelection1_Init () {
    gt_roleSelection1 = TriggerCreate("gt_roleSelection1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: roleSelection2
//--------------------------------------------------------------------------------------------------
bool gt_roleSelection2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    int lv__i;
    int lv__random;
    int lv__builderNum;
    playergroup lv__builderGroup;

    // Automatic Variable Declarations
    playergroup auto15D3362E_g;
    playergroup auto04423F94_g;
    playergroup auto2B37B108_g;
    int auto2B37B108_var;
    playergroup autoF3B4BD6C_g;
    int autoF3B4BD6C_var;

    // Variable Initialization
    lv__i = 1;
    lv__builderGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_teamInfo2.lv_userNum = PlayerGroupCount(gv_playerGroupInfo2.lv_users);
    gv_teamInfo2.lv_fighterNum = gv_teamInfo2.lv_userNum;
    gv_teamInfo2.lv_fighterNum -= 1;
    auto15D3362E_g = gv_playerGroupInfo2.lv_users;
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(auto15D3362E_g, lv__player);
        if (lv__player < 0) { break; }
        if ((GameAttributePlayerValue("[bnet:NF1B_SCEvoMulti/0.0/236353,file:Mods\\NF1B_SCEvoComplete\\NF1B_SCEvoMulti.SC2Mod]2", lv__player) == "0001")) {
            PlayerGroupAdd(lv__builderGroup, lv__player);
            lv__builderNum += 1;
        }
        else {
            PlayerGroupAdd(gv_teamInfo2.lv_fighterGroup, lv__player);
        }
    }
    if ((lv__builderNum == 0)) {
        lv__random = RandomInt(1, gv_teamInfo2.lv_userNum);
        auto04423F94_g = gv_playerGroupInfo2.lv_users;
        lv__player = -1;
        while (true) {
            lv__player = PlayerGroupNextPlayer(auto04423F94_g, lv__player);
            if (lv__player < 0) { break; }
            if ((lv__random == lv__i)) {
                gv_teamInfo2.lv_builder = lv__player;
                PlayerGroupRemove(gv_teamInfo2.lv_fighterGroup, lv__player);
                break;
            }

            lv__i += 1;
        }
    }
    else if ((lv__builderNum == 1)) {
        auto2B37B108_g = lv__builderGroup;
        auto2B37B108_var = -1;
        while (true) {
            auto2B37B108_var = PlayerGroupNextPlayer(auto2B37B108_g, auto2B37B108_var);
            if (auto2B37B108_var < 0) { break; }
            gv_teamInfo2.lv_builder = auto2B37B108_var;
        }
    }
    else if ((lv__builderNum > 1)) {
        lv__random = RandomInt(1, lv__builderNum);
        autoF3B4BD6C_g = lv__builderGroup;
        autoF3B4BD6C_var = -1;
        while (true) {
            autoF3B4BD6C_var = PlayerGroupNextPlayer(autoF3B4BD6C_g, autoF3B4BD6C_var);
            if (autoF3B4BD6C_var < 0) { break; }
            if ((lv__random == lv__i)) {
                gv_teamInfo2.lv_builder = autoF3B4BD6C_var;
            }
            else {
                PlayerGroupAdd(gv_teamInfo2.lv_fighterGroup, autoF3B4BD6C_var);
            }
            lv__i += 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_roleSelection2_Init () {
    gt_roleSelection2 = TriggerCreate("gt_roleSelection2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: figherGroup
//--------------------------------------------------------------------------------------------------
bool gt_figherGroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_teamInfo1.lv_fighterGroup, gv_playerGroupInfo1.lv_fightersWithNeutral);
    PlayerGroupAdd(gv_playerGroupInfo1.lv_fightersWithNeutral, 13);
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_teamInfo2.lv_fighterGroup, gv_playerGroupInfo2.lv_fightersWithNeutral);
    PlayerGroupAdd(gv_playerGroupInfo2.lv_fightersWithNeutral, 14);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_figherGroup_Init () {
    gt_figherGroup = TriggerCreate("gt_figherGroup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: startingSettings1
//--------------------------------------------------------------------------------------------------
bool gt_startingSettings1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;

    // Automatic Variable Declarations
    playergroup autoDFB74190_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_teamInfo1.lv_race = PlayerRace(gv_teamInfo1.lv_builder);
    gv_teamInfo1.lv_playerColor = PlayerGetColorIndex(gv_teamInfo1.lv_builder, false);
    gv_teamInfo1.lv_color = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_teamInfo1.lv_builder, false));
    MeleeInitResourcesForPlayer(gv_teamInfo1.lv_builder, gv_teamInfo1.lv_race);
    MeleeInitUnitsForPlayer(gv_teamInfo1.lv_builder, gv_teamInfo1.lv_race, gv_teamInfo1.lv_startLocation);
    autoDFB74190_g = gv_playerGroupInfo1.lv_fightersWithNeutral;
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(autoDFB74190_g, lv__player);
        if (lv__player < 0) { break; }
        PlayerSetRace(lv__player, gv_teamInfo1.lv_race);
        PlayerSetColorIndex(lv__player, gv_teamInfo1.lv_playerColor, true);
        CameraPan(lv__player, gv_teamInfo1.lv_startLocation, 0.0, -1, 10.0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_startingSettings1_Init () {
    gt_startingSettings1 = TriggerCreate("gt_startingSettings1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: startingSettings2
//--------------------------------------------------------------------------------------------------
bool gt_startingSettings2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;

    // Automatic Variable Declarations
    playergroup autoF4337112_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_teamInfo2.lv_race = PlayerRace(gv_teamInfo2.lv_builder);
    gv_teamInfo2.lv_playerColor = PlayerGetColorIndex(gv_teamInfo2.lv_builder, false);
    gv_teamInfo2.lv_color = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_teamInfo2.lv_builder, false));
    MeleeInitResourcesForPlayer(gv_teamInfo2.lv_builder, gv_teamInfo2.lv_race);
    MeleeInitUnitsForPlayer(gv_teamInfo2.lv_builder, gv_teamInfo2.lv_race, gv_teamInfo2.lv_startLocation);
    autoF4337112_g = gv_playerGroupInfo2.lv_fightersWithNeutral;
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(autoF4337112_g, lv__player);
        if (lv__player < 0) { break; }
        PlayerSetRace(lv__player, gv_teamInfo2.lv_race);
        PlayerSetColorIndex(lv__player, gv_teamInfo2.lv_playerColor, true);
        CameraPan(lv__player, gv_teamInfo2.lv_startLocation, 0.0, -1, 10.0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_startingSettings2_Init () {
    gt_startingSettings2 = TriggerCreate("gt_startingSettings2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: afterRoleSelection
//--------------------------------------------------------------------------------------------------
bool gt_afterRoleSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_UI, true, false);
    TriggerExecute(gt_gameModeSettings, true, false);
    TriggerExecute(gt_meleeOptions, true, false);
    TriggerExecute(gt_nexusGroupInit, true, false);
    TriggerExecute(gt_resourceSettings, true, false);
    TriggerExecute(gt_allianceSettings, true, false);
    TriggerExecute(gt_supplyLimit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_afterRoleSelection_Init () {
    gt_afterRoleSelection = TriggerCreate("gt_afterRoleSelection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI
//--------------------------------------------------------------------------------------------------
bool gt_UI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_userPanel, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UI_Init () {
    gt_UI = TriggerCreate("gt_UI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: gameModeSettings
//--------------------------------------------------------------------------------------------------
bool gt_gameModeSettings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_teamInfo1.lv_fighterNum == 1)) {
        gf_changeFighterMode(1, ge_fighterMode__1F1B);
    }
    else {
        gf_changeFighterMode(1, ge_fighterMode_NF1B);
    }
    if ((gv_teamInfo2.lv_fighterNum == 1)) {
        gf_changeFighterMode(2, ge_fighterMode__1F1B);
    }
    else {
        gf_changeFighterMode(2, ge_fighterMode_NF1B);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_gameModeSettings_Init () {
    gt_gameModeSettings = TriggerCreate("gt_gameModeSettings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: meleeOptions
//--------------------------------------------------------------------------------------------------
bool gt_meleeOptions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto35B5B55F_g;
    int auto35B5B55F_var;
    playergroup autoE8E602D4_g;
    int autoE8E602D4_var;

    // Conditions
    if (testConds) {
        if (!((gv_debug == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    MeleeSetOption(gv_teamInfo1.lv_builder, c_meleeOptionVictory, true);
    MeleeSetOption(gv_teamInfo1.lv_builder, c_meleeOptionDefeat, true);
    MeleeSetOption(gv_teamInfo1.lv_builder, c_meleeOptionReveal, true);
    auto35B5B55F_g = gv_teamInfo1.lv_fighterGroup;
    auto35B5B55F_var = -1;
    while (true) {
        auto35B5B55F_var = PlayerGroupNextPlayer(auto35B5B55F_g, auto35B5B55F_var);
        if (auto35B5B55F_var < 0) { break; }
        MeleeSetOption(auto35B5B55F_var, c_meleeOptionVictory, true);
    }
    MeleeSetOption(gv_teamInfo2.lv_builder, c_meleeOptionVictory, true);
    MeleeSetOption(gv_teamInfo2.lv_builder, c_meleeOptionDefeat, true);
    MeleeSetOption(gv_teamInfo2.lv_builder, c_meleeOptionReveal, true);
    autoE8E602D4_g = gv_teamInfo2.lv_fighterGroup;
    autoE8E602D4_var = -1;
    while (true) {
        autoE8E602D4_var = PlayerGroupNextPlayer(autoE8E602D4_g, autoE8E602D4_var);
        if (autoE8E602D4_var < 0) { break; }
        MeleeSetOption(autoE8E602D4_var, c_meleeOptionVictory, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_meleeOptions_Init () {
    gt_meleeOptions = TriggerCreate("gt_meleeOptions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: nexusGroupInit
//--------------------------------------------------------------------------------------------------
bool gt_nexusGroupInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1873B677_g;
    int auto1873B677_u;
    unit auto1873B677_var;
    unitgroup autoDFD59FE4_g;
    int autoDFD59FE4_u;
    unit autoDFD59FE4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1873B677_g = UnitGroup("Nexus", gv_teamInfo1.lv_builder, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1873B677_u = UnitGroupCount(auto1873B677_g, c_unitCountAll);
    for (;; auto1873B677_u -= 1) {
        auto1873B677_var = UnitGroupUnitFromEnd(auto1873B677_g, auto1873B677_u);
        if (auto1873B677_var == null) { break; }
        UnitGroupAdd(gv_teamInfo1.lv_nexusGroup, auto1873B677_var);
    }
    autoDFD59FE4_g = UnitGroup("Nexus", gv_teamInfo2.lv_builder, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDFD59FE4_u = UnitGroupCount(autoDFD59FE4_g, c_unitCountAll);
    for (;; autoDFD59FE4_u -= 1) {
        autoDFD59FE4_var = UnitGroupUnitFromEnd(autoDFD59FE4_g, autoDFD59FE4_u);
        if (autoDFD59FE4_var == null) { break; }
        UnitGroupAdd(gv_teamInfo2.lv_nexusGroup, autoDFD59FE4_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_nexusGroupInit_Init () {
    gt_nexusGroupInit = TriggerCreate("gt_nexusGroupInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: resourceSettings
//--------------------------------------------------------------------------------------------------
bool gt_resourceSettings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetResourceTradeCountdownTime(0);
    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    UISetResourceVisible(gv_teamInfo1.lv_fighterGroup, c_resourceTypeMinerals, false);
    UISetResourceVisible(gv_teamInfo1.lv_fighterGroup, c_resourceTypeVespene, false);
    UISetResourceVisible(gv_teamInfo2.lv_fighterGroup, c_resourceTypeMinerals, false);
    UISetResourceVisible(gv_teamInfo2.lv_fighterGroup, c_resourceTypeVespene, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_resourceSettings_Init () {
    gt_resourceSettings = TriggerCreate("gt_resourceSettings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: allianceSettings
//--------------------------------------------------------------------------------------------------
bool gt_allianceSettings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA43E557F_g;
    int autoA43E557F_var;
    playergroup auto3245329C_g;
    int auto3245329C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetPlayerGroupAlliance(gv_playerGroupInfo1.lv_players, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAllianceAspectForPlayerGroup(gv_playerGroupInfo1.lv_players, c_allianceIdPower, true);
    libNtve_gf_SetAllianceAspectForPlayerGroup(gv_playerGroupInfo1.lv_players, c_allianceIdSpend, true);
    autoA43E557F_g = gv_playerGroupInfo1.lv_users;
    autoA43E557F_var = -1;
    while (true) {
        autoA43E557F_var = PlayerGroupNextPlayer(autoA43E557F_g, autoA43E557F_var);
        if (autoA43E557F_var < 0) { break; }
        PlayerSetAlliance(13, c_allianceIdControl, autoA43E557F_var, true);
    }
    libNtve_gf_SetPlayerGroupAlliance(gv_playerGroupInfo2.lv_players, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAllianceAspectForPlayerGroup(gv_playerGroupInfo2.lv_players, c_allianceIdPower, true);
    libNtve_gf_SetAllianceAspectForPlayerGroup(gv_playerGroupInfo2.lv_players, c_allianceIdSpend, true);
    auto3245329C_g = gv_playerGroupInfo2.lv_users;
    auto3245329C_var = -1;
    while (true) {
        auto3245329C_var = PlayerGroupNextPlayer(auto3245329C_g, auto3245329C_var);
        if (auto3245329C_var < 0) { break; }
        PlayerSetAlliance(14, c_allianceIdControl, auto3245329C_var, true);
    }
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_playerGroupInfo1.lv_players, gv_playerGroupInfo2.lv_players, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_playerGroupInfo2.lv_players, gv_playerGroupInfo1.lv_players, libNtve_ge_AllianceSetting_Enemy);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_allianceSettings_Init () {
    gt_allianceSettings = TriggerCreate("gt_allianceSettings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: supplyLimit
//--------------------------------------------------------------------------------------------------
bool gt_supplyLimit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__supplyLimit;

    // Automatic Variable Declarations
    string auto0D9D2283_val;
    playergroup auto2F5433F5_g;
    int auto2F5433F5_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto0D9D2283_val = GameAttributeGameValue("[bnet:NF1B_SCEvoMulti/0.0/236353,file:Mods\\NF1B_SCEvoMulti.SC2Mod]3");
    if (auto0D9D2283_val == "0001") {
        lv__supplyLimit = 200;
    }
    else if (auto0D9D2283_val == "0002") {
        lv__supplyLimit = 250;
    }
    else if (auto0D9D2283_val == "0003") {
        lv__supplyLimit = 300;
    }
    else if (auto0D9D2283_val == "0004") {
        lv__supplyLimit = 350;
    }
    else if (auto0D9D2283_val == "0005") {
        lv__supplyLimit = 400;
    }
    else {
        lv__supplyLimit = 300;
    }
    auto2F5433F5_g = PlayerGroupAll();
    auto2F5433F5_var = -1;
    while (true) {
        auto2F5433F5_var = PlayerGroupNextPlayer(auto2F5433F5_g, auto2F5433F5_var);
        if (auto2F5433F5_var < 0) { break; }
        PlayerModifyPropertyInt(auto2F5433F5_var, c_playerPropSuppliesLimit, c_playerPropOperSetTo, lv__supplyLimit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_supplyLimit_Init () {
    gt_supplyLimit = TriggerCreate("gt_supplyLimit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: builderInfoDisplay
//--------------------------------------------------------------------------------------------------
bool gt_builderInfoDisplay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoD5E56F5B_val;
    string autoEB33B166_val;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(300, 200, c_anchorTopLeft, 10, 10, true);
    gv_racePanel = DialogLastCreated();
    DialogSetImageVisible(gv_racePanel, false);
    DialogSetVisible(gv_racePanel, PlayerGroupAll(), true);
    autoD5E56F5B_val = gv_teamInfo1.lv_race;
    if (autoD5E56F5B_val == "Terr") {
        libNtve_gf_CreateDialogItemImage(gv_racePanel, 48, 52, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_terran.dds", c_triggerImageTypeNormal, true, gv_teamInfo1.lv_color, c_triggerBlendModeNormal);
    }
    else if (autoD5E56F5B_val == "BWTe") {
        libNtve_gf_CreateDialogItemImage(gv_racePanel, 48, 52, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWterran.dds", c_triggerImageTypeNormal, true, gv_teamInfo1.lv_color, c_triggerBlendModeNormal);
    }
    else if (autoD5E56F5B_val == "Zerg") {
        libNtve_gf_CreateDialogItemImage(gv_racePanel, 48, 52, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_zerg.dds", c_triggerImageTypeNormal, true, gv_teamInfo1.lv_color, c_triggerBlendModeNormal);
    }
    else if (autoD5E56F5B_val == "BWZe") {
        libNtve_gf_CreateDialogItemImage(gv_racePanel, 48, 52, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWzerg.dds", c_triggerImageTypeNormal, true, gv_teamInfo1.lv_color, c_triggerBlendModeNormal);
    }
    else if (autoD5E56F5B_val == "Prot") {
        libNtve_gf_CreateDialogItemImage(gv_racePanel, 48, 52, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_protoss.dds", c_triggerImageTypeNormal, true, gv_teamInfo1.lv_color, c_triggerBlendModeNormal);
    }
    else if (autoD5E56F5B_val == "BWPr") {
        libNtve_gf_CreateDialogItemImage(gv_racePanel, 48, 52, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWprotoss.dds", c_triggerImageTypeNormal, true, gv_teamInfo1.lv_color, c_triggerBlendModeNormal);
    }
    else {
    }
    gv_team1_UI.lv_builderIcon = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_racePanel, 200, 50, c_anchorTopLeft, 60, 15, PlayerName(gv_teamInfo1.lv_builder), gv_teamInfo1.lv_color, false, 2.0);
    gv_team1_UI.lv_builderName = DialogControlLastCreated();
    autoEB33B166_val = gv_teamInfo2.lv_race;
    if (autoEB33B166_val == "Terr") {
        libNtve_gf_CreateDialogItemImage(gv_racePanel, 48, 52, c_anchorTopLeft, 0, 60, StringToText(""), "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_terran.dds", c_triggerImageTypeNormal, true, gv_teamInfo2.lv_color, c_triggerBlendModeNormal);
    }
    else if (autoEB33B166_val == "BWTe") {
        libNtve_gf_CreateDialogItemImage(gv_racePanel, 48, 52, c_anchorTopLeft, 0, 60, StringToText(""), "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWterran.dds", c_triggerImageTypeNormal, true, gv_teamInfo2.lv_color, c_triggerBlendModeNormal);
    }
    else if (autoEB33B166_val == "Zerg") {
        libNtve_gf_CreateDialogItemImage(gv_racePanel, 48, 52, c_anchorTopLeft, 0, 60, StringToText(""), "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_zerg.dds", c_triggerImageTypeNormal, true, gv_teamInfo2.lv_color, c_triggerBlendModeNormal);
    }
    else if (autoEB33B166_val == "BWZe") {
        libNtve_gf_CreateDialogItemImage(gv_racePanel, 48, 52, c_anchorTopLeft, 0, 60, StringToText(""), "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWzerg.dds", c_triggerImageTypeNormal, true, gv_teamInfo2.lv_color, c_triggerBlendModeNormal);
    }
    else if (autoEB33B166_val == "Prot") {
        libNtve_gf_CreateDialogItemImage(gv_racePanel, 48, 52, c_anchorTopLeft, 0, 60, StringToText(""), "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_protoss.dds", c_triggerImageTypeNormal, true, gv_teamInfo2.lv_color, c_triggerBlendModeNormal);
    }
    else if (autoEB33B166_val == "BWPr") {
        libNtve_gf_CreateDialogItemImage(gv_racePanel, 48, 52, c_anchorTopLeft, 0, 60, StringToText(""), "Assets\\Textures\\sc2_ui_loadingscreen_playercard_raceindicator_BWprotoss.dds", c_triggerImageTypeNormal, true, gv_teamInfo2.lv_color, c_triggerBlendModeNormal);
    }
    else {
    }
    gv_team2_UI.lv_builderIcon = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_racePanel, 200, 50, c_anchorTopLeft, 60, 75, PlayerName(gv_teamInfo2.lv_builder), gv_teamInfo2.lv_color, false, 2.0);
    gv_team2_UI.lv_builderName = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_builderInfoDisplay_Init () {
    gt_builderInfoDisplay = TriggerCreate("gt_builderInfoDisplay_Func");
    TriggerAddEventMapInit(gt_builderInfoDisplay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: showPanel
//--------------------------------------------------------------------------------------------------
bool gt_showPanel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_userInfoPanel, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_showPanel_Init () {
    gt_showPanel = TriggerCreate("gt_showPanel_Func");
    TriggerAddEventKeyPressed(gt_showPanel, c_playerAny, c_keyX, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: hidePanel
//--------------------------------------------------------------------------------------------------
bool gt_hidePanel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_userInfoPanel, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_hidePanel_Init () {
    gt_hidePanel = TriggerCreate("gt_hidePanel_Func");
    TriggerAddEventKeyPressed(gt_hidePanel, c_playerAny, c_keyX, false, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: userPanel
//--------------------------------------------------------------------------------------------------
bool gt_userPanel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__height;
    int lv__x1;
    int lv__x2;
    int lv__length;
    int lv__width;

    // Automatic Variable Declarations
    playergroup autoAA8EB649_g;
    int autoAA8EB649_var;
    playergroup auto20762A18_g;
    int auto20762A18_var;

    // Variable Initialization
    lv__height = 50;
    lv__length = 600;
    lv__width = 450;

    // Actions
    if (!runActions) {
        return true;
    }

    lv__x1 = lv__length;
    lv__x1 /= 2;
    lv__x1 += 50;
    lv__x2 = lv__x1;
    lv__x2 += 30;
    DialogCreate(lv__length, lv__width, c_anchorCenter, 0, 0, true);
    gv_userInfoPanel = DialogLastCreated();
    autoAA8EB649_g = gv_playerGroupInfo1.lv_users;
    autoAA8EB649_var = -1;
    while (true) {
        autoAA8EB649_var = PlayerGroupNextPlayer(autoAA8EB649_g, autoAA8EB649_var);
        if (autoAA8EB649_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, lv__height, IntToText(autoAA8EB649_var), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 80, lv__height, PlayerName(autoAA8EB649_var), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv__height += 40;
    }
    lv__height = 50;
    auto20762A18_g = gv_playerGroupInfo2.lv_users;
    auto20762A18_var = -1;
    while (true) {
        auto20762A18_var = PlayerGroupNextPlayer(auto20762A18_g, auto20762A18_var);
        if (auto20762A18_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, lv__x1, lv__height, IntToText(auto20762A18_var), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, lv__x2, lv__height, PlayerName(auto20762A18_var), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv__height += 40;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_userPanel_Init () {
    gt_userPanel = TriggerCreate("gt_userPanel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: tipRole
//--------------------------------------------------------------------------------------------------
bool gt_tipRole_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(gv_teamInfo1.lv_builder), c_messageAreaSubtitle, StringExternal("Param/Value/CF2DDDB5"));
    UIDisplayMessage(gv_teamInfo1.lv_fighterGroup, c_messageAreaSubtitle, StringExternal("Param/Value/6AE9E7D6"));
    UIDisplayMessage(PlayerGroupSingle(gv_teamInfo2.lv_builder), c_messageAreaSubtitle, StringExternal("Param/Value/CAE6A306"));
    UIDisplayMessage(gv_teamInfo2.lv_fighterGroup, c_messageAreaSubtitle, StringExternal("Param/Value/10816450"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tipRole_Init () {
    gt_tipRole = TriggerCreate("gt_tipRole_Func");
    TriggerAddEventTimeElapsed(gt_tipRole, 0.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tipCommands
//--------------------------------------------------------------------------------------------------
bool gt_tipCommands_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/5ED931F6"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/F4D1DCD3"), StringToText(""), "Assets\\Textures\\ui_btn_aicommand_commandcard_claim.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tipCommands_Init () {
    gt_tipCommands = TriggerCreate("gt_tipCommands_Func");
    TriggerAddEventTimeElapsed(gt_tipCommands, 0.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tipHotkeys
//--------------------------------------------------------------------------------------------------
bool gt_tipHotkeys_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/194069C0"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/FD733CCC"), StringToText(""), "Assets\\Textures\\ui_tipicon_campaign_zerus03-yagdratunnel.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tipHotkeys_Init () {
    gt_tipHotkeys = TriggerCreate("gt_tipHotkeys_Func");
    TriggerAddEventTimeElapsed(gt_tipHotkeys, 0.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tipDebugCommands
//--------------------------------------------------------------------------------------------------
bool gt_tipDebugCommands_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/DA162D42"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/56DB4C47"), StringToText(""), "Assets\\Textures\\ui_tipicon_campaign_space01-repair.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tipDebugCommands_Init () {
    gt_tipDebugCommands = TriggerCreate("gt_tipDebugCommands_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: tipGG
//--------------------------------------------------------------------------------------------------
bool gt_tipGG_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/CA3F7518"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tipGG_Init () {
    gt_tipGG = TriggerCreate("gt_tipGG_Func");
    TriggerAddEventTimeElapsed(gt_tipGG, 120.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tipSensorTower
//--------------------------------------------------------------------------------------------------
bool gt_tipSensorTower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "EngineeringBay"))) {
            return false;
        }

        if (!((((UnitGetOwner(EventUnitProgressUnit()) == gv_teamInfo1.lv_builder) && (gv_tipSensorTowerFlag1 == false)) || ((UnitGetOwner(EventUnitProgressUnit()) == gv_teamInfo2.lv_builder) && (gv_tipSensorTowerFlag2 == false))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnitProgressUnit()) == gv_teamInfo1.lv_builder) && (gv_tipSensorTowerFlag1 == false)) {
        gv_tipSensorTowerFlag1 = true;
        UIDisplayMessage(gv_playerGroupInfo1.lv_users, c_messageAreaSubtitle, StringExternal("Param/Value/7998EB08"));
    }
    else {
        gv_tipSensorTowerFlag2 = true;
        UIDisplayMessage(gv_playerGroupInfo2.lv_users, c_messageAreaSubtitle, StringExternal("Param/Value/BC76442D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tipSensorTower_Init () {
    gt_tipSensorTower = TriggerCreate("gt_tipSensorTower_Func");
    TriggerAddEventUnitConstructProgress(gt_tipSensorTower, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tipRace
//--------------------------------------------------------------------------------------------------
bool gt_tipRace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/AEE0382B"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tipRace_Init () {
    gt_tipRace = TriggerCreate("gt_tipRace_Func");
    TriggerAddEventTimeElapsed(gt_tipRace, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tipHelp
//--------------------------------------------------------------------------------------------------
bool gt_tipHelp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/1AC85A47"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tipHelp_Init () {
    gt_tipHelp = TriggerCreate("gt_tipHelp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: tipZerg
//--------------------------------------------------------------------------------------------------
bool gt_tipZerg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_teamInfo1.lv_race == "Zerg") || (gv_teamInfo1.lv_race == "BWZe"))) {
        UIDisplayMessage(gv_playerGroupInfo1.lv_users, c_messageAreaSubtitle, StringExternal("Param/Value/9F90689B"));
        Wait(10.0, c_timeReal);
        UIDisplayMessage(gv_playerGroupInfo1.lv_users, c_messageAreaSubtitle, StringExternal("Param/Value/A34A344A"));
    }

    if (((gv_teamInfo2.lv_race == "Zerg") || (gv_teamInfo2.lv_race == "BWZe"))) {
        UIDisplayMessage(gv_playerGroupInfo2.lv_users, c_messageAreaSubtitle, StringExternal("Param/Value/B9FAD2E2"));
        Wait(10.0, c_timeReal);
        UIDisplayMessage(gv_playerGroupInfo2.lv_users, c_messageAreaSubtitle, StringExternal("Param/Value/047E93E7"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tipZerg_Init () {
    gt_tipZerg = TriggerCreate("gt_tipZerg_Func");
    TriggerAddEventTimeElapsed(gt_tipZerg, 60.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: changeBuilder
//--------------------------------------------------------------------------------------------------
bool gt_changeBuilder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__team;
    int lv__oldBuilder;
    int lv__newBuilder;
    bool lv__valid;

    // Automatic Variable Declarations
    string auto60EB1B58_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TimerGetElapsed(gv_timer) <= 60.0))) {
            return false;
        }

        if (!(((EventPlayer() == gv_teamInfo1.lv_builder) || (EventPlayer() == gv_teamInfo2.lv_builder)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__oldBuilder = EventPlayer();
    auto60EB1B58_val = EventChatMessage(false);
    if (auto60EB1B58_val == "-b 1") {
        lv__newBuilder = 1;
    }
    else if (auto60EB1B58_val == "-b 2") {
        lv__newBuilder = 2;
    }
    else if (auto60EB1B58_val == "-b 3") {
        lv__newBuilder = 3;
    }
    else if (auto60EB1B58_val == "-b 4") {
        lv__newBuilder = 4;
    }
    else if (auto60EB1B58_val == "-b 5") {
        lv__newBuilder = 5;
    }
    else if (auto60EB1B58_val == "-b 6") {
        lv__newBuilder = 6;
    }
    else if (auto60EB1B58_val == "-b 7") {
        lv__newBuilder = 7;
    }
    else if (auto60EB1B58_val == "-b 8") {
        lv__newBuilder = 8;
    }
    else if (auto60EB1B58_val == "-b 9") {
        lv__newBuilder = 9;
    }
    else if (auto60EB1B58_val == "-b 10") {
        lv__newBuilder = 10;
    }
    else if (auto60EB1B58_val == "-b 11") {
        lv__newBuilder = 11;
    }
    else if (auto60EB1B58_val == "-b 12") {
        lv__newBuilder = 12;
    }
    else {
    }
    if ((lv__oldBuilder == gv_teamInfo1.lv_builder) && (PlayerGroupHasPlayer(gv_teamInfo1.lv_fighterGroup, lv__newBuilder) == true)) {
        lv__team = 1;
        lv__valid = true;
    }
    else if ((lv__oldBuilder == gv_teamInfo2.lv_builder) && (PlayerGroupHasPlayer(gv_teamInfo2.lv_fighterGroup, lv__newBuilder) == true)) {
        lv__team = 2;
        lv__valid = true;
    }
    if ((lv__valid == true)) {
        gf_updateRole(lv__team, lv__oldBuilder, lv__newBuilder);
        gf_updateFighterMode(lv__team);
        gf_ownershipForChangeBuilder(lv__team, lv__oldBuilder, lv__newBuilder);
        gf_MaintainSupplyUnchanged(lv__team, lv__oldBuilder, lv__newBuilder);
        gf_updateResource(lv__team, lv__oldBuilder, lv__newBuilder);
        gf_updateBuilderName(lv__newBuilder, lv__team);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_changeBuilder_Init () {
    gt_changeBuilder = TriggerCreate("gt_changeBuilder_Func");
    TriggerAddEventChatMessage(gt_changeBuilder, c_playerAny, ("-b 1"), true);
    TriggerAddEventChatMessage(gt_changeBuilder, c_playerAny, ("-b 2"), true);
    TriggerAddEventChatMessage(gt_changeBuilder, c_playerAny, ("-b 3"), true);
    TriggerAddEventChatMessage(gt_changeBuilder, c_playerAny, ("-b 4"), true);
    TriggerAddEventChatMessage(gt_changeBuilder, c_playerAny, ("-b 5"), true);
    TriggerAddEventChatMessage(gt_changeBuilder, c_playerAny, ("-b 6"), true);
    TriggerAddEventChatMessage(gt_changeBuilder, c_playerAny, ("-b 7"), true);
    TriggerAddEventChatMessage(gt_changeBuilder, c_playerAny, ("-b 8"), true);
    TriggerAddEventChatMessage(gt_changeBuilder, c_playerAny, ("-b 9"), true);
    TriggerAddEventChatMessage(gt_changeBuilder, c_playerAny, ("-b 10"), true);
    TriggerAddEventChatMessage(gt_changeBuilder, c_playerAny, ("-b 11"), true);
    TriggerAddEventChatMessage(gt_changeBuilder, c_playerAny, ("-b 12"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: giveupBuilderRole
//--------------------------------------------------------------------------------------------------
bool gt_giveupBuilderRole_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__team;
    int lv__oldBuilder;
    int lv__newBuilder;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TimerGetElapsed(gv_timer) <= 60.0))) {
            return false;
        }

        if (!(((EventPlayer() == gv_teamInfo1.lv_builder) || (EventPlayer() == gv_teamInfo2.lv_builder)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__oldBuilder = EventPlayer();
    lv__team = gf_getTeamOfPlayer(lv__oldBuilder);
    lv__newBuilder = gf_randomFighterFromTeam(lv__team);
    gf_updateRole(lv__team, lv__oldBuilder, lv__newBuilder);
    gf_updateFighterMode(lv__team);
    gf_ownershipForChangeBuilder(lv__team, lv__oldBuilder, lv__newBuilder);
    gf_MaintainSupplyUnchanged(lv__team, lv__oldBuilder, lv__newBuilder);
    gf_updateResource(lv__team, lv__oldBuilder, lv__newBuilder);
    gf_updateBuilderName(lv__newBuilder, lv__team);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_giveupBuilderRole_Init () {
    gt_giveupBuilderRole = TriggerCreate("gt_giveupBuilderRole_Func");
    TriggerAddEventChatMessage(gt_giveupBuilderRole, c_playerAny, ("-g"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: fighterQuit
//--------------------------------------------------------------------------------------------------
bool gt_fighterQuit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_ggFlag == false))) {
            return false;
        }

        if (!((EventPlayer() != gv_teamInfo1.lv_builder))) {
            return false;
        }

        if (!((EventPlayer() != gv_teamInfo2.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    if ((PlayerGroupHasPlayer(gv_playerGroupInfo1.lv_users, lv__player) == true)) {
        PlayerGroupRemove(gv_playerGroupInfo1.lv_users, lv__player);
        PlayerGroupRemove(gv_playerGroupInfo1.lv_fightersWithNeutral, lv__player);
        PlayerGroupRemove(gv_teamInfo1.lv_fighterGroup, lv__player);
        gv_teamInfo1.lv_userNum -= 1;
        gv_teamInfo1.lv_fighterNum -= 1;
        if ((gv_teamInfo1.lv_fighterNum == 0)) {
            gf_fighterGG(1);
        }

        if ((gv_teamInfo1.lv_fighterNum == 1)) {
            gf_changeFighterMode(1, ge_fighterMode__1F1B);
        }

    }
    else {
        PlayerGroupRemove(gv_playerGroupInfo2.lv_users, lv__player);
        PlayerGroupRemove(gv_playerGroupInfo2.lv_fightersWithNeutral, lv__player);
        PlayerGroupRemove(gv_teamInfo2.lv_fighterGroup, lv__player);
        gv_teamInfo2.lv_userNum -= 1;
        gv_teamInfo2.lv_fighterNum -= 1;
        if ((gv_teamInfo2.lv_fighterNum == 0)) {
            gf_fighterGG(2);
        }

        if ((gv_teamInfo2.lv_fighterNum == 1)) {
            gf_changeFighterMode(2, ge_fighterMode__1F1B);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_fighterQuit_Init () {
    gt_fighterQuit = TriggerCreate("gt_fighterQuit_Func");
    TriggerAddEventPlayerLeft(gt_fighterQuit, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: resourceDisplay1
//--------------------------------------------------------------------------------------------------
bool gt_resourceDisplay1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(300, 100, c_anchorTopRight, 220, 0, true);
    gv_resourcePanel1 = DialogLastCreated();
    DialogSetImageVisible(gv_resourcePanel1, false);
    DialogSetVisible(gv_resourcePanel1, gv_teamInfo1.lv_fighterGroup, true);
    libNtve_gf_CreateDialogItemImage(gv_resourcePanel1, 30, 30, c_anchorTopLeft, 15, 15, StringToText(""), "Assets\\Textures\\ui_emoticons_minerals.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_resourcePanel1, 200, 50, c_anchorTopLeft, 50, 23, StringExternal("Param/Value/CEF41543"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_teamInfo1.lv_mineralText = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_resourcePanel1, 30, 30, c_anchorTopLeft, 150, 15, StringToText(""), "Assets\\Textures\\ui_emoticons_gas.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_resourcePanel1, 200, 50, c_anchorTopLeft, 185, 23, StringExternal("Param/Value/E33F8417"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_teamInfo1.lv_vespeneText = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_resourceDisplay1_Init () {
    gt_resourceDisplay1 = TriggerCreate("gt_resourceDisplay1_Func");
    TriggerAddEventMapInit(gt_resourceDisplay1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: resourceDisplay2
//--------------------------------------------------------------------------------------------------
bool gt_resourceDisplay2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(300, 125, c_anchorTopRight, 220, 0, true);
    gv_resourcePanel2 = DialogLastCreated();
    DialogSetImageVisible(gv_resourcePanel2, false);
    DialogSetVisible(gv_resourcePanel2, gv_teamInfo2.lv_fighterGroup, true);
    libNtve_gf_CreateDialogItemImage(gv_resourcePanel2, 30, 30, c_anchorTopLeft, 15, 15, StringToText(""), "Assets\\Textures\\ui_emoticons_minerals.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_resourcePanel2, 200, 50, c_anchorTopLeft, 50, 23, StringExternal("Param/Value/C0AF10B1"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_teamInfo2.lv_mineralText = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_resourcePanel2, 30, 30, c_anchorTopLeft, 150, 15, StringToText(""), "Assets\\Textures\\ui_emoticons_gas.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_resourcePanel2, 200, 50, c_anchorTopLeft, 185, 23, StringExternal("Param/Value/E539788E"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_teamInfo2.lv_vespeneText = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_resourceDisplay2_Init () {
    gt_resourceDisplay2 = TriggerCreate("gt_resourceDisplay2_Func");
    TriggerAddEventMapInit(gt_resourceDisplay2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: builderMineralUpdate1
//--------------------------------------------------------------------------------------------------
bool gt_builderMineralUpdate1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_teamInfo1.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_teamInfo1.lv_mineralText, IntToText(PlayerGetPropertyInt(gv_teamInfo1.lv_builder, c_playerPropMinerals)), gv_teamInfo1.lv_fighterGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_builderMineralUpdate1_Init () {
    gt_builderMineralUpdate1 = TriggerCreate("gt_builderMineralUpdate1_Func");
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate1, 1, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate1, 2, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate1, 3, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate1, 4, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate1, 5, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate1, 6, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate1, 7, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate1, 8, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate1, 9, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate1, 10, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate1, 11, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate1, 12, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate1, 13, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate1, 14, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: builderVespeneUpdate1
//--------------------------------------------------------------------------------------------------
bool gt_builderVespeneUpdate1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_teamInfo1.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_teamInfo1.lv_vespeneText, IntToText(PlayerGetPropertyInt(gv_teamInfo1.lv_builder, c_playerPropVespene)), gv_teamInfo1.lv_fighterGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_builderVespeneUpdate1_Init () {
    gt_builderVespeneUpdate1 = TriggerCreate("gt_builderVespeneUpdate1_Func");
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate1, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate1, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate1, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate1, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate1, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate1, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate1, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate1, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate1, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate1, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate1, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate1, 12, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate1, 13, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate1, 14, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: fighterMineralUpdate1
//--------------------------------------------------------------------------------------------------
bool gt_fighterMineralUpdate1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_playerGroupInfo1.lv_fightersWithNeutral, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    PlayerModifyPropertyFixed(gv_teamInfo1.lv_builder, c_playerPropMinerals, c_playerPropOperAdd, PlayerGetPropertyFixed(lv__player, c_playerPropMinerals));
    TriggerEnable(TriggerGetCurrent(), false);
    PlayerModifyPropertyFixed(lv__player, c_playerPropMinerals, c_playerPropOperSetTo, 0.0);
    TriggerEnable(TriggerGetCurrent(), true);
    libNtve_gf_SetDialogItemText(gv_teamInfo1.lv_mineralText, IntToText(PlayerGetPropertyInt(gv_teamInfo1.lv_builder, c_playerPropMinerals)), gv_teamInfo1.lv_fighterGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_fighterMineralUpdate1_Init () {
    gt_fighterMineralUpdate1 = TriggerCreate("gt_fighterMineralUpdate1_Func");
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate1, 1, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate1, 2, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate1, 3, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate1, 4, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate1, 5, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate1, 6, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate1, 7, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate1, 8, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate1, 9, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate1, 10, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate1, 11, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate1, 12, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate1, 13, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate1, 14, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: fighterVespeneUpdate1
//--------------------------------------------------------------------------------------------------
bool gt_fighterVespeneUpdate1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_playerGroupInfo1.lv_fightersWithNeutral, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    PlayerModifyPropertyFixed(gv_teamInfo1.lv_builder, c_playerPropVespene, c_playerPropOperAdd, PlayerGetPropertyFixed(lv__player, c_playerPropVespene));
    TriggerEnable(TriggerGetCurrent(), false);
    PlayerModifyPropertyFixed(lv__player, c_playerPropVespene, c_playerPropOperSetTo, 0.0);
    TriggerEnable(TriggerGetCurrent(), true);
    libNtve_gf_SetDialogItemText(gv_teamInfo1.lv_vespeneText, IntToText(PlayerGetPropertyInt(gv_teamInfo1.lv_builder, c_playerPropVespene)), gv_teamInfo1.lv_fighterGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_fighterVespeneUpdate1_Init () {
    gt_fighterVespeneUpdate1 = TriggerCreate("gt_fighterVespeneUpdate1_Func");
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate1, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate1, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate1, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate1, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate1, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate1, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate1, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate1, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate1, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate1, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate1, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate1, 12, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate1, 13, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate1, 14, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: builderMineralUpdate2
//--------------------------------------------------------------------------------------------------
bool gt_builderMineralUpdate2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_teamInfo2.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_teamInfo2.lv_mineralText, IntToText(PlayerGetPropertyInt(gv_teamInfo2.lv_builder, c_playerPropMinerals)), gv_teamInfo2.lv_fighterGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_builderMineralUpdate2_Init () {
    gt_builderMineralUpdate2 = TriggerCreate("gt_builderMineralUpdate2_Func");
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate2, 1, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate2, 2, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate2, 3, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate2, 4, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate2, 5, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate2, 6, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate2, 7, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate2, 8, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate2, 9, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate2, 10, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate2, 11, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate2, 12, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate2, 13, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_builderMineralUpdate2, 14, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: builderVespeneUpdate2
//--------------------------------------------------------------------------------------------------
bool gt_builderVespeneUpdate2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_teamInfo2.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_teamInfo2.lv_vespeneText, IntToText(PlayerGetPropertyInt(gv_teamInfo2.lv_builder, c_playerPropVespene)), gv_teamInfo2.lv_fighterGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_builderVespeneUpdate2_Init () {
    gt_builderVespeneUpdate2 = TriggerCreate("gt_builderVespeneUpdate2_Func");
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate2, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate2, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate2, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate2, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate2, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate2, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate2, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate2, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate2, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate2, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate2, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate2, 12, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate2, 13, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_builderVespeneUpdate2, 14, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: fighterMineralUpdate2
//--------------------------------------------------------------------------------------------------
bool gt_fighterMineralUpdate2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_playerGroupInfo2.lv_fightersWithNeutral, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    PlayerModifyPropertyFixed(gv_teamInfo2.lv_builder, c_playerPropMinerals, c_playerPropOperAdd, PlayerGetPropertyFixed(lv__player, c_playerPropMinerals));
    TriggerEnable(TriggerGetCurrent(), false);
    PlayerModifyPropertyFixed(lv__player, c_playerPropMinerals, c_playerPropOperSetTo, 0.0);
    TriggerEnable(TriggerGetCurrent(), true);
    libNtve_gf_SetDialogItemText(gv_teamInfo2.lv_mineralText, IntToText(PlayerGetPropertyInt(gv_teamInfo2.lv_builder, c_playerPropMinerals)), gv_teamInfo2.lv_fighterGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_fighterMineralUpdate2_Init () {
    gt_fighterMineralUpdate2 = TriggerCreate("gt_fighterMineralUpdate2_Func");
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate2, 1, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate2, 2, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate2, 3, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate2, 4, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate2, 5, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate2, 6, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate2, 7, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate2, 8, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate2, 9, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate2, 10, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate2, 11, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate2, 12, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate2, 13, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_fighterMineralUpdate2, 14, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: fighterVespeneUpdate2
//--------------------------------------------------------------------------------------------------
bool gt_fighterVespeneUpdate2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_playerGroupInfo2.lv_fightersWithNeutral, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    PlayerModifyPropertyFixed(gv_teamInfo2.lv_builder, c_playerPropVespene, c_playerPropOperAdd, PlayerGetPropertyFixed(lv__player, c_playerPropVespene));
    TriggerEnable(TriggerGetCurrent(), false);
    PlayerModifyPropertyFixed(lv__player, c_playerPropVespene, c_playerPropOperSetTo, 0.0);
    TriggerEnable(TriggerGetCurrent(), true);
    libNtve_gf_SetDialogItemText(gv_teamInfo2.lv_vespeneText, IntToText(PlayerGetPropertyInt(gv_teamInfo2.lv_builder, c_playerPropVespene)), gv_teamInfo2.lv_fighterGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_fighterVespeneUpdate2_Init () {
    gt_fighterVespeneUpdate2 = TriggerCreate("gt_fighterVespeneUpdate2_Func");
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate2, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate2, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate2, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate2, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate2, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate2, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate2, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate2, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate2, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate2, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate2, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate2, 12, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate2, 13, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_fighterVespeneUpdate2, 14, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: builderMadeChange1
//--------------------------------------------------------------------------------------------------
bool gt_builderMadeChange1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto087069CC_g;
    int auto087069CC_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_teamInfo1.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_teamInfo1.lv_supplyMade = PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesMade);
    TriggerEnable(gt_fighterMadeChange1, false);
    auto087069CC_g = gv_playerGroupInfo1.lv_fightersWithNeutral;
    auto087069CC_var = -1;
    while (true) {
        auto087069CC_var = PlayerGroupNextPlayer(auto087069CC_g, auto087069CC_var);
        if (auto087069CC_var < 0) { break; }
        PlayerModifyPropertyFixed(auto087069CC_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, gv_teamInfo1.lv_supplyMade);
    }
    TriggerEnable(gt_fighterMadeChange1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_builderMadeChange1_Init () {
    gt_builderMadeChange1 = TriggerCreate("gt_builderMadeChange1_Func");
    TriggerAddEventPlayerPropChange(gt_builderMadeChange1, 1, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange1, 2, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange1, 3, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange1, 4, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange1, 5, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange1, 6, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange1, 7, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange1, 8, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange1, 9, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange1, 10, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange1, 11, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange1, 12, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange1, 13, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange1, 14, c_playerPropSuppliesMade);
}

//--------------------------------------------------------------------------------------------------
// Trigger: builderUsedChange1
//--------------------------------------------------------------------------------------------------
bool gt_builderUsedChange1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9A2DBAF3_g;
    int auto9A2DBAF3_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_teamInfo1.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_teamInfo1.lv_supplyUsed = PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed);
    TriggerEnable(gt_fighterUsedChange1, false);
    auto9A2DBAF3_g = gv_playerGroupInfo1.lv_fightersWithNeutral;
    auto9A2DBAF3_var = -1;
    while (true) {
        auto9A2DBAF3_var = PlayerGroupNextPlayer(auto9A2DBAF3_g, auto9A2DBAF3_var);
        if (auto9A2DBAF3_var < 0) { break; }
        PlayerModifyPropertyFixed(auto9A2DBAF3_var, c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_teamInfo1.lv_supplyUsed);
    }
    TriggerEnable(gt_fighterUsedChange1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_builderUsedChange1_Init () {
    gt_builderUsedChange1 = TriggerCreate("gt_builderUsedChange1_Func");
    TriggerAddEventPlayerPropChange(gt_builderUsedChange1, 1, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange1, 2, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange1, 3, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange1, 4, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange1, 5, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange1, 6, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange1, 7, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange1, 8, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange1, 9, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange1, 10, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange1, 11, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange1, 12, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange1, 13, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange1, 14, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: fighterMadeChange1
//--------------------------------------------------------------------------------------------------
bool gt_fighterMadeChange1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto47B6A1A0_g;
    int auto47B6A1A0_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_playerGroupInfo1.lv_fightersWithNeutral, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_teamInfo1.lv_supplyMade = PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesMade);
    TriggerEnable(gt_builderMadeChange1, false);
    TriggerEnable(gt_fighterMadeChange1, false);
    auto47B6A1A0_g = gv_playerGroupInfo1.lv_players;
    auto47B6A1A0_var = -1;
    while (true) {
        auto47B6A1A0_var = PlayerGroupNextPlayer(auto47B6A1A0_g, auto47B6A1A0_var);
        if (auto47B6A1A0_var < 0) { break; }
        PlayerModifyPropertyFixed(auto47B6A1A0_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, gv_teamInfo1.lv_supplyMade);
    }
    TriggerEnable(gt_builderMadeChange1, true);
    TriggerEnable(gt_fighterMadeChange1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_fighterMadeChange1_Init () {
    gt_fighterMadeChange1 = TriggerCreate("gt_fighterMadeChange1_Func");
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange1, 1, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange1, 2, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange1, 3, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange1, 4, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange1, 5, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange1, 6, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange1, 7, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange1, 8, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange1, 9, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange1, 10, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange1, 11, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange1, 12, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange1, 13, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange1, 14, c_playerPropSuppliesMade);
}

//--------------------------------------------------------------------------------------------------
// Trigger: fighterUsedChange1
//--------------------------------------------------------------------------------------------------
bool gt_fighterUsedChange1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3A62394B_g;
    int auto3A62394B_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_playerGroupInfo1.lv_fightersWithNeutral, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_teamInfo1.lv_supplyUsed = PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed);
    TriggerEnable(gt_builderUsedChange1, false);
    TriggerEnable(gt_fighterUsedChange1, false);
    auto3A62394B_g = gv_playerGroupInfo1.lv_players;
    auto3A62394B_var = -1;
    while (true) {
        auto3A62394B_var = PlayerGroupNextPlayer(auto3A62394B_g, auto3A62394B_var);
        if (auto3A62394B_var < 0) { break; }
        PlayerModifyPropertyFixed(auto3A62394B_var, c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_teamInfo1.lv_supplyUsed);
    }
    TriggerEnable(gt_builderUsedChange1, true);
    TriggerEnable(gt_fighterUsedChange1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_fighterUsedChange1_Init () {
    gt_fighterUsedChange1 = TriggerCreate("gt_fighterUsedChange1_Func");
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange1, 1, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange1, 2, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange1, 3, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange1, 4, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange1, 5, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange1, 6, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange1, 7, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange1, 8, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange1, 9, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange1, 10, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange1, 11, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange1, 12, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange1, 13, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange1, 14, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: builderMadeChange2
//--------------------------------------------------------------------------------------------------
bool gt_builderMadeChange2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto6FF94E53_g;
    int auto6FF94E53_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_teamInfo2.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_teamInfo2.lv_supplyMade = PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesMade);
    TriggerEnable(gt_fighterMadeChange2, false);
    auto6FF94E53_g = gv_playerGroupInfo2.lv_fightersWithNeutral;
    auto6FF94E53_var = -1;
    while (true) {
        auto6FF94E53_var = PlayerGroupNextPlayer(auto6FF94E53_g, auto6FF94E53_var);
        if (auto6FF94E53_var < 0) { break; }
        PlayerModifyPropertyFixed(auto6FF94E53_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, gv_teamInfo2.lv_supplyMade);
    }
    TriggerEnable(gt_fighterMadeChange2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_builderMadeChange2_Init () {
    gt_builderMadeChange2 = TriggerCreate("gt_builderMadeChange2_Func");
    TriggerAddEventPlayerPropChange(gt_builderMadeChange2, 1, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange2, 2, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange2, 3, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange2, 4, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange2, 5, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange2, 6, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange2, 7, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange2, 8, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange2, 9, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange2, 10, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange2, 11, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange2, 12, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange2, 13, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_builderMadeChange2, 14, c_playerPropSuppliesMade);
}

//--------------------------------------------------------------------------------------------------
// Trigger: builderUsedChange2
//--------------------------------------------------------------------------------------------------
bool gt_builderUsedChange2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF93ECF3B_g;
    int autoF93ECF3B_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_teamInfo2.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_teamInfo2.lv_supplyUsed = PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed);
    TriggerEnable(gt_fighterUsedChange2, false);
    autoF93ECF3B_g = gv_playerGroupInfo2.lv_fightersWithNeutral;
    autoF93ECF3B_var = -1;
    while (true) {
        autoF93ECF3B_var = PlayerGroupNextPlayer(autoF93ECF3B_g, autoF93ECF3B_var);
        if (autoF93ECF3B_var < 0) { break; }
        PlayerModifyPropertyFixed(autoF93ECF3B_var, c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_teamInfo2.lv_supplyUsed);
    }
    TriggerEnable(gt_fighterUsedChange2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_builderUsedChange2_Init () {
    gt_builderUsedChange2 = TriggerCreate("gt_builderUsedChange2_Func");
    TriggerAddEventPlayerPropChange(gt_builderUsedChange2, 1, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange2, 2, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange2, 3, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange2, 4, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange2, 5, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange2, 6, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange2, 7, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange2, 8, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange2, 9, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange2, 10, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange2, 11, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange2, 12, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange2, 13, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_builderUsedChange2, 14, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: fighterMadeChange2
//--------------------------------------------------------------------------------------------------
bool gt_fighterMadeChange2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2CE8C1AD_g;
    int auto2CE8C1AD_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_playerGroupInfo2.lv_fightersWithNeutral, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_teamInfo2.lv_supplyMade = PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesMade);
    TriggerEnable(gt_builderMadeChange2, false);
    TriggerEnable(gt_fighterMadeChange2, false);
    auto2CE8C1AD_g = gv_playerGroupInfo2.lv_players;
    auto2CE8C1AD_var = -1;
    while (true) {
        auto2CE8C1AD_var = PlayerGroupNextPlayer(auto2CE8C1AD_g, auto2CE8C1AD_var);
        if (auto2CE8C1AD_var < 0) { break; }
        PlayerModifyPropertyFixed(auto2CE8C1AD_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, gv_teamInfo2.lv_supplyMade);
    }
    TriggerEnable(gt_builderMadeChange2, true);
    TriggerEnable(gt_fighterMadeChange2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_fighterMadeChange2_Init () {
    gt_fighterMadeChange2 = TriggerCreate("gt_fighterMadeChange2_Func");
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange2, 1, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange2, 2, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange2, 3, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange2, 4, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange2, 5, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange2, 6, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange2, 7, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange2, 8, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange2, 9, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange2, 10, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange2, 11, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange2, 12, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange2, 13, c_playerPropSuppliesMade);
    TriggerAddEventPlayerPropChange(gt_fighterMadeChange2, 14, c_playerPropSuppliesMade);
}

//--------------------------------------------------------------------------------------------------
// Trigger: fighterUsedChange2
//--------------------------------------------------------------------------------------------------
bool gt_fighterUsedChange2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto95859B04_g;
    int auto95859B04_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_playerGroupInfo2.lv_fightersWithNeutral, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_teamInfo2.lv_supplyUsed = PlayerGetPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed);
    TriggerEnable(gt_builderUsedChange2, false);
    TriggerEnable(gt_fighterUsedChange2, false);
    auto95859B04_g = gv_playerGroupInfo2.lv_players;
    auto95859B04_var = -1;
    while (true) {
        auto95859B04_var = PlayerGroupNextPlayer(auto95859B04_g, auto95859B04_var);
        if (auto95859B04_var < 0) { break; }
        PlayerModifyPropertyFixed(auto95859B04_var, c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_teamInfo2.lv_supplyUsed);
    }
    TriggerEnable(gt_builderUsedChange2, true);
    TriggerEnable(gt_fighterUsedChange2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_fighterUsedChange2_Init () {
    gt_fighterUsedChange2 = TriggerCreate("gt_fighterUsedChange2_Func");
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange2, 1, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange2, 2, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange2, 3, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange2, 4, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange2, 5, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange2, 6, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange2, 7, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange2, 8, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange2, 9, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange2, 10, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange2, 11, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange2, 12, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange2, 13, c_playerPropSuppliesUsed);
    TriggerAddEventPlayerPropChange(gt_fighterUsedChange2, 14, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: structureShare
//--------------------------------------------------------------------------------------------------
bool gt_structureShare_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__structure;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUnitType() == "SensorTower") || (libNtve_gf_TriggeringProgressUnitType() == "CreepTumorQueen")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__structure = EventUnitProgressUnit();
    if ((UnitGetOwner(lv__structure) == gv_teamInfo1.lv_builder)) {
        UnitSetOwner(lv__structure, 13, false);
    }
    else {
        UnitSetOwner(lv__structure, 14, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_structureShare_Init () {
    gt_structureShare = TriggerCreate("gt_structureShare_Func");
    TriggerAddEventUnitConstructProgress(gt_structureShare, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgrade
//--------------------------------------------------------------------------------------------------
bool gt_upgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv__upgrade;

    // Automatic Variable Declarations
    playergroup autoC320A639_g;
    int autoC320A639_var;
    playergroup autoE1216329_g;
    int autoE1216329_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv__upgrade = libNtve_gf_TriggeringProgressUpgrade();
    if ((UnitGetOwner(EventUnit()) == gv_teamInfo1.lv_builder)) {
        autoE1216329_g = gv_playerGroupInfo1.lv_fightersWithNeutral;
        autoE1216329_var = -1;
        while (true) {
            autoE1216329_var = PlayerGroupNextPlayer(autoE1216329_g, autoE1216329_var);
            if (autoE1216329_var < 0) { break; }
            TechTreeUpgradeAddLevel(autoE1216329_var, lv__upgrade, 1);
        }
    }
    else {
        autoC320A639_g = gv_playerGroupInfo2.lv_fightersWithNeutral;
        autoC320A639_var = -1;
        while (true) {
            autoC320A639_var = PlayerGroupNextPlayer(autoC320A639_g, autoC320A639_var);
            if (autoC320A639_var < 0) { break; }
            TechTreeUpgradeAddLevel(autoC320A639_var, lv__upgrade, 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgrade_Init () {
    gt_upgrade = TriggerCreate("gt_upgrade_Func");
    TriggerAddEventUnitResearchProgress(gt_upgrade, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: armoryAdd
//--------------------------------------------------------------------------------------------------
bool gt_armoryAdd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3BCB44A7_g;
    int auto3BCB44A7_var;
    playergroup autoDC167583_g;
    int autoDC167583_var;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "Armory"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnitProgressUnit()) == gv_teamInfo1.lv_builder)) {
        gv_sharedUnit1.lv_armory += 1;
        if ((gv_sharedUnit1.lv_armory == 1)) {
            autoDC167583_g = gv_playerGroupInfo1.lv_fightersWithNeutral;
            autoDC167583_var = -1;
            while (true) {
                autoDC167583_var = PlayerGroupNextPlayer(autoDC167583_g, autoDC167583_var);
                if (autoDC167583_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoDC167583_var, "HaveArmory", false);
            }
        }

    }
    else {
        gv_sharedUnit2.lv_armory += 1;
        if ((gv_sharedUnit2.lv_armory == 1)) {
            auto3BCB44A7_g = gv_playerGroupInfo2.lv_fightersWithNeutral;
            auto3BCB44A7_var = -1;
            while (true) {
                auto3BCB44A7_var = PlayerGroupNextPlayer(auto3BCB44A7_g, auto3BCB44A7_var);
                if (auto3BCB44A7_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto3BCB44A7_var, "HaveArmory", false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_armoryAdd_Init () {
    gt_armoryAdd = TriggerCreate("gt_armoryAdd_Func");
    TriggerAddEventUnitConstructProgress(gt_armoryAdd, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: armoryDec
//--------------------------------------------------------------------------------------------------
bool gt_armoryDec_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto82FB00A8_g;
    int auto82FB00A8_var;
    playergroup autoA46B3BBE_g;
    int autoA46B3BBE_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Armory"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_teamInfo1.lv_builder)) {
        gv_sharedUnit1.lv_armory -= 1;
        if ((gv_sharedUnit1.lv_armory == 0)) {
            autoA46B3BBE_g = gv_playerGroupInfo1.lv_fightersWithNeutral;
            autoA46B3BBE_var = -1;
            while (true) {
                autoA46B3BBE_var = PlayerGroupNextPlayer(autoA46B3BBE_g, autoA46B3BBE_var);
                if (autoA46B3BBE_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoA46B3BBE_var, "HaveArmory", true);
            }
        }

    }
    else {
        gv_sharedUnit2.lv_armory -= 1;
        if ((gv_sharedUnit2.lv_armory == 0)) {
            auto82FB00A8_g = gv_playerGroupInfo2.lv_fightersWithNeutral;
            auto82FB00A8_var = -1;
            while (true) {
                auto82FB00A8_var = PlayerGroupNextPlayer(auto82FB00A8_g, auto82FB00A8_var);
                if (auto82FB00A8_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto82FB00A8_var, "HaveArmory", true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_armoryDec_Init () {
    gt_armoryDec = TriggerCreate("gt_armoryDec_Func");
    TriggerAddEventUnitDied(gt_armoryDec, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: banelingNestAdd
//--------------------------------------------------------------------------------------------------
bool gt_banelingNestAdd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoFB0C25C7_g;
    int autoFB0C25C7_var;
    playergroup auto1634872C_g;
    int auto1634872C_var;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "BanelingNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnitProgressUnit()) == gv_teamInfo1.lv_builder)) {
        gv_sharedUnit1.lv_banelingNest += 1;
        if ((gv_sharedUnit1.lv_banelingNest == 1)) {
            auto1634872C_g = gv_playerGroupInfo1.lv_fightersWithNeutral;
            auto1634872C_var = -1;
            while (true) {
                auto1634872C_var = PlayerGroupNextPlayer(auto1634872C_g, auto1634872C_var);
                if (auto1634872C_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto1634872C_var, "HaveBanelingNest", false);
            }
        }

    }
    else {
        gv_sharedUnit2.lv_banelingNest += 1;
        if ((gv_sharedUnit2.lv_banelingNest == 1)) {
            autoFB0C25C7_g = gv_playerGroupInfo2.lv_fightersWithNeutral;
            autoFB0C25C7_var = -1;
            while (true) {
                autoFB0C25C7_var = PlayerGroupNextPlayer(autoFB0C25C7_g, autoFB0C25C7_var);
                if (autoFB0C25C7_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoFB0C25C7_var, "HaveBanelingNest", false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_banelingNestAdd_Init () {
    gt_banelingNestAdd = TriggerCreate("gt_banelingNestAdd_Func");
    TriggerAddEventUnitConstructProgress(gt_banelingNestAdd, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: banelingNestDec
//--------------------------------------------------------------------------------------------------
bool gt_banelingNestDec_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9501C1FA_g;
    int auto9501C1FA_var;
    playergroup autoBC7342D0_g;
    int autoBC7342D0_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "BanelingNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_teamInfo1.lv_builder)) {
        gv_sharedUnit1.lv_banelingNest -= 1;
        if ((gv_sharedUnit1.lv_banelingNest == 0)) {
            autoBC7342D0_g = gv_playerGroupInfo1.lv_fightersWithNeutral;
            autoBC7342D0_var = -1;
            while (true) {
                autoBC7342D0_var = PlayerGroupNextPlayer(autoBC7342D0_g, autoBC7342D0_var);
                if (autoBC7342D0_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoBC7342D0_var, "HaveBanelingNest", true);
            }
        }

    }
    else {
        gv_sharedUnit2.lv_banelingNest -= 1;
        if ((gv_sharedUnit2.lv_banelingNest == 0)) {
            auto9501C1FA_g = gv_playerGroupInfo2.lv_fightersWithNeutral;
            auto9501C1FA_var = -1;
            while (true) {
                auto9501C1FA_var = PlayerGroupNextPlayer(auto9501C1FA_g, auto9501C1FA_var);
                if (auto9501C1FA_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto9501C1FA_var, "HaveBanelingNest", true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_banelingNestDec_Init () {
    gt_banelingNestDec = TriggerCreate("gt_banelingNestDec_Func");
    TriggerAddEventUnitDied(gt_banelingNestDec, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: roachWarrenAdd
//--------------------------------------------------------------------------------------------------
bool gt_roachWarrenAdd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB5C902AE_g;
    int autoB5C902AE_var;
    playergroup autoBD20EAB9_g;
    int autoBD20EAB9_var;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "RoachWarren"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnitProgressUnit()) == gv_teamInfo1.lv_builder)) {
        gv_sharedUnit1.lv_roachWarren += 1;
        if ((gv_sharedUnit1.lv_roachWarren == 1)) {
            autoBD20EAB9_g = gv_playerGroupInfo1.lv_fightersWithNeutral;
            autoBD20EAB9_var = -1;
            while (true) {
                autoBD20EAB9_var = PlayerGroupNextPlayer(autoBD20EAB9_g, autoBD20EAB9_var);
                if (autoBD20EAB9_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoBD20EAB9_var, "HaveBanelingNest2", false);
            }
        }

    }
    else {
        gv_sharedUnit2.lv_roachWarren += 1;
        if ((gv_sharedUnit2.lv_roachWarren == 1)) {
            autoB5C902AE_g = gv_playerGroupInfo2.lv_fightersWithNeutral;
            autoB5C902AE_var = -1;
            while (true) {
                autoB5C902AE_var = PlayerGroupNextPlayer(autoB5C902AE_g, autoB5C902AE_var);
                if (autoB5C902AE_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoB5C902AE_var, "HaveBanelingNest2", false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_roachWarrenAdd_Init () {
    gt_roachWarrenAdd = TriggerCreate("gt_roachWarrenAdd_Func");
    TriggerAddEventUnitConstructProgress(gt_roachWarrenAdd, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: roachWarrenDec
//--------------------------------------------------------------------------------------------------
bool gt_roachWarrenDec_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB01CAE77_g;
    int autoB01CAE77_var;
    playergroup auto722A23D8_g;
    int auto722A23D8_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "RoachWarren"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_teamInfo1.lv_builder)) {
        gv_sharedUnit1.lv_roachWarren -= 1;
        if ((gv_sharedUnit1.lv_roachWarren == 0)) {
            auto722A23D8_g = gv_playerGroupInfo1.lv_fightersWithNeutral;
            auto722A23D8_var = -1;
            while (true) {
                auto722A23D8_var = PlayerGroupNextPlayer(auto722A23D8_g, auto722A23D8_var);
                if (auto722A23D8_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto722A23D8_var, "HaveBanelingNest2", true);
            }
        }

    }
    else {
        gv_sharedUnit2.lv_roachWarren -= 1;
        if ((gv_sharedUnit2.lv_roachWarren == 0)) {
            autoB01CAE77_g = gv_playerGroupInfo2.lv_fightersWithNeutral;
            autoB01CAE77_var = -1;
            while (true) {
                autoB01CAE77_var = PlayerGroupNextPlayer(autoB01CAE77_g, autoB01CAE77_var);
                if (autoB01CAE77_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoB01CAE77_var, "HaveBanelingNest2", true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_roachWarrenDec_Init () {
    gt_roachWarrenDec = TriggerCreate("gt_roachWarrenDec_Func");
    TriggerAddEventUnitDied(gt_roachWarrenDec, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: lairAdd
//--------------------------------------------------------------------------------------------------
bool gt_lairAdd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto1F2FB09E_g;
    int auto1F2FB09E_var;
    playergroup autoBFA4625E_g;
    int autoBFA4625E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_teamInfo1.lv_builder)) {
        gv_sharedUnit1.lv_lair += 1;
        if ((gv_sharedUnit1.lv_lair == 1)) {
            autoBFA4625E_g = gv_playerGroupInfo1.lv_fightersWithNeutral;
            autoBFA4625E_var = -1;
            while (true) {
                autoBFA4625E_var = PlayerGroupNextPlayer(autoBFA4625E_g, autoBFA4625E_var);
                if (autoBFA4625E_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoBFA4625E_var, "HaveLair", false);
                TechTreeSpecificRequirementEnable(autoBFA4625E_var, "UseOverseerMorph", false);
            }
        }

    }
    else {
        gv_sharedUnit2.lv_lair += 1;
        if ((gv_sharedUnit2.lv_lair == 1)) {
            auto1F2FB09E_g = gv_playerGroupInfo2.lv_fightersWithNeutral;
            auto1F2FB09E_var = -1;
            while (true) {
                auto1F2FB09E_var = PlayerGroupNextPlayer(auto1F2FB09E_g, auto1F2FB09E_var);
                if (auto1F2FB09E_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto1F2FB09E_var, "HaveLair", false);
                TechTreeSpecificRequirementEnable(auto1F2FB09E_var, "UseOverseerMorph", false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_lairAdd_Init () {
    gt_lairAdd = TriggerCreate("gt_lairAdd_Func");
    TriggerAddEventUnitAbility(gt_lairAdd, null, AbilityCommand("UpgradeToLair", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: lairDec
//--------------------------------------------------------------------------------------------------
bool gt_lairDec_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto101D1A53_g;
    int auto101D1A53_var;
    playergroup autoD5B0E244_g;
    int autoD5B0E244_var;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Lair") || (UnitGetType(EventUnit()) == "Hive")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_teamInfo1.lv_builder)) {
        gv_sharedUnit1.lv_lair -= 1;
        if ((gv_sharedUnit1.lv_lair == 0)) {
            autoD5B0E244_g = gv_playerGroupInfo1.lv_fightersWithNeutral;
            autoD5B0E244_var = -1;
            while (true) {
                autoD5B0E244_var = PlayerGroupNextPlayer(autoD5B0E244_g, autoD5B0E244_var);
                if (autoD5B0E244_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoD5B0E244_var, "HaveLair", true);
                TechTreeSpecificRequirementEnable(autoD5B0E244_var, "UseOverseerMorph", true);
            }
        }

    }
    else {
        gv_sharedUnit2.lv_lair -= 1;
        if ((gv_sharedUnit2.lv_lair == 0)) {
            auto101D1A53_g = gv_playerGroupInfo2.lv_fightersWithNeutral;
            auto101D1A53_var = -1;
            while (true) {
                auto101D1A53_var = PlayerGroupNextPlayer(auto101D1A53_g, auto101D1A53_var);
                if (auto101D1A53_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto101D1A53_var, "HaveLair", true);
                TechTreeSpecificRequirementEnable(auto101D1A53_var, "UseOverseerMorph", true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_lairDec_Init () {
    gt_lairDec = TriggerCreate("gt_lairDec_Func");
    TriggerAddEventUnitDied(gt_lairDec, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: lurkerDenAdd
//--------------------------------------------------------------------------------------------------
bool gt_lurkerDenAdd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoDD8AC918_g;
    int autoDD8AC918_var;
    playergroup auto0B57E2EA_g;
    int auto0B57E2EA_var;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "LurkerDenMP"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnitProgressUnit()) == gv_teamInfo1.lv_builder)) {
        gv_sharedUnit1.lv_lurkerDen += 1;
        if ((gv_sharedUnit1.lv_lurkerDen == 1)) {
            auto0B57E2EA_g = gv_playerGroupInfo1.lv_fightersWithNeutral;
            auto0B57E2EA_var = -1;
            while (true) {
                auto0B57E2EA_var = PlayerGroupNextPlayer(auto0B57E2EA_g, auto0B57E2EA_var);
                if (auto0B57E2EA_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto0B57E2EA_var, "HaveLurkerDen", false);
            }
        }

    }
    else {
        gv_sharedUnit2.lv_lurkerDen += 1;
        if ((gv_sharedUnit2.lv_lurkerDen == 1)) {
            autoDD8AC918_g = gv_playerGroupInfo2.lv_fightersWithNeutral;
            autoDD8AC918_var = -1;
            while (true) {
                autoDD8AC918_var = PlayerGroupNextPlayer(autoDD8AC918_g, autoDD8AC918_var);
                if (autoDD8AC918_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoDD8AC918_var, "HaveLurkerDen", false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_lurkerDenAdd_Init () {
    gt_lurkerDenAdd = TriggerCreate("gt_lurkerDenAdd_Func");
    TriggerAddEventUnitConstructProgress(gt_lurkerDenAdd, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: lurkerDenDec
//--------------------------------------------------------------------------------------------------
bool gt_lurkerDenDec_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto839F5BA6_g;
    int auto839F5BA6_var;
    playergroup autoB0BB9A99_g;
    int autoB0BB9A99_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "LurkerDenMP"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_teamInfo1.lv_builder)) {
        gv_sharedUnit1.lv_lurkerDen -= 1;
        if ((gv_sharedUnit1.lv_lurkerDen == 0)) {
            autoB0BB9A99_g = gv_playerGroupInfo1.lv_fightersWithNeutral;
            autoB0BB9A99_var = -1;
            while (true) {
                autoB0BB9A99_var = PlayerGroupNextPlayer(autoB0BB9A99_g, autoB0BB9A99_var);
                if (autoB0BB9A99_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoB0BB9A99_var, "HaveLurkerDen", true);
            }
        }

    }
    else {
        gv_sharedUnit2.lv_lurkerDen -= 1;
        if ((gv_sharedUnit2.lv_lurkerDen == 0)) {
            auto839F5BA6_g = gv_playerGroupInfo2.lv_fightersWithNeutral;
            auto839F5BA6_var = -1;
            while (true) {
                auto839F5BA6_var = PlayerGroupNextPlayer(auto839F5BA6_g, auto839F5BA6_var);
                if (auto839F5BA6_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto839F5BA6_var, "HaveLurkerDen", true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_lurkerDenDec_Init () {
    gt_lurkerDenDec = TriggerCreate("gt_lurkerDenDec_Func");
    TriggerAddEventUnitDied(gt_lurkerDenDec, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: greaterSpireAdd
//--------------------------------------------------------------------------------------------------
bool gt_greaterSpireAdd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7480F6B9_g;
    int auto7480F6B9_var;
    playergroup autoCD758636_g;
    int autoCD758636_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_teamInfo1.lv_builder)) {
        gv_sharedUnit1.lv_greaterSpire += 1;
        if ((gv_sharedUnit1.lv_greaterSpire == 1)) {
            autoCD758636_g = gv_playerGroupInfo1.lv_fightersWithNeutral;
            autoCD758636_var = -1;
            while (true) {
                autoCD758636_var = PlayerGroupNextPlayer(autoCD758636_g, autoCD758636_var);
                if (autoCD758636_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoCD758636_var, "HaveGreaterSpire", false);
            }
        }

    }
    else {
        gv_sharedUnit2.lv_greaterSpire += 1;
        if ((gv_sharedUnit2.lv_greaterSpire == 1)) {
            auto7480F6B9_g = gv_playerGroupInfo2.lv_fightersWithNeutral;
            auto7480F6B9_var = -1;
            while (true) {
                auto7480F6B9_var = PlayerGroupNextPlayer(auto7480F6B9_g, auto7480F6B9_var);
                if (auto7480F6B9_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto7480F6B9_var, "HaveGreaterSpire", false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_greaterSpireAdd_Init () {
    gt_greaterSpireAdd = TriggerCreate("gt_greaterSpireAdd_Func");
    TriggerAddEventUnitAbility(gt_greaterSpireAdd, null, AbilityCommand("UpgradeToGreaterSpire", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: greaterSpireDec
//--------------------------------------------------------------------------------------------------
bool gt_greaterSpireDec_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoCD17B6FB_g;
    int autoCD17B6FB_var;
    playergroup autoFB0C9109_g;
    int autoFB0C9109_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GreaterSpire"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_teamInfo1.lv_builder)) {
        gv_sharedUnit1.lv_greaterSpire -= 1;
        if ((gv_sharedUnit1.lv_greaterSpire == 0)) {
            autoFB0C9109_g = gv_playerGroupInfo1.lv_fightersWithNeutral;
            autoFB0C9109_var = -1;
            while (true) {
                autoFB0C9109_var = PlayerGroupNextPlayer(autoFB0C9109_g, autoFB0C9109_var);
                if (autoFB0C9109_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoFB0C9109_var, "HaveGreaterSpire", true);
            }
        }

    }
    else {
        gv_sharedUnit2.lv_greaterSpire -= 1;
        if ((gv_sharedUnit2.lv_greaterSpire == 0)) {
            autoCD17B6FB_g = gv_playerGroupInfo2.lv_fightersWithNeutral;
            autoCD17B6FB_var = -1;
            while (true) {
                autoCD17B6FB_var = PlayerGroupNextPlayer(autoCD17B6FB_g, autoCD17B6FB_var);
                if (autoCD17B6FB_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoCD17B6FB_var, "HaveGreaterSpire", true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_greaterSpireDec_Init () {
    gt_greaterSpireDec = TriggerCreate("gt_greaterSpireDec_Func");
    TriggerAddEventUnitDied(gt_greaterSpireDec, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: bwGreaterSpireAdd
//--------------------------------------------------------------------------------------------------
bool gt_bwGreaterSpireAdd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7277E04E_g;
    int auto7277E04E_var;
    playergroup auto34FEF6C7_g;
    int auto34FEF6C7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_teamInfo1.lv_builder)) {
        gv_sharedUnit1.lv_greaterSpire += 1;
        if ((gv_sharedUnit1.lv_greaterSpire == 1)) {
            auto34FEF6C7_g = gv_playerGroupInfo1.lv_fightersWithNeutral;
            auto34FEF6C7_var = -1;
            while (true) {
                auto34FEF6C7_var = PlayerGroupNextPlayer(auto34FEF6C7_g, auto34FEF6C7_var);
                if (auto34FEF6C7_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto34FEF6C7_var, "DevourerSCBW", false);
                TechTreeSpecificRequirementEnable(auto34FEF6C7_var, "GuardianSCBW", false);
            }
        }

    }
    else {
        gv_sharedUnit2.lv_greaterSpire += 1;
        if ((gv_sharedUnit2.lv_greaterSpire == 1)) {
            auto7277E04E_g = gv_playerGroupInfo2.lv_fightersWithNeutral;
            auto7277E04E_var = -1;
            while (true) {
                auto7277E04E_var = PlayerGroupNextPlayer(auto7277E04E_g, auto7277E04E_var);
                if (auto7277E04E_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto7277E04E_var, "DevourerSCBW", false);
                TechTreeSpecificRequirementEnable(auto7277E04E_var, "GuardianSCBW", false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_bwGreaterSpireAdd_Init () {
    gt_bwGreaterSpireAdd = TriggerCreate("gt_bwGreaterSpireAdd_Func");
    TriggerAddEventUnitAbility(gt_bwGreaterSpireAdd, null, AbilityCommand("GreaterSpireSCBW@Morph", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: bwGreaterSpireDec
//--------------------------------------------------------------------------------------------------
bool gt_bwGreaterSpireDec_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoCF020829_g;
    int autoCF020829_var;
    playergroup auto04EC120C_g;
    int auto04EC120C_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GreaterSpire"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_teamInfo1.lv_builder)) {
        gv_sharedUnit1.lv_greaterSpire -= 1;
        if ((gv_sharedUnit1.lv_greaterSpire == 0)) {
            auto04EC120C_g = gv_playerGroupInfo1.lv_fightersWithNeutral;
            auto04EC120C_var = -1;
            while (true) {
                auto04EC120C_var = PlayerGroupNextPlayer(auto04EC120C_g, auto04EC120C_var);
                if (auto04EC120C_var < 0) { break; }
                TechTreeSpecificRequirementEnable(auto04EC120C_var, "DevourerSCBW", true);
                TechTreeSpecificRequirementEnable(auto04EC120C_var, "GuardianSCBW", true);
            }
        }

    }
    else {
        gv_sharedUnit2.lv_greaterSpire -= 1;
        if ((gv_sharedUnit2.lv_greaterSpire == 0)) {
            autoCF020829_g = gv_playerGroupInfo2.lv_fightersWithNeutral;
            autoCF020829_var = -1;
            while (true) {
                autoCF020829_var = PlayerGroupNextPlayer(autoCF020829_g, autoCF020829_var);
                if (autoCF020829_var < 0) { break; }
                TechTreeSpecificRequirementEnable(autoCF020829_var, "DevourerSCBW", true);
                TechTreeSpecificRequirementEnable(autoCF020829_var, "GuardianSCBW", true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_bwGreaterSpireDec_Init () {
    gt_bwGreaterSpireDec = TriggerCreate("gt_bwGreaterSpireDec_Func");
    TriggerAddEventUnitDied(gt_bwGreaterSpireDec, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: nukeAdd
//--------------------------------------------------------------------------------------------------
bool gt_nukeAdd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    unit lv__unit;

    // Automatic Variable Declarations
    unitgroup autoDC8435F9_g;
    int autoDC8435F9_u;
    unitgroup auto9D32BF0A_g;
    int auto9D32BF0A_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "Nuke"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_teamInfo1.lv_builder)) {
        gv_sharedUnit1.lv_nuke += 1;
        auto9D32BF0A_g = gv_teamInfo1.lv_ghostGroup;
        auto9D32BF0A_u = UnitGroupCount(auto9D32BF0A_g, c_unitCountAll);
        for (;; auto9D32BF0A_u -= 1) {
            lv__unit = UnitGroupUnitFromEnd(auto9D32BF0A_g, auto9D32BF0A_u);
            if (lv__unit == null) { break; }
            UnitAbilityAddChargeUsed(lv__unit, "TacNukeStrike", "Abil/TacNukeStrike", -1.0);
        }
    }
    else {
        gv_sharedUnit2.lv_nuke += 1;
        autoDC8435F9_g = gv_teamInfo2.lv_ghostGroup;
        autoDC8435F9_u = UnitGroupCount(autoDC8435F9_g, c_unitCountAll);
        for (;; autoDC8435F9_u -= 1) {
            lv__unit = UnitGroupUnitFromEnd(autoDC8435F9_g, autoDC8435F9_u);
            if (lv__unit == null) { break; }
            UnitAbilityAddChargeUsed(lv__unit, "TacNukeStrike", "Abil/TacNukeStrike", -1.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_nukeAdd_Init () {
    gt_nukeAdd = TriggerCreate("gt_nukeAdd_Func");
    TriggerAddEventUnitArmMagazineProgress(gt_nukeAdd, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: nukeUse
//--------------------------------------------------------------------------------------------------
bool gt_nukeUse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__unit;
    int lv__triggeringPlayer;
    int lv__player;

    // Automatic Variable Declarations
    unitgroup autoB73DD721_g;
    int autoB73DD721_u;
    unitgroup autoA880A39A_g;
    int autoA880A39A_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv__unit = EventUnit();
    lv__triggeringPlayer = UnitGetOwner(EventUnit());
    if (((PlayerGroupHasPlayer(gv_playerGroupInfo1.lv_fightersWithNeutral, lv__triggeringPlayer) == true))) {
        gv_sharedUnit1.lv_nuke -= 1;
        PlayerCreateEffectPoint(gv_teamInfo1.lv_builder, "NukeNF1B", Point(0.0, 0.0));
        autoA880A39A_g = gv_teamInfo1.lv_ghostGroup;
        autoA880A39A_u = UnitGroupCount(autoA880A39A_g, c_unitCountAll);
        for (;; autoA880A39A_u -= 1) {
            lv__unit = UnitGroupUnitFromEnd(autoA880A39A_g, autoA880A39A_u);
            if (lv__unit == null) { break; }
            if ((lv__unit != EventUnit())) {
                UnitAbilityAddChargeUsed(lv__unit, "TacNukeStrike", "Abil/TacNukeStrike", 1.0);
            }

        }
    }
    else {
        gv_sharedUnit2.lv_nuke -= 1;
        PlayerCreateEffectPoint(gv_teamInfo2.lv_builder, "NukeNF1B", Point(0.0, 0.0));
        autoB73DD721_g = gv_teamInfo2.lv_ghostGroup;
        autoB73DD721_u = UnitGroupCount(autoB73DD721_g, c_unitCountAll);
        for (;; autoB73DD721_u -= 1) {
            lv__unit = UnitGroupUnitFromEnd(autoB73DD721_g, autoB73DD721_u);
            if (lv__unit == null) { break; }
            if ((lv__unit != EventUnit())) {
                UnitAbilityAddChargeUsed(lv__unit, "TacNukeStrike", "Abil/TacNukeStrike", 1.0);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_nukeUse_Init () {
    gt_nukeUse = TriggerCreate("gt_nukeUse_Func");
    TriggerAddEventUnitAbility(gt_nukeUse, null, AbilityCommand("TacNukeStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ghostTrainComplete
//--------------------------------------------------------------------------------------------------
bool gt_ghostTrainComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__chargeCount;
    unit lv__ghost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUnitType() == "Ghost") || (libNtve_gf_TriggeringProgressUnitType() == "GhostAlternate") || (libNtve_gf_TriggeringProgressUnitType() == "GhostNova")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__ghost = EventUnitProgressUnit();
    if ((UnitGetOwner(EventUnit()) == gv_teamInfo1.lv_builder)) {
        UnitGroupAdd(gv_teamInfo1.lv_ghostGroup, lv__ghost);
        if ((gv_sharedUnit1.lv_nuke >= 1)) {
            lv__chargeCount -= gv_sharedUnit1.lv_nuke;
            UnitAbilityAddChargeUsed(lv__ghost, "TacNukeStrike", "Abil/TacNukeStrike", lv__chargeCount);
        }

    }
    else {
        UnitGroupAdd(gv_teamInfo2.lv_ghostGroup, lv__ghost);
        if ((gv_sharedUnit2.lv_nuke >= 1)) {
            lv__chargeCount -= gv_sharedUnit2.lv_nuke;
            UnitAbilityAddChargeUsed(lv__ghost, "TacNukeStrike", "Abil/TacNukeStrike", lv__chargeCount);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ghostTrainComplete_Init () {
    gt_ghostTrainComplete = TriggerCreate("gt_ghostTrainComplete_Func");
    TriggerAddEventUnitTrainProgress(gt_ghostTrainComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: bwNukeAdd
//--------------------------------------------------------------------------------------------------
bool gt_bwNukeAdd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    unit lv__unit;

    // Automatic Variable Declarations
    unitgroup autoC2BB5654_g;
    int autoC2BB5654_u;
    unitgroup auto20B3AADA_g;
    int auto20B3AADA_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "NukeSCBW"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_teamInfo1.lv_builder)) {
        gv_sharedUnit1.lv_nuke += 1;
        auto20B3AADA_g = gv_teamInfo1.lv_ghostGroup;
        auto20B3AADA_u = UnitGroupCount(auto20B3AADA_g, c_unitCountAll);
        for (;; auto20B3AADA_u -= 1) {
            lv__unit = UnitGroupUnitFromEnd(auto20B3AADA_g, auto20B3AADA_u);
            if (lv__unit == null) { break; }
            UnitAbilityAddChargeUsed(lv__unit, "GhostSCBWNuclearStrike", "Abil/GhostSCBWNuclearStrike", -1.0);
        }
    }
    else {
        gv_sharedUnit2.lv_nuke += 1;
        autoC2BB5654_g = gv_teamInfo2.lv_ghostGroup;
        autoC2BB5654_u = UnitGroupCount(autoC2BB5654_g, c_unitCountAll);
        for (;; autoC2BB5654_u -= 1) {
            lv__unit = UnitGroupUnitFromEnd(autoC2BB5654_g, autoC2BB5654_u);
            if (lv__unit == null) { break; }
            UnitAbilityAddChargeUsed(lv__unit, "GhostSCBWNuclearStrike", "Abil/GhostSCBWNuclearStrike", -1.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_bwNukeAdd_Init () {
    gt_bwNukeAdd = TriggerCreate("gt_bwNukeAdd_Func");
    TriggerAddEventUnitArmMagazineProgress(gt_bwNukeAdd, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: bwNukeUse
//--------------------------------------------------------------------------------------------------
bool gt_bwNukeUse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__unit;
    int lv__triggeringPlayer;
    int lv__player;

    // Automatic Variable Declarations
    unitgroup autoD1A42AF3_g;
    int autoD1A42AF3_u;
    unitgroup auto26360F9A_g;
    int auto26360F9A_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv__unit = EventUnit();
    lv__triggeringPlayer = UnitGetOwner(EventUnit());
    if (((PlayerGroupHasPlayer(gv_playerGroupInfo1.lv_fightersWithNeutral, lv__triggeringPlayer) == true))) {
        gv_sharedUnit1.lv_nuke -= 1;
        PlayerCreateEffectPoint(gv_teamInfo1.lv_builder, "GhostSCBWNuclearStrike@CalldownDummyNF1B", Point(0.0, 0.0));
        auto26360F9A_g = gv_teamInfo1.lv_ghostGroup;
        auto26360F9A_u = UnitGroupCount(auto26360F9A_g, c_unitCountAll);
        for (;; auto26360F9A_u -= 1) {
            lv__unit = UnitGroupUnitFromEnd(auto26360F9A_g, auto26360F9A_u);
            if (lv__unit == null) { break; }
            if ((lv__unit != EventUnit())) {
                UnitAbilityAddChargeUsed(lv__unit, "GhostSCBWNuclearStrike", "Abil/GhostSCBWNuclearStrike", 1.0);
            }

        }
    }
    else {
        gv_sharedUnit2.lv_nuke -= 1;
        PlayerCreateEffectPoint(gv_teamInfo2.lv_builder, "GhostSCBWNuclearStrike@CalldownDummyNF1B", Point(0.0, 0.0));
        autoD1A42AF3_g = gv_teamInfo2.lv_ghostGroup;
        autoD1A42AF3_u = UnitGroupCount(autoD1A42AF3_g, c_unitCountAll);
        for (;; autoD1A42AF3_u -= 1) {
            lv__unit = UnitGroupUnitFromEnd(autoD1A42AF3_g, autoD1A42AF3_u);
            if (lv__unit == null) { break; }
            if ((lv__unit != EventUnit())) {
                UnitAbilityAddChargeUsed(lv__unit, "GhostSCBWNuclearStrike", "Abil/GhostSCBWNuclearStrike", 1.0);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_bwNukeUse_Init () {
    gt_bwNukeUse = TriggerCreate("gt_bwNukeUse_Func");
    TriggerAddEventUnitAbility(gt_bwNukeUse, null, AbilityCommand("GhostSCBWNuclearStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: bwGhostTrainComplete
//--------------------------------------------------------------------------------------------------
bool gt_bwGhostTrainComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__chargeCount;
    unit lv__ghost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "GhostSCBW"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__ghost = EventUnitProgressUnit();
    if ((UnitGetOwner(EventUnit()) == gv_teamInfo1.lv_builder)) {
        UnitGroupAdd(gv_teamInfo1.lv_ghostGroup, lv__ghost);
        if ((gv_sharedUnit1.lv_nuke >= 1)) {
            lv__chargeCount -= gv_sharedUnit1.lv_nuke;
            UnitAbilityAddChargeUsed(lv__ghost, "GhostSCBWNuclearStrike", "Abil/GhostSCBWNuclearStrike", lv__chargeCount);
        }

    }
    else {
        UnitGroupAdd(gv_teamInfo2.lv_ghostGroup, lv__ghost);
        if ((gv_sharedUnit2.lv_nuke >= 1)) {
            lv__chargeCount -= gv_sharedUnit2.lv_nuke;
            UnitAbilityAddChargeUsed(lv__ghost, "GhostSCBWNuclearStrike", "Abil/GhostSCBWNuclearStrike", lv__chargeCount);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_bwGhostTrainComplete_Init () {
    gt_bwGhostTrainComplete = TriggerCreate("gt_bwGhostTrainComplete_Func");
    TriggerAddEventUnitTrainProgress(gt_bwGhostTrainComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: mothershipAdd
//--------------------------------------------------------------------------------------------------
bool gt_mothershipAdd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD130C590_g;
    int autoD130C590_u;
    unit autoD130C590_var;
    unitgroup autoECCBBFF2_g;
    int autoECCBBFF2_u;
    unit autoECCBBFF2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_teamInfo1.lv_builder)) {
        gv_sharedUnit1.lv_motherShip = true;
        autoECCBBFF2_g = gv_teamInfo1.lv_nexusGroup;
        autoECCBBFF2_u = UnitGroupCount(autoECCBBFF2_g, c_unitCountAll);
        for (;; autoECCBBFF2_u -= 1) {
            autoECCBBFF2_var = UnitGroupUnitFromEnd(autoECCBBFF2_g, autoECCBBFF2_u);
            if (autoECCBBFF2_var == null) { break; }
            UnitAbilityEnable(autoECCBBFF2_var, "NexusTrainMothership", false);
        }
    }
    else {
        gv_sharedUnit2.lv_motherShip = true;
        autoD130C590_g = gv_teamInfo2.lv_nexusGroup;
        autoD130C590_u = UnitGroupCount(autoD130C590_g, c_unitCountAll);
        for (;; autoD130C590_u -= 1) {
            autoD130C590_var = UnitGroupUnitFromEnd(autoD130C590_g, autoD130C590_u);
            if (autoD130C590_var == null) { break; }
            UnitAbilityEnable(autoD130C590_var, "NexusTrainMothership", false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_mothershipAdd_Init () {
    gt_mothershipAdd = TriggerCreate("gt_mothershipAdd_Func");
    TriggerAddEventUnitAbility(gt_mothershipAdd, null, AbilityCommand("NexusTrainMothership", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: mothershipDec
//--------------------------------------------------------------------------------------------------
bool gt_mothershipDec_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5E3AEF13_g;
    int auto5E3AEF13_u;
    unit auto5E3AEF13_var;
    unitgroup autoAFB89D52_g;
    int autoAFB89D52_u;
    unit autoAFB89D52_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Mothership"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_playerGroupInfo1.lv_players, UnitGetOwner(EventUnit())) == true)) {
        gv_sharedUnit1.lv_motherShip = false;
        autoAFB89D52_g = gv_teamInfo1.lv_nexusGroup;
        autoAFB89D52_u = UnitGroupCount(autoAFB89D52_g, c_unitCountAll);
        for (;; autoAFB89D52_u -= 1) {
            autoAFB89D52_var = UnitGroupUnitFromEnd(autoAFB89D52_g, autoAFB89D52_u);
            if (autoAFB89D52_var == null) { break; }
            UnitAbilityEnable(autoAFB89D52_var, "NexusTrainMothership", true);
        }
    }
    else {
        gv_sharedUnit2.lv_motherShip = false;
        auto5E3AEF13_g = gv_teamInfo2.lv_nexusGroup;
        auto5E3AEF13_u = UnitGroupCount(auto5E3AEF13_g, c_unitCountAll);
        for (;; auto5E3AEF13_u -= 1) {
            auto5E3AEF13_var = UnitGroupUnitFromEnd(auto5E3AEF13_g, auto5E3AEF13_u);
            if (auto5E3AEF13_var == null) { break; }
            UnitAbilityEnable(auto5E3AEF13_var, "NexusTrainMothership", true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_mothershipDec_Init () {
    gt_mothershipDec = TriggerCreate("gt_mothershipDec_Func");
    TriggerAddEventUnitDied(gt_mothershipDec, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: nexusBuildComplete
//--------------------------------------------------------------------------------------------------
bool gt_nexusBuildComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__nexus;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "Nexus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__nexus = EventUnitProgressUnit();
    if ((UnitGetOwner(lv__nexus) == gv_teamInfo1.lv_builder)) {
        UnitGroupAdd(gv_teamInfo1.lv_nexusGroup, lv__nexus);
        if ((gv_sharedUnit1.lv_motherShip == true)) {
            UnitAbilityEnable(lv__nexus, "NexusTrainMothership", false);
        }

    }

    if ((UnitGetOwner(lv__nexus) == gv_teamInfo2.lv_builder)) {
        UnitGroupAdd(gv_teamInfo2.lv_nexusGroup, lv__nexus);
        if ((gv_sharedUnit2.lv_motherShip == true)) {
            UnitAbilityEnable(lv__nexus, "NexusTrainMothership", false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_nexusBuildComplete_Init () {
    gt_nexusBuildComplete = TriggerCreate("gt_nexusBuildComplete_Func");
    TriggerAddEventUnitConstructProgress(gt_nexusBuildComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: releaseByFighterCommand1
//--------------------------------------------------------------------------------------------------
bool gt_releaseByFighterCommand1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    unit lv__unit;

    // Automatic Variable Declarations
    unitgroup autoC85D29BB_g;
    int autoC85D29BB_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_teamInfo1.lv_fighterGroup, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    gf_closeSupplyShareTrigger(1);
    autoC85D29BB_g = UnitGroupSelected(lv__player);
    autoC85D29BB_u = UnitGroupCount(autoC85D29BB_g, c_unitCountAll);
    for (;; autoC85D29BB_u -= 1) {
        lv__unit = UnitGroupUnitFromEnd(autoC85D29BB_g, autoC85D29BB_u);
        if (lv__unit == null) { break; }
        if ((UnitGetOwner(lv__unit) == lv__player)) {
            UnitSetOwner(lv__unit, gv_teamMode1.lv_ownerForRelease, true);
            UnitSetTeamColorIndex(lv__unit, gv_teamMode1.lv_colorForRelease);
        }

    }
    gf_MaintainSupplyUnchanged(1, lv__player, gv_teamMode1.lv_ownerForRelease);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_releaseByFighterCommand1_Init () {
    gt_releaseByFighterCommand1 = TriggerCreate("gt_releaseByFighterCommand1_Func");
    TriggerAddEventChatMessage(gt_releaseByFighterCommand1, c_playerAny, ("-r"), true);
    TriggerAddEventChatMessage(gt_releaseByFighterCommand1, c_playerAny, ("-R"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: releaseByFighterCommand2
//--------------------------------------------------------------------------------------------------
bool gt_releaseByFighterCommand2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    unit lv__unit;

    // Automatic Variable Declarations
    unitgroup auto6515C5C6_g;
    int auto6515C5C6_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_teamInfo2.lv_fighterGroup, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    gf_closeSupplyShareTrigger(2);
    auto6515C5C6_g = UnitGroupSelected(lv__player);
    auto6515C5C6_u = UnitGroupCount(auto6515C5C6_g, c_unitCountAll);
    for (;; auto6515C5C6_u -= 1) {
        lv__unit = UnitGroupUnitFromEnd(auto6515C5C6_g, auto6515C5C6_u);
        if (lv__unit == null) { break; }
        if ((UnitGetOwner(lv__unit) == lv__player)) {
            UnitSetOwner(lv__unit, gv_teamMode2.lv_ownerForRelease, true);
            UnitSetTeamColorIndex(lv__unit, gv_teamMode2.lv_colorForRelease);
        }

    }
    gf_MaintainSupplyUnchanged(2, lv__player, gv_teamMode2.lv_ownerForRelease);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_releaseByFighterCommand2_Init () {
    gt_releaseByFighterCommand2 = TriggerCreate("gt_releaseByFighterCommand2_Func");
    TriggerAddEventChatMessage(gt_releaseByFighterCommand2, c_playerAny, ("-r"), true);
    TriggerAddEventChatMessage(gt_releaseByFighterCommand2, c_playerAny, ("-R"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: releaseByBuilderCommand1
//--------------------------------------------------------------------------------------------------
bool gt_releaseByBuilderCommand1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    unit lv__unit;

    // Automatic Variable Declarations
    unitgroup auto38DC9000_g;
    int auto38DC9000_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_teamInfo1.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    gf_closeSupplyShareTrigger(1);
    auto38DC9000_g = UnitGroupSelected(lv__player);
    auto38DC9000_u = UnitGroupCount(auto38DC9000_g, c_unitCountAll);
    for (;; auto38DC9000_u -= 1) {
        lv__unit = UnitGroupUnitFromEnd(auto38DC9000_g, auto38DC9000_u);
        if (lv__unit == null) { break; }
        if ((UnitGetOwner(lv__unit) == lv__player) && (UnitGetType(lv__unit) == "OverlordSCBW")) {
            UnitSetOwner(lv__unit, gv_teamMode1.lv_ownerForRelease, true);
            UnitSetTeamColorIndex(lv__unit, gv_teamMode1.lv_colorForRelease);
        }

    }
    gf_MaintainSupplyUnchanged(1, lv__player, gv_teamMode1.lv_ownerForRelease);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_releaseByBuilderCommand1_Init () {
    gt_releaseByBuilderCommand1 = TriggerCreate("gt_releaseByBuilderCommand1_Func");
    TriggerAddEventChatMessage(gt_releaseByBuilderCommand1, c_playerAny, ("-r"), true);
    TriggerAddEventChatMessage(gt_releaseByBuilderCommand1, c_playerAny, ("-R"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: releaseByBuilderCommand2
//--------------------------------------------------------------------------------------------------
bool gt_releaseByBuilderCommand2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;
    unit lv__unit;

    // Automatic Variable Declarations
    unitgroup auto7EDF63D4_g;
    int auto7EDF63D4_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_teamInfo2.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    gf_closeSupplyShareTrigger(2);
    auto7EDF63D4_g = UnitGroupSelected(lv__player);
    auto7EDF63D4_u = UnitGroupCount(auto7EDF63D4_g, c_unitCountAll);
    for (;; auto7EDF63D4_u -= 1) {
        lv__unit = UnitGroupUnitFromEnd(auto7EDF63D4_g, auto7EDF63D4_u);
        if (lv__unit == null) { break; }
        if ((UnitGetOwner(lv__unit) == lv__player) && (UnitGetType(lv__unit) == "OverlordSCBW")) {
            UnitSetOwner(lv__unit, gv_teamMode2.lv_ownerForRelease, true);
            UnitSetTeamColorIndex(lv__unit, gv_teamMode2.lv_colorForRelease);
        }

    }
    gf_MaintainSupplyUnchanged(2, lv__player, gv_teamMode2.lv_ownerForRelease);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_releaseByBuilderCommand2_Init () {
    gt_releaseByBuilderCommand2 = TriggerCreate("gt_releaseByBuilderCommand2_Func");
    TriggerAddEventChatMessage(gt_releaseByBuilderCommand2, c_playerAny, ("-r"), true);
    TriggerAddEventChatMessage(gt_releaseByBuilderCommand2, c_playerAny, ("-R"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: releaseAfterMorph1
//--------------------------------------------------------------------------------------------------
bool gt_releaseAfterMorph1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv__order;
    unit lv__unit;
    point lv__rallyPoint;
    int lv__oldOwner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_teamInfo1.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__unit = EventUnit();
    lv__oldOwner = UnitGetOwner(lv__unit);
    gf_closeSupplyShareTrigger(1);
    lv__order = UnitOrder(lv__unit, 0);
    UnitSetOwner(lv__unit, gv_teamMode1.lv_ownerForRelease, true);
    UnitSetTeamColorIndex(lv__unit, gv_teamMode1.lv_colorForRelease);
    if ((PlayerGetAlliance(gv_teamMode1.lv_ownerForRelease, c_allianceIdControl, lv__oldOwner) == true)) {
        UnitIssueOrder(lv__unit, lv__order, c_orderQueueReplace);
    }
    else {
        PlayerSetAlliance(gv_teamMode1.lv_ownerForRelease, c_allianceIdControl, lv__oldOwner, true);
        UnitIssueOrder(lv__unit, lv__order, c_orderQueueReplace);
        PlayerSetAlliance(gv_teamMode1.lv_ownerForRelease, c_allianceIdControl, lv__oldOwner, false);
    }
    gf_MaintainSupplyUnchanged(1, lv__oldOwner, gv_teamMode1.lv_ownerForRelease);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_releaseAfterMorph1_Init () {
    gt_releaseAfterMorph1 = TriggerCreate("gt_releaseAfterMorph1_Func");
    TriggerAddEventUnitAbility(gt_releaseAfterMorph1, null, AbilityCommand("MorphToOverseer", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_releaseAfterMorph1, null, AbilityCommand("MorphToTransportOverlord", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: releaseAfterMorph2
//--------------------------------------------------------------------------------------------------
bool gt_releaseAfterMorph2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv__order;
    unit lv__unit;
    point lv__rallyPoint;
    int lv__oldOwner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_teamInfo2.lv_builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__unit = EventUnit();
    lv__oldOwner = UnitGetOwner(lv__unit);
    gf_closeSupplyShareTrigger(2);
    lv__order = UnitOrder(lv__unit, 0);
    UnitSetOwner(lv__unit, gv_teamMode2.lv_ownerForRelease, true);
    UnitSetTeamColorIndex(lv__unit, gv_teamMode2.lv_colorForRelease);
    if ((PlayerGetAlliance(gv_teamMode2.lv_ownerForRelease, c_allianceIdControl, lv__oldOwner) == true)) {
        UnitIssueOrder(lv__unit, lv__order, c_orderQueueReplace);
    }
    else {
        PlayerSetAlliance(gv_teamMode2.lv_ownerForRelease, c_allianceIdControl, lv__oldOwner, true);
        UnitIssueOrder(lv__unit, lv__order, c_orderQueueReplace);
        PlayerSetAlliance(gv_teamMode2.lv_ownerForRelease, c_allianceIdControl, lv__oldOwner, false);
    }
    gf_MaintainSupplyUnchanged(2, lv__oldOwner, gv_teamMode2.lv_ownerForRelease);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_releaseAfterMorph2_Init () {
    gt_releaseAfterMorph2 = TriggerCreate("gt_releaseAfterMorph2_Func");
    TriggerAddEventUnitAbility(gt_releaseAfterMorph2, null, AbilityCommand("MorphToOverseer", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_releaseAfterMorph2, null, AbilityCommand("MorphToTransportOverlord", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: releaseAfterTrain1
//--------------------------------------------------------------------------------------------------
bool gt_releaseAfterTrain1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv__order;
    point lv__rallyPoint;
    unit lv__unit;
    int lv__oldOwner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_teamInfo1.lv_builder))) {
            return false;
        }

        if (!((gf_isEconomicUnitType(EventUnitProgressUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__unit = EventUnitProgressUnit();
    lv__oldOwner = UnitGetOwner(lv__unit);
    gf_closeSupplyShareTrigger(1);
    lv__order = UnitOrder(lv__unit, 0);
    UnitSetOwner(lv__unit, gv_teamMode1.lv_ownerForRelease, true);
    UnitSetTeamColorIndex(lv__unit, gv_teamMode1.lv_colorForRelease);
    if ((PlayerGetAlliance(gv_teamMode1.lv_ownerForRelease, c_allianceIdControl, lv__oldOwner) == true)) {
        UnitIssueOrder(lv__unit, lv__order, c_orderQueueReplace);
    }
    else {
        PlayerSetAlliance(gv_teamMode1.lv_ownerForRelease, c_allianceIdControl, lv__oldOwner, true);
        UnitIssueOrder(lv__unit, lv__order, c_orderQueueReplace);
        PlayerSetAlliance(gv_teamMode1.lv_ownerForRelease, c_allianceIdControl, lv__oldOwner, false);
    }
    gf_MaintainSupplyUnchanged(1, lv__oldOwner, gv_teamMode1.lv_ownerForRelease);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_releaseAfterTrain1_Init () {
    gt_releaseAfterTrain1 = TriggerCreate("gt_releaseAfterTrain1_Func");
    TriggerAddEventUnitTrainProgress(gt_releaseAfterTrain1, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: releaseAfterTrain2
//--------------------------------------------------------------------------------------------------
bool gt_releaseAfterTrain2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv__order;
    point lv__rallyPoint;
    unit lv__unit;
    int lv__oldOwner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_teamInfo2.lv_builder))) {
            return false;
        }

        if (!((gf_isEconomicUnitType(EventUnitProgressUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__unit = EventUnitProgressUnit();
    lv__oldOwner = UnitGetOwner(lv__unit);
    gf_closeSupplyShareTrigger(2);
    lv__order = UnitOrder(lv__unit, 0);
    UnitSetOwner(lv__unit, gv_teamMode2.lv_ownerForRelease, true);
    UnitSetTeamColorIndex(lv__unit, gv_teamMode2.lv_colorForRelease);
    if ((PlayerGetAlliance(gv_teamMode2.lv_ownerForRelease, c_allianceIdControl, lv__oldOwner) == true)) {
        UnitIssueOrder(lv__unit, lv__order, c_orderQueueReplace);
    }
    else {
        PlayerSetAlliance(gv_teamMode2.lv_ownerForRelease, c_allianceIdControl, lv__oldOwner, true);
        UnitIssueOrder(lv__unit, lv__order, c_orderQueueReplace);
        PlayerSetAlliance(gv_teamMode2.lv_ownerForRelease, c_allianceIdControl, lv__oldOwner, false);
    }
    gf_MaintainSupplyUnchanged(2, lv__oldOwner, gv_teamMode2.lv_ownerForRelease);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_releaseAfterTrain2_Init () {
    gt_releaseAfterTrain2 = TriggerCreate("gt_releaseAfterTrain2_Func");
    TriggerAddEventUnitTrainProgress(gt_releaseAfterTrain2, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: releaseAfterWarp1
//--------------------------------------------------------------------------------------------------
bool gt_releaseAfterWarp1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv__order;
    point lv__rallyPoint;
    unit lv__unit;
    int lv__oldOwner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnitProgressUnit()) == gv_teamInfo1.lv_builder) || (UnitGetOwner(EventUnitProgressUnit()) == 13)))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(libNtve_gf_TriggeringProgressUnitType(), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__unit = EventUnitProgressUnit();
    lv__oldOwner = UnitGetOwner(lv__unit);
    gf_closeSupplyShareTrigger(1);
    lv__order = UnitOrder(lv__unit, 0);
    UnitSetOwner(lv__unit, gv_teamMode1.lv_ownerForRelease, true);
    UnitSetTeamColorIndex(lv__unit, gv_teamMode1.lv_colorForRelease);
    if ((PlayerGetAlliance(gv_teamMode1.lv_ownerForRelease, c_allianceIdControl, lv__oldOwner) == true)) {
        UnitIssueOrder(lv__unit, lv__order, c_orderQueueReplace);
    }
    else {
        PlayerSetAlliance(gv_teamMode1.lv_ownerForRelease, c_allianceIdControl, lv__oldOwner, true);
        UnitIssueOrder(lv__unit, lv__order, c_orderQueueReplace);
        PlayerSetAlliance(gv_teamMode1.lv_ownerForRelease, c_allianceIdControl, lv__oldOwner, false);
    }
    gf_MaintainSupplyUnchanged(1, lv__oldOwner, gv_teamMode1.lv_ownerForRelease);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_releaseAfterWarp1_Init () {
    gt_releaseAfterWarp1 = TriggerCreate("gt_releaseAfterWarp1_Func");
    TriggerAddEventUnitConstructProgress(gt_releaseAfterWarp1, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: releaseAfterWarp2
//--------------------------------------------------------------------------------------------------
bool gt_releaseAfterWarp2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv__order;
    point lv__rallyPoint;
    unit lv__unit;
    int lv__oldOwner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnitProgressUnit()) == gv_teamInfo2.lv_builder) || (UnitGetOwner(EventUnitProgressUnit()) == 14)))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(libNtve_gf_TriggeringProgressUnitType(), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__unit = EventUnitProgressUnit();
    lv__oldOwner = UnitGetOwner(lv__unit);
    gf_closeSupplyShareTrigger(2);
    lv__order = UnitOrder(lv__unit, 0);
    UnitSetOwner(lv__unit, gv_teamMode2.lv_ownerForRelease, true);
    UnitSetTeamColorIndex(lv__unit, gv_teamMode2.lv_colorForRelease);
    if ((PlayerGetAlliance(gv_teamMode2.lv_ownerForRelease, c_allianceIdControl, lv__oldOwner) == true)) {
        UnitIssueOrder(lv__unit, lv__order, c_orderQueueReplace);
    }
    else {
        PlayerSetAlliance(gv_teamMode2.lv_ownerForRelease, c_allianceIdControl, lv__oldOwner, true);
        UnitIssueOrder(lv__unit, lv__order, c_orderQueueReplace);
        PlayerSetAlliance(gv_teamMode2.lv_ownerForRelease, c_allianceIdControl, lv__oldOwner, false);
    }
    gf_MaintainSupplyUnchanged(2, lv__oldOwner, gv_teamMode2.lv_ownerForRelease);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_releaseAfterWarp2_Init () {
    gt_releaseAfterWarp2 = TriggerCreate("gt_releaseAfterWarp2_Func");
    TriggerAddEventUnitConstructProgress(gt_releaseAfterWarp2, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: fighterSelect1
//--------------------------------------------------------------------------------------------------
bool gt_fighterSelect1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv__order;
    unit lv__unit;
    int lv__fighter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_teamInfo1.lv_fighterGroup, EventPlayer()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 13))) {
            return false;
        }

        if (!((gf_isSharedGroupedType(EventUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__unit = EventUnit();
    lv__fighter = EventPlayer();
    gf_closeSupplyShareTrigger(1);
    lv__order = UnitOrder(lv__unit, 0);
    UnitSetOwner(lv__unit, lv__fighter, true);
    UnitIssueOrder(lv__unit, lv__order, c_orderQueueReplace);
    gf_MaintainSupplyUnchanged(1, 13, lv__fighter);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_fighterSelect1_Init () {
    gt_fighterSelect1 = TriggerCreate("gt_fighterSelect1_Func");
    TriggerAddEventUnitSelected(gt_fighterSelect1, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: fighterSelect2
//--------------------------------------------------------------------------------------------------
bool gt_fighterSelect2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv__order;
    unit lv__unit;
    int lv__fighter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_teamInfo2.lv_fighterGroup, EventPlayer()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 14))) {
            return false;
        }

        if (!((gf_isSharedGroupedType(EventUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__unit = EventUnit();
    lv__fighter = EventPlayer();
    gf_closeSupplyShareTrigger(2);
    lv__order = UnitOrder(lv__unit, 0);
    UnitSetOwner(lv__unit, lv__fighter, true);
    UnitIssueOrder(lv__unit, lv__order, c_orderQueueReplace);
    gf_MaintainSupplyUnchanged(2, 14, lv__fighter);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_fighterSelect2_Init () {
    gt_fighterSelect2 = TriggerCreate("gt_fighterSelect2_Func");
    TriggerAddEventUnitSelected(gt_fighterSelect2, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: builderGG
//--------------------------------------------------------------------------------------------------
bool gt_builderGG_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__player;

    // Automatic Variable Declarations
    playergroup autoF6B95237_g;
    int autoF6B95237_var;
    playergroup autoD9F94AB0_g;
    int autoD9F94AB0_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_ggFlag == false))) {
            return false;
        }

        if (!(((EventPlayer() == gv_teamInfo1.lv_builder) || (EventPlayer() == gv_teamInfo2.lv_builder)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__player = EventPlayer();
    gv_ggFlag = true;
    if ((lv__player == gv_teamInfo1.lv_builder)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7C2BA5DC"));
        Wait(2.0, c_timeGame);
        autoD9F94AB0_g = gv_playerGroupInfo1.lv_users;
        autoD9F94AB0_var = -1;
        while (true) {
            autoD9F94AB0_var = PlayerGroupNextPlayer(autoD9F94AB0_g, autoD9F94AB0_var);
            if (autoD9F94AB0_var < 0) { break; }
            GameOver(autoD9F94AB0_var, c_gameOverDefeat, true, true);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A283F7C2"));
        Wait(2.0, c_timeGame);
        autoF6B95237_g = gv_playerGroupInfo2.lv_users;
        autoF6B95237_var = -1;
        while (true) {
            autoF6B95237_var = PlayerGroupNextPlayer(autoF6B95237_g, autoF6B95237_var);
            if (autoF6B95237_var < 0) { break; }
            GameOver(autoF6B95237_var, c_gameOverDefeat, true, true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_builderGG_Init () {
    gt_builderGG = TriggerCreate("gt_builderGG_Func");
    TriggerAddEventPlayerLeft(gt_builderGG, c_playerAny, c_gameResultUndecided);
    TriggerAddEventChatMessage(gt_builderGG, c_playerAny, ("-gg"), true);
    TriggerAddEventChatMessage(gt_builderGG, c_playerAny, ("-GG"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_temp_Init();
    gt_debug_Init();
    gt_controlon_Init();
    gt_controloff_Init();
    gt_test_Init();
    gt_res_Init();
    gt_fog_Init();
    gt_food_Init();
    gt_fast_Init();
    gt_gaincontrol_Init();
    gt_hideUI_Init();
    gt_showUI_Init();
    gt_nf_Init();
    gt__1f_Init();
    gt_worker_Init();
    gt_gg_Init();
    gt_race_Init();
    gt_disableExperimental_Init();
    gt_enableExperimental_Init();
    gt_unlock_pv_releaseToChangeOwner_Init();
    gt_initialization_Init();
    gt_MapInitialization_Init();
    gt_beforeRoleSelection_Init();
    gt_timer_Init();
    gt_singleMode_Init();
    gt_playerGroup_Init();
    gt_startLocation_Init();
    gt_roleSelection_Init();
    gt_roleSelection1_Init();
    gt_roleSelection2_Init();
    gt_figherGroup_Init();
    gt_startingSettings1_Init();
    gt_startingSettings2_Init();
    gt_afterRoleSelection_Init();
    gt_UI_Init();
    gt_gameModeSettings_Init();
    gt_meleeOptions_Init();
    gt_nexusGroupInit_Init();
    gt_resourceSettings_Init();
    gt_allianceSettings_Init();
    gt_supplyLimit_Init();
    gt_builderInfoDisplay_Init();
    gt_showPanel_Init();
    gt_hidePanel_Init();
    gt_userPanel_Init();
    gt_tipRole_Init();
    gt_tipCommands_Init();
    gt_tipHotkeys_Init();
    gt_tipDebugCommands_Init();
    gt_tipGG_Init();
    gt_tipSensorTower_Init();
    gt_tipRace_Init();
    gt_tipHelp_Init();
    gt_tipZerg_Init();
    gt_changeBuilder_Init();
    gt_giveupBuilderRole_Init();
    gt_fighterQuit_Init();
    gt_resourceDisplay1_Init();
    gt_resourceDisplay2_Init();
    gt_builderMineralUpdate1_Init();
    gt_builderVespeneUpdate1_Init();
    gt_fighterMineralUpdate1_Init();
    gt_fighterVespeneUpdate1_Init();
    gt_builderMineralUpdate2_Init();
    gt_builderVespeneUpdate2_Init();
    gt_fighterMineralUpdate2_Init();
    gt_fighterVespeneUpdate2_Init();
    gt_builderMadeChange1_Init();
    gt_builderUsedChange1_Init();
    gt_fighterMadeChange1_Init();
    gt_fighterUsedChange1_Init();
    gt_builderMadeChange2_Init();
    gt_builderUsedChange2_Init();
    gt_fighterMadeChange2_Init();
    gt_fighterUsedChange2_Init();
    gt_structureShare_Init();
    gt_upgrade_Init();
    gt_armoryAdd_Init();
    gt_armoryDec_Init();
    gt_banelingNestAdd_Init();
    gt_banelingNestDec_Init();
    gt_roachWarrenAdd_Init();
    gt_roachWarrenDec_Init();
    gt_lairAdd_Init();
    gt_lairDec_Init();
    gt_lurkerDenAdd_Init();
    gt_lurkerDenDec_Init();
    gt_greaterSpireAdd_Init();
    gt_greaterSpireDec_Init();
    gt_bwGreaterSpireAdd_Init();
    gt_bwGreaterSpireDec_Init();
    gt_nukeAdd_Init();
    gt_nukeUse_Init();
    gt_ghostTrainComplete_Init();
    gt_bwNukeAdd_Init();
    gt_bwNukeUse_Init();
    gt_bwGhostTrainComplete_Init();
    gt_mothershipAdd_Init();
    gt_mothershipDec_Init();
    gt_nexusBuildComplete_Init();
    gt_releaseByFighterCommand1_Init();
    gt_releaseByFighterCommand2_Init();
    gt_releaseByBuilderCommand1_Init();
    gt_releaseByBuilderCommand2_Init();
    gt_releaseAfterMorph1_Init();
    gt_releaseAfterMorph2_Init();
    gt_releaseAfterTrain1_Init();
    gt_releaseAfterTrain2_Init();
    gt_releaseAfterWarp1_Init();
    gt_releaseAfterWarp2_Init();
    gt_fighterSelect1_Init();
    gt_fighterSelect2_Init();
    gt_builderGG_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
